
ðŸ“„ FILE: base.css
==================================================
/* ==================== Base Styles ==================== */
:root {
    --step1-color: #5B9BD5;
    --step2-color: #70AD47;
    --step3-color: #7030A0;
    --step4-color: #ED7D31;
    
    --primary-color: #5B9BD5;
    --secondary-color: #70AD47;
    --accent-color: #ED7D31;
    --warning-color: #C00000;
    --info-color: #0563C1;
    --highlight-color: #FFC000;
    
    --dark-gray: #444444;
    --medium-gray: #666666;
    --light-gray: #EEEEEE;
    --extra-light-gray: #F8F8F8;
    --white: #FFFFFF;
    
    --border-radius: 0.5rem;
    --card-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    --transition-speed: 0.3s;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
}

body {
    background-color: var(--light-gray);
    color: var(--dark-gray);
    line-height: 1.5;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
}

h1, h2, h3, h4, h5, h6 {
    font-weight: 600;
    color: var(--dark-gray);
    margin-bottom: 0.75rem;
}

h1 {
    font-size: 1.875rem;
    color: var(--primary-color);
}

h2 {
    font-size: 1.5rem;
    margin-bottom: 0.75rem;
}

h3 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
}

p {
    margin-bottom: 1rem;
}

/* ==================== Header Styles ==================== */
.app-header {
    padding: 1.5rem 0;
    border-bottom: 1px solid var(--dark-gray);
    margin-bottom: 1.5rem;
}

.app-title {
    margin-bottom: 0.5rem;
}

.app-description {
    color: var(--medium-gray);
    font-size: 1.1rem;
}

/* ==================== Main Step Styles ==================== */
.main-steps {
    margin: 1.5rem 0;
}

.main-step {
    margin-bottom: 1rem;
    border: 1px solid var(--dark-gray);
    border-radius: var(--border-radius);
    overflow: hidden;
    transition: box-shadow var(--transition-speed);
}

.main-step.expanded {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.main-step-header {
    background-color: var(--white);
    padding: 1rem;
    display: flex;
    align-items: center;
    cursor: pointer;
    position: relative;
    border-bottom: 1px solid transparent;
    transition: background-color var(--transition-speed);
}

.main-step.expanded .main-step-header {
    border-bottom-color: var(--light-gray);
}

.main-step-header:hover {
    background-color: var(--extra-light-gray);
}

.main-step-number {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    font-weight: bold;
    font-size: 1.25rem;
    margin-right: 1rem;
    color: white;
    flex-shrink: 0;
}

.main-step-1 .main-step-number {
    background-color: var(--step1-color);
}

.main-step-2 .main-step-number {
    background-color: var(--step2-color);
}

.main-step-3 .main-step-number {
    background-color: var(--step3-color);
}

.main-step-4 .main-step-number {
    background-color: var(--step4-color);
}

.main-step-title {
    font-size: 1.25rem;
    font-weight: 600;
    flex-grow: 1;
}

.main-step-status {
    margin-right: 1rem;
    font-size: 0.875rem;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    color: white;
    font-weight: 500;
    flex-shrink: 0;
}

.status-not-started {
    background-color: var(--medium-gray);
}

.status-in-progress {
    background-color: var(--highlight-color);
    color: var(--dark-gray);
}

.status-completed {
    background-color: var(--secondary-color);
}

.toggle-icon {
    font-size: 1.25rem;
    transition: transform var(--transition-speed);
    color: var(--medium-gray);
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.main-step.expanded .toggle-icon {
    transform: rotate(180deg);
}

.main-step-content {
    height: 0;
    overflow: hidden;
    transition: height var(--transition-speed);
    background-color: var(--white);
}

.main-step-inner {
    padding: 0 1rem 1rem;
}

.main-step.expanded .main-step-content {
    height: auto;
}

/* ==================== Substep Navigation ==================== */
.substeps-nav {
    display: flex;
    overflow-x: auto;
    margin: 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--light-gray);
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
    position: relative;
    scroll-behavior: smooth;
}

/* Custom scrollbar for Chrome, Safari, and Opera */
.substeps-nav::-webkit-scrollbar {
    height: 4px;
}

.substeps-nav::-webkit-scrollbar-track {
    background: var(--light-gray);
    border-radius: 2px;
}

.substeps-nav::-webkit-scrollbar-thumb {
    background: var(--medium-gray);
    border-radius: 2px;
}

.substeps-nav::-webkit-scrollbar-thumb:hover {
    background: var(--dark-gray);
}

.nav-scroll-indicator {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-color);
    background-color: rgba(255, 255, 255, 0.8);
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.3s;
    z-index: 5;
}

.nav-scroll-left {
    left: 0;
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

.nav-scroll-right {
    right: 0;
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

.substeps-nav:hover .nav-scroll-indicator {
    opacity: 1;
}

.substep-tab {
    padding: 0.5rem 1rem;
    margin-right: 0.5rem;
    border-radius: 0.25rem;
    cursor: pointer;
    white-space: nowrap;
    color: var(--medium-gray);
    border-bottom: 3px solid transparent;
    transition: all var(--transition-speed);
    user-select: none;
}

.substep-tab:hover {
    background-color: var(--extra-light-gray);
}

.main-step-1 .substep-tab.active {
    border-bottom-color: var(--step1-color);
    color: var(--step1-color);
    font-weight: 600;
}

.main-step-2 .substep-tab.active {
    border-bottom-color: var(--step2-color);
    color: var(--step2-color);
    font-weight: 600;
}

.main-step-3 .substep-tab.active {
    border-bottom-color: var(--step3-color);
    color: var(--step3-color);
    font-weight: 600;
}

.main-step-4 .substep-tab.active {
    border-bottom-color: var(--step4-color);
    color: var(--step4-color);
    font-weight: 600;
}

/* ==================== Substep Content ==================== */
.substep-content {
    display: none;
    animation: fadeIn 0.3s ease;
}

.substep-content.active {
    display: block;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* ==================== Form Elements ==================== */
.form-grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 1rem;
}

@media (min-width: 768px) {
    .form-grid {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .form-grid.grid-3 {
        grid-template-columns: repeat(3, 1fr);
    }
    
    .span-2 {
        grid-column: span 2;
    }
    
    .span-3 {
        grid-column: span 3;
    }
}

.form-group {
    margin-bottom: 1rem;
}

.form-label {
    display: block;
    margin-bottom: 0.25rem;
    font-weight: 500;
    color: var(--dark-gray);
}

.form-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--dark-gray);
    border-radius: 0.25rem;
    font-size: 1rem;
    transition: border-color var(--transition-speed), box-shadow var(--transition-speed);
}

.form-control:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(91, 155, 213, 0.25);
}

select.form-control {
    appearance: none;
    background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23444' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.5rem center;
    padding-right: 2rem;
}

select.form-control:disabled {
    background-color: var(--light-gray);
    cursor: not-allowed;
}

textarea.form-control {
    min-height: 100px;
    resize: vertical;
}

/* Checkbox style */
.checkbox-container {
    display: flex;
    align-items: center;
    margin: 0.5rem 0;
}

.checkbox-container input[type="checkbox"] {
    margin-right: 0.5rem;
}

/* ==================== Alerts ==================== */
.alert {
    padding: 0.75rem 1rem;
    border-radius: 0.25rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: flex-start;
}

.alert svg {
    margin-right: 0.75rem;
    flex-shrink: 0;
}

.alert-info {
    background-color: #cce5ff;
    border: 1px solid #b8daff;
    color: #004085;
}

.alert-warning {
    background-color: #fff3cd;
    border: 1px solid #ffeeba;
    color: #856404;
}

.alert-success {
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
}

/* ==================== Learn more collapse ==================== */
.learn-more-container {
    margin: 1rem 0;
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    overflow: hidden;
}

.learn-more-header {
    padding: 0.75rem 1rem;
    background-color: var(--extra-light-gray);
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    user-select: none;
}

.learn-more-content {
    padding: 0 1rem;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
}

.learn-more-container.expanded .learn-more-content {
    max-height: 1000px;
    padding: 1rem;
}

.learn-more-icon {
    transition: transform 0.3s ease;
}

.learn-more-container.expanded .learn-more-icon {
    transform: rotate(180deg);
}

/* ==================== Navigation Buttons ==================== */
.nav-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 1.5rem;
}

.nav-buttons-right {
    display: flex;
    gap: 0.5rem;
}

/* ==================== XML Syntax Highlighting ==================== */
.tag-name { color: #905; }
.tag-bracket { color: #999; }
.tag-content { color: #222; }
.attribute { color: #07a; }
.attribute-value { color: #690; }


ðŸ“„ FILE: components.css
==================================================
/* ==================== Card Styles ==================== */
.card {
    background-color: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    border: 1px solid var(--dark-gray);
}

.card-header {
    margin-bottom: 1.25rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--light-gray);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.card-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
}

.card-badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    color: white;
    background-color: var(--medium-gray);
}

/* ==================== Prompt and Response Areas ==================== */
.prompt-response-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
}

@media (min-width: 992px) {
    .prompt-response-container {
        grid-template-columns: 1fr 1fr;
    }
}

.prompt-area, .response-area {
    display: flex;
    flex-direction: column;
}

.area-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.area-title {
    font-size: 1rem;
    font-weight: 500;
    color: var(--dark-gray);
    margin: 0;
}

.textarea-container {
    position: relative;
    flex-grow: 1;
}

.copy-btn {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    cursor: pointer;
    z-index: 10;
    transition: background-color var(--transition-speed);
}

.copy-btn:hover {
    background-color: var(--info-color);
}

.prompt-textarea, .response-textarea {
    width: 100%;
    min-height: 200px;
    padding: 1rem;
    border: 1px solid var(--dark-gray);
    border-radius: 0.25rem;
    font-size: 0.9rem;
    resize: vertical;
    font-family: monospace;
    line-height: 1.5;
}

.prompt-textarea {
    background-color: var(--light-gray);
}

.response-textarea {
    background-color: white;
}

.response-instructions {
    font-size: 0.875rem;
    color: var(--medium-gray);
    margin-top: 0.5rem;
}

/* ==================== Response Preview ==================== */
.response-preview {
    margin-top: 1rem;
    display: none;
}

.response-tabs {
    display: flex;
    border-bottom: 1px solid var(--light-gray);
    margin-bottom: 0.5rem;
}

.response-tab {
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    font-size: 0.875rem;
    transition: all var(--transition-speed);
}

.response-tab.active {
    border-bottom-color: var(--primary-color);
    color: var(--primary-color);
    font-weight: 500;
}

.response-display {
    border: 1px solid var(--light-gray);
    border-radius: 0.25rem;
    padding: 1rem;
    max-height: 300px;
    overflow-y: auto;
    background-color: white;
}

.response-content {
    display: none;
}

.response-content.active {
    display: block;
}

/* ==================== Learning Objective Container ==================== */
.lo-container {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1rem;
}

.lo-header {
    font-weight: 600;
    margin-bottom: 0.75rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.lo-badge {
    font-size: 0.75rem;
    padding: 0.2rem 0.5rem;
    border-radius: 1rem;
    background-color: var(--info-color);
    color: white;
}

.badge-practical {
    background-color: var(--accent-color);
}

/* ==================== Framework Card Styles ==================== */
.framework-card {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1rem;
    transition: all var(--transition-speed);
    cursor: pointer;
}

.framework-card:hover {
    border-color: var(--step2-color);
    background-color: var(--extra-light-gray);
}

.framework-card.selected {
    border-color: var(--step2-color);
    background-color: rgba(112, 173, 71, 0.1);
}

.framework-card-header {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--dark-gray);
}

.framework-card-description {
    font-size: 0.9rem;
    color: var(--medium-gray);
}

/* ==================== Technique Selection Styles ==================== */
.technique-selection {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.technique-badge {
    display: inline-flex;
    align-items: center;
    background-color: var(--extra-light-gray);
    border: 1px solid var(--medium-gray);
    border-radius: 1rem;
    padding: 0.25rem 0.75rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all var(--transition-speed);
}

.technique-badge:hover {
    background-color: var(--light-gray);
}

.technique-badge.selected {
    background-color: var(--step2-color);
    color: white;
    border-color: var(--step2-color);
}

/* ==================== Buttons ==================== */
.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color var(--transition-speed), transform 0.1s;
}

.btn:active {
    transform: translateY(1px);
}

.btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
}

.btn-primary:hover:not(:disabled) {
    background-color: var(--info-color);
}

.btn-secondary {
    background-color: var(--secondary-color);
    color: white;
}

.btn-secondary:hover:not(:disabled) {
    background-color: #5c9038;
}

.btn-accent {
    background-color: var(--accent-color);
    color: white;
}

.btn-accent:hover:not(:disabled) {
    background-color: #d96b1e;
}

.btn-outline {
    background-color: transparent;
    border: 1px solid var(--dark-gray);
    color: var(--dark-gray);
}

.btn-outline:hover:not(:disabled) {
    background-color: var(--light-gray);
}

.btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
}

/* ==================== Response Edit Area ==================== */
.response-edit {
    margin-top: 1rem;
    display: none;
}

.edit-textarea {
    width: 100%;
    min-height: 200px;
    padding: 1rem;
    border: 1px solid var(--primary-color);
    border-radius: 0.25rem;
    resize: vertical;
    font-family: monospace;
    line-height: 1.5;
}

/* New style for editing buttons */
.edit-button {
    background: none;
    border: none;
    color: var(--info-color);
    cursor: pointer;
    font-size: 0.9rem;
    padding: 0.2rem 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s;
}

.edit-button:hover {
    background-color: var(--extra-light-gray);
}

/* ==================== Practical Section Styles ==================== */
.practical-section {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1rem;
}

.practical-section-header {
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--dark-gray);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.practical-section-content {
    margin-bottom: 0.5rem;
}

/* ==================== Frayer Model Styles ==================== */
.frayer-model-container {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1rem;
}

.frayer-model-header {
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--dark-gray);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.frayer-model-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
}

.frayer-model-cell {
    border: 1px solid var(--light-gray);
    border-radius: 0.25rem;
    padding: 0.75rem;
}

.frayer-model-cell-title {
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: var(--dark-gray);
}

/* ==================== Lesson Structure Styles ==================== */
.lesson-segment {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1rem;
}

.segment-header {
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--dark-gray);
}

.retrieval-questions {
    margin-bottom: 1.5rem;
}

.retrieval-question {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
}

.retrieval-question input {
    flex-grow: 1;
    margin-right: 0.5rem;
}

.variable-row, .equipment-row, .step-row {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
}

.variable-row input, .equipment-row input, .step-row input {
    flex-grow: 1;
    margin-right: 0.5rem;
}

.variable-type {
    width: 120px;
    margin-right: 0.5rem;
}

.frayer-model-type-selection {
    margin-bottom: 1.5rem;
}

.frayer-example-item {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
}

.frayer-example-item input {
    flex-grow: 1;
    margin-right: 0.5rem;
}

.list-item-editor {
    margin-bottom: 0.5rem;
}

.list-item-container {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
}

.list-item-input {
    flex-grow: 1;
    margin-right: 0.5rem;
}

.list-actions {
    display: flex;
    gap: 0.25rem;
}


ðŸ“„ FILE: modals.css
==================================================
/* ==================== Modal Styles ==================== */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal-container {
    background-color: white;
    border-radius: 0.5rem;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.modal-header {
    padding: 1rem;
    border-bottom: 1px solid var(--light-gray);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
}

.modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--medium-gray);
}

.modal-body {
    padding: 1rem;
}

.modal-footer {
    padding: 1rem;
    border-top: 1px solid var(--light-gray);
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
}


ðŸ“„ FILE: index.html
==================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GCSE Science Lesson Planner</title>
    <!-- CSS Files -->
    <link rel="stylesheet" href="css/base.css">
    <link rel="stylesheet" href="css/components.css">
    <link rel="stylesheet" href="css/modals.css">
</head>
<body>
    <div class="container" id="app">
        <!-- Application Header -->
        <header class="app-header">
            <h1 class="app-title">GCSE Science Lesson Planner</h1>
            <p class="app-description">Create comprehensive lesson plans with Claude AI assistance</p>
        </header>

        <!-- Main Steps Container -->
        <div class="main-steps">
            <!-- Step 1: Lesson Foundations -->
            <div class="main-step main-step-1 expanded" id="mainStep1">
                <div class="main-step-header" onclick="toggleMainStep(1)">
                    <div class="main-step-number">1</div>
                    <div class="main-step-title">Lesson Foundations</div>
                    <div class="main-step-status status-in-progress">In Progress</div>
                    <div class="toggle-icon">â–¼</div>
                </div>
                <div class="main-step-content" id="mainStepContent1" style="height: auto;">
                    <div class="main-step-inner">
                        <!-- Substeps Navigation -->
                        <div class="substeps-nav">
                            <div class="nav-scroll-indicator nav-scroll-left" onclick="scrollSubstepNav('left')">â—€</div>
                            <div class="substep-tab active" data-step="1" data-substep="A" onclick="switchSubstep(1, 'A')">1A: Basic Info & LOs</div>
                            <div class="substep-tab" data-step="1" data-substep="B" onclick="switchSubstep(1, 'B')">1B: LO Types</div>
                            <div class="substep-tab" data-step="1" data-substep="C" onclick="switchSubstep(1, 'C')">1C: Misconceptions</div>
                            <div class="substep-tab" data-step="1" data-substep="D" onclick="switchSubstep(1, 'D')">1D: Prior Knowledge</div>
                            <div class="substep-tab" data-step="1" data-substep="E" onclick="switchSubstep(1, 'E')">1E: Review & Edit</div>
                            <div class="nav-scroll-indicator nav-scroll-right" onclick="scrollSubstepNav('right')">â–¶</div>
                        </div>

                        <!-- Substep 1A: Basic Info & Learning Objectives -->
                        <div class="substep-content active" data-step="1" data-substep="A">
                            <div class="card">
                                <div class="card-header">
                                    <h3 class="card-title">Lesson Information</h3>
                                </div>
                                
                                <div class="form-grid grid-3">
                                    <div class="form-group">
                                        <label class="form-label" for="provider">Exam Board</label>
                                        <select id="provider" class="form-control">
                                            <option value="">Select Exam Board</option>
                                            <option value="AQA">AQA</option>
                                            <option value="Edexcel">Edexcel</option>
                                            <option value="OCR">OCR</option>
                                            <option value="WJEC">WJEC</option>
                                            <option value="CCEA">CCEA</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="course">Course</label>
                                        <select id="course" class="form-control" disabled>
                                            <option value="">Select Course</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="level">Level</label>
                                        <select id="level" class="form-control">
                                            <option value="">Select Level</option>
                                            <option value="Foundation">Foundation</option>
                                            <option value="Higher">Higher</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="ability">Student Ability</label>
                                        <select id="ability" class="form-control">
                                            <option value="">Select Ability Level</option>
                                            <option value="Lower">Lower Ability</option>
                                            <option value="Standard">Standard Ability</option>
                                            <option value="Higher">Higher Ability</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="subject">Subject</label>
                                        <select id="subject" class="form-control">
                                            <option value="">Select Subject</option>
                                            <option value="Biology">Biology</option>
                                            <option value="Chemistry">Chemistry</option>
                                            <option value="Physics">Physics</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="topic">Topic</label>
                                        <input type="text" id="topic" class="form-control" placeholder="e.g. Atomic Structure">
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="lessonNumber">Lesson Number</label>
                                        <input type="number" id="lessonNumber" class="form-control" placeholder="e.g. 3">
                                    </div>
                                    
                                    <div class="form-group span-2">
                                        <label class="form-label" for="lessonTitle">Lesson Title</label>
                                        <input type="text" id="lessonTitle" class="form-control" placeholder="e.g. Understanding Isotopes">
                                    </div>
                                    
                                    <div class="form-group span-3">
                                        <label class="form-label" for="description">Additional Information (Optional)</label>
                                        <textarea id="description" class="form-control" placeholder="Add any specific focus areas or requirements for this lesson" rows="3"></textarea>
                                    </div>
                                </div>
                                
                                <div class="alert alert-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                                    <div>
                                        Complete all fields above to generate your lesson plan. This information will be included in your prompt for Claude.
                                    </div>
                                </div>
                                
                                <div class="prompt-response-container">
                                    <div class="prompt-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Generate Lesson Overview</h4>
                                            <button id="generateOverviewPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="overviewPromptTextarea" class="prompt-textarea" readonly placeholder="Fill out the lesson information form and click 'Generate Prompt'"></textarea>
                                            <button id="copyOverviewPromptBtn" class="copy-btn">Copy</button>
                                        </div>
                                    </div>
                                    
                                    <div class="response-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Claude's Response</h4>
                                            <button id="previewOverviewResponseBtn" class="btn btn-outline btn-sm">Preview</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="overviewResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
                                        </div>
                                        <p class="response-instructions">Paste Claude's full response including all XML tags</p>
                                        
                                        <div id="overviewPreview" class="response-preview">
                                            <div class="response-tabs">
                                                <div class="response-tab active" data-tab="overviewFormatted">Formatted</div>
                                                <div class="response-tab" data-tab="overviewTagged">Tagged</div>
                                            </div>
                                            <div class="response-display">
                                                <div class="response-content active" id="overviewFormattedResponse"></div>
                                                <div class="response-content" id="overviewTaggedResponse"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- New section for Learning Objectives with Practical Detection -->
                                <div id="learningObjectivesSection" style="margin-top: 2rem; display: none;">
                                    <h4>Learning Objectives</h4>
                                    <p>Review the learning objectives and indicate if any involve a practical component:</p>
                                    
                                    <div id="loContainers">
                                        <!-- LO1 Container -->
                                        <div class="lo-container" id="lo1Container">
                                            <div class="lo-header">
                                                <span>Learning Objective 1</span>
                                                <div>
                                                    <span id="lo1Badge" class="lo-badge"></span>
                                                </div>
                                            </div>
                                            <p id="lo1Title"></p>
                                            <p id="lo1Description"></p>
                                            <div class="checkbox-container">
                                                <input type="checkbox" id="lo1HasPractical">
                                                <label for="lo1HasPractical">This learning objective involves a practical component</label>
                                            </div>
                                        </div>
                                        
                                        <!-- LO2 Container -->
                                        <div class="lo-container" id="lo2Container">
                                            <div class="lo-header">
                                                <span>Learning Objective 2</span>
                                                <div>
                                                    <span id="lo2Badge" class="lo-badge"></span>
                                                </div>
                                            </div>
                                            <p id="lo2Title"></p>
                                            <p id="lo2Description"></p>
                                            <div class="checkbox-container">
                                                <input type="checkbox" id="lo2HasPractical">
                                                <label for="lo2HasPractical">This learning objective involves a practical component</label>
                                            </div>
                                        </div>
                                        
                                        <!-- LO3 Container -->
                                        <div class="lo-container" id="lo3Container" style="display: none;">
                                            <div class="lo-header">
                                                <span>Learning Objective 3</span>
                                                <div>
                                                    <span id="lo3Badge" class="lo-badge"></span>
                                                </div>
                                            </div>
                                            <p id="lo3Title"></p>
                                            <p id="lo3Description"></p>
                                            <div class="checkbox-container">
                                                <input type="checkbox" id="lo3HasPractical">
                                                <label for="lo3HasPractical">This learning objective involves a practical component</label>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="learn-more-container" id="practicalInfoContainer">
                                        <div class="learn-more-header" onclick="toggleLearnMore('practicalInfoContainer')">
                                            <span>Learn more about practical components</span>
                                            <span class="learn-more-icon">â–¼</span>
                                        </div>
                                        <div class="learn-more-content">
                                            <p>Practical components in learning objectives typically involve hands-on activities where students:</p>
                                            <ul>
                                                <li>Set up and perform experiments</li>
                                                <li>Use laboratory equipment</li>
                                                <li>Collect data or make observations</li>
                                                <li>Analyze practical results</li>
                                                <li>Apply practical skills like measuring, calibrating, or observing</li>
                                            </ul>
                                            <p>Marking an LO as having a practical component will help generate appropriate activities, assessments, and safety considerations for that objective.</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="nav-buttons">
                                    <div></div>
                                    <div class="nav-buttons-right">
                                        <button id="continueToLOTypesBtn" class="btn btn-primary" disabled>Continue to LO Types</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Substep 1B: Learning Objective Types -->
                        <div class="substep-content" data-step="1" data-substep="B">
                            <div class="card">
                                <div class="card-header">
                                    <h3 class="card-title">Learning Objective Types</h3>
                                </div>
                                
                                <div class="alert alert-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                                    <div>
                                        For each learning objective, we'll identify which type of assessment objective it aligns with (AO1, AO2, or AO3) and the specific sub-category.
                                    </div>
                                </div>

                                <!-- Learning Objectives Summary -->
                                <div id="loBSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                                    <h4>Learning Objectives</h4>
                                    <div id="loBSummaryContent">
                                        <p>Please complete Step 1A first to see your learning objectives here.</p>
                                    </div>
                                </div>
                                
                                <div class="prompt-response-container">
                                    <div class="prompt-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Generate LO Types</h4>
                                            <button id="generateLOTypesPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="loTypesPromptTextarea" class="prompt-textarea" readonly placeholder="First complete Step 1A to generate this prompt..."></textarea>
                                            <button id="copyLOTypesPromptBtn" class="copy-btn">Copy</button>
                                        </div>
                                    </div>
                                    
                                    <div class="response-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Claude's Response</h4>
                                            <button id="previewLOTypesResponseBtn" class="btn btn-outline btn-sm">Preview</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="loTypesResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
                                        </div>
                                        <p class="response-instructions">Paste Claude's full response including all XML tags</p>
                                        
                                        <div id="loTypesPreview" class="response-preview">
                                            <div class="response-tabs">
                                                <div class="response-tab active" data-tab="loTypesFormatted">Formatted</div>
                                                <div class="response-tab" data-tab="loTypesTagged">Tagged</div>
                                            </div>
                                            <div class="response-display">
                                                <div class="response-content active" id="loTypesFormattedResponse"></div>
                                                <div class="response-content" id="loTypesTaggedResponse"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Learning Objective Types with Edit Feature -->
                                <div id="loTypesEditContainer" style="margin-top: 2rem; display: none;">
                                    <h4>Learning Objective Types</h4>
                                    <p>Review and edit the learning objective types:</p>
                                    
                                    <!-- LO1 Types -->
                                    <div class="lo-container">
                                        <div class="lo-header">
                                            <span>Learning Objective 1 Types</span>
                                            <button class="edit-button" id="editLO1TypeBtn">Edit</button>
                                        </div>
                                        <div id="lo1TypeContent">
                                            <p><strong>Assessment Objective:</strong> <span id="lo1AOCategory"></span></p>
                                            <p><strong>Specific Type:</strong> <span id="lo1SpecificType"></span></p>
                                            <p><strong>Justification:</strong> <span id="lo1TypeJustification"></span></p>
                                        </div>
                                    </div>
                                    
                                    <!-- LO2 Types -->
                                    <div class="lo-container">
                                        <div class="lo-header">
                                            <span>Learning Objective 2 Types</span>
                                            <button class="edit-button" id="editLO2TypeBtn">Edit</button>
                                        </div>
                                        <div id="lo2TypeContent">
                                            <p><strong>Assessment Objective:</strong> <span id="lo2AOCategory"></span></p>
                                            <p><strong>Specific Type:</strong> <span id="lo2SpecificType"></span></p>
                                            <p><strong>Justification:</strong> <span id="lo2TypeJustification"></span></p>
                                        </div>
                                    </div>
                                    
                                    <!-- LO3 Types -->
                                    <div class="lo-container" id="lo3TypeContainer" style="display: none;">
                                        <div class="lo-header">
                                            <span>Learning Objective 3 Types</span>
                                            <button class="edit-button" id="editLO3TypeBtn">Edit</button>
                                        </div>
                                        <div id="lo3TypeContent">
                                            <p><strong>Assessment Objective:</strong> <span id="lo3AOCategory"></span></p>
                                            <p><strong>Specific Type:</strong> <span id="lo3SpecificType"></span></p>
                                            <p><strong>Justification:</strong> <span id="lo3TypeJustification"></span></p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="nav-buttons">
                                    <button class="btn btn-outline" onclick="switchSubstep(1, 'A')">Back</button>
                                    <div class="nav-buttons-right">
                                        <button id="continueToMisconceptionsBtn" class="btn btn-primary" disabled>Continue to Misconceptions</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Substep 1C: Misconceptions -->
                        <div class="substep-content" data-step="1" data-substep="C">
                            <div class="card">
                                <div class="card-header">
                                    <h3 class="card-title">Potential Misconceptions</h3>
                                </div>
                                
                                <div class="alert alert-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                                    <div>
                                        Identify common misconceptions that students might have for each learning objective. This will help you address them during the lesson.
                                    </div>
                                </div>

                                <!-- Learning Objectives Summary -->
                                <div id="loCSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                                    <h4>Learning Objectives & Types</h4>
                                    <div id="loCSummaryContent">
                                        <p>Please complete Steps 1A and 1B first to see your learning objectives here.</p>
                                    </div>
                                </div>
                                
                                <div class="prompt-response-container">
                                    <div class="prompt-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Generate Misconceptions</h4>
                                            <button id="generateMisconceptionsPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="misconceptionsPromptTextarea" class="prompt-textarea" readonly placeholder="First complete Steps 1A and 1B to generate this prompt..."></textarea>
                                            <button id="copyMisconceptionsPromptBtn" class="copy-btn">Copy</button>
                                        </div>
                                    </div>
                                    
                                    <div class="response-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Claude's Response</h4>
                                            <button id="previewMisconceptionsResponseBtn" class="btn btn-outline btn-sm">Preview</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="misconceptionsResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
                                        </div>
                                        <p class="response-instructions">Paste Claude's full response including all XML tags</p>
                                        
                                        <div id="misconceptionsPreview" class="response-preview">
                                            <div class="response-tabs">
                                                <div class="response-tab active" data-tab="misconceptionsFormatted">Formatted</div>
                                                <div class="response-tab" data-tab="misconceptionsTagged">Tagged</div>
                                            </div>
                                            <div class="response-display">
                                                <div class="response-content active" id="misconceptionsFormattedResponse"></div>
                                                <div class="response-content" id="misconceptionsTaggedResponse"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Misconceptions with Edit Feature -->
                                <div id="misconceptionsEditContainer" style="margin-top: 2rem; display: none;">
                                    <h4>Potential Misconceptions</h4>
                                    <p>Review and edit the misconceptions for each learning objective:</p>
                                    
                                    <!-- LO1 Misconceptions -->
                                    <div class="lo-container">
                                        <div class="lo-header">
                                            <span>Learning Objective 1 Misconceptions</span>
                                            <button class="edit-button" id="editLO1MisconceptionsBtn">Edit</button>
                                        </div>
                                        <div id="lo1MisconceptionsContent">
                                            <ul id="lo1MisconceptionsList">
                                            </ul>
                                        </div>
                                    </div>
                                    
                                    <!-- LO2 Misconceptions -->
                                    <div class="lo-container">
                                        <div class="lo-header">
                                            <span>Learning Objective 2 Misconceptions</span>
                                            <button class="edit-button" id="editLO2MisconceptionsBtn">Edit</button>
                                        </div>
                                        <div id="lo2MisconceptionsContent">
                                            <ul id="lo2MisconceptionsList">
                                            </ul>
                                        </div>
                                    </div>
                                    
                                    <!-- LO3 Misconceptions -->
                                    <div class="lo-container" id="lo3MisconceptionsContainer" style="display: none;">
                                        <div class="lo-header">
                                            <span>Learning Objective 3 Misconceptions</span>
                                            <button class="edit-button" id="editLO3MisconceptionsBtn">Edit</button>
                                        </div>
                                        <div id="lo3MisconceptionsContent">
                                            <ul id="lo3MisconceptionsList">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="nav-buttons">
                                    <button class="btn btn-outline" onclick="switchSubstep(1, 'B')">Back</button>
                                    <div class="nav-buttons-right">
                                        <button id="continueToPriorKnowledgeBtn" class="btn btn-primary" disabled>Continue to Prior Knowledge</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Substep 1D: Prior Knowledge -->
                        <div class="substep-content" data-step="1" data-substep="D">
                            <div class="card">
                                <div class="card-header">
                                    <h3 class="card-title">Prior Knowledge Requirements</h3>
                                </div>
                                
                                <div class="alert alert-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                                    <div>
                                        Identify the essential prior knowledge that students need to have before this lesson. This will help you plan appropriate retrieval practice.
                                    </div>
                                </div>

                                <!-- Learning Objectives and Misconceptions Summary -->
                                <div id="loDSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                                    <div id="loDSummaryContent">
                                        <p>Please complete Steps 1A, 1B, and 1C first to see your learning objectives and misconceptions here.</p>
                                    </div>
                                </div>
                                
                                <div class="prompt-response-container">
                                    <div class="prompt-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Generate Prior Knowledge</h4>
                                            <button id="generatePriorKnowledgePromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="priorKnowledgePromptTextarea" class="prompt-textarea" readonly placeholder="First complete Steps 1A, 1B, and 1C to generate this prompt..."></textarea>
                                            <button id="copyPriorKnowledgePromptBtn" class="copy-btn">Copy</button>
                                        </div>
                                    </div>
                                    
                                    <div class="response-area">
                                        <div class="area-header">
                                            <h4 class="area-title">Claude's Response</h4>
                                            <button id="previewPriorKnowledgeResponseBtn" class="btn btn-outline btn-sm">Preview</button>
                                        </div>
                                        <div class="textarea-container">
                                            <textarea id="priorKnowledgeResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
                                        </div>
                                        <p class="response-instructions">Paste Claude's full response including all XML tags</p>
                                        
                                        <div id="priorKnowledgePreview" class="response-preview">
                                            <div class="response-tabs">
                                                <div class="response-tab active" data-tab="priorKnowledgeFormatted">Formatted</div>
                                                <div class="response-tab" data-tab="priorKnowledgeTagged">Tagged</div>
                                            </div>
                                            <div class="response-display">
                                                <div class="response-content active" id="priorKnowledgeFormattedResponse"></div>
                                                <div class="response-content" id="priorKnowledgeTaggedResponse"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Prior Knowledge with Edit Feature -->
                                <div id="priorKnowledgeEditContainer" style="margin-top: 2rem; display: none;">
                                    <h4>Prior Knowledge Requirements</h4>
                                    <p>Review and edit the prior knowledge for each learning objective:</p>
                                    
                                    <!-- LO1 Prior Knowledge -->
                                    <div class="lo-container">
                                        <div class="lo-header">
                                            <span>Learning Objective 1 Prior Knowledge</span>
                                            <button class="edit-button" id="editLO1PriorKnowledgeBtn">Edit</button>
                                        </div>
                                        <div id="lo1PriorKnowledgeContent">
                                            <ul id="lo1PriorKnowledgeList">
                                            </ul>
                                        </div>
                                    </div>
                                    
                                    <!-- LO2 Prior Knowledge -->
                                    <div class="lo-container">
                                        <div class="lo-header">
                                            <span>Learning Objective 2 Prior Knowledge</span>
                                            <button class="edit-button" id="editLO2PriorKnowledgeBtn">Edit</button>
                                        </div>
                                        <div id="lo2PriorKnowledgeContent">
                                            <ul id="lo2PriorKnowledgeList">
                                            </ul>
                                        </div>
                                    </div>
                                    
                                    <!-- LO3 Prior Knowledge -->
                                    <div class="lo-container" id="lo3PriorKnowledgeContainer" style="display: none;">
                                        <div class="lo-header">
                                            <span>Learning Objective 3 Prior Knowledge</span>
                                            <button class="edit-button" id="editLO3PriorKnowledgeBtn">Edit</button>
                                        </div>
                                        <div id="lo3PriorKnowledgeContent">
                                            <ul id="lo3PriorKnowledgeList">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="nav-buttons">
                                    <button class="btn btn-outline" onclick="switchSubstep(1, 'C')">Back</button>
                                    <div class="nav-buttons-right">
                                        <button id="continueToReviewBtn" class="btn btn-primary" disabled>Continue to Review</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Substep 1E: Review & Edit -->
                        <div class="substep-content" data-step="1" data-substep="E">
                            <div class="card">
                                <div class="card-header">
                                    <h3 class="card-title">Review Lesson Foundations</h3>
                                </div>
                                
                                <div class="alert alert-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                                    <div>
                                        Review all the information generated so far. You can make any necessary edits before continuing to the next step.
                                    </div>
                                </div>
                                
                                <div id="foundationsReview">
                                    <h4>Lesson Information</h4>
                                    <div class="response-display" id="lessonInfoReview">
                                        <p>Complete all previous steps to see a summary here.</p>
                                    </div>
                                    
                                    <h4 style="margin-top: 1.5rem;">Learning Objectives</h4>
                                    <div class="response-display" id="learningObjectivesReview">
                                        <p>Complete all previous steps to see a summary here.</p>
                                    </div>
                                    
                                    <h4 style="margin-top: 1.5rem;">Learning Objective Types</h4>
                                    <div class="response-display" id="loTypesReview">
                                        <p>Complete all previous steps to see a summary here.</p>
                                    </div>
                                    
                                    <h4 style="margin-top: 1.5rem;">Potential Misconceptions</h4>
                                    <div class="response-display" id="misconceptionsReview">
                                        <p>Complete all previous steps to see a summary here.</p>
                                    </div>
                                    
                                    <h4 style="margin-top: 1.5rem;">Prior Knowledge Requirements</h4>
                                    <div class="response-display" id="priorKnowledgeReview">
                                        <p>Complete all previous steps to see a summary here.</p>
                                    </div>
                                </div>
                                
                                <div class="nav-buttons">
                                    <button class="btn btn-outline" onclick="switchSubstep(1, 'D')">Back</button>
                                    <div class="nav-buttons-right">
                                        <button id="finishStep1Btn" class="btn btn-secondary" disabled>Complete & Continue to Step 2</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 2: Teaching Approach -->
            <div class="main-step main-step-2" id="mainStep2">
                <div class="main-step-header" onclick="toggleMainStep(2)">
                    <div class="main-step-number">2</div>
                    <div class="main-step-title">Teaching Approach</div>
                    <div class="main-step-status status-not-started">Not Started</div>
                    <div class="toggle-icon">â–¼</div>
                </div>
                <div class="main-step-content" id="mainStepContent2">
                    <div class="main-step-inner">
                        <p>Complete Step 1 first to unlock this step.</p>
                    </div>
                </div>
            </div>

            <!-- Step 3: Slide Generation -->
            <div class="main-step main-step-3" id="mainStep3">
                <div class="main-step-header" onclick="toggleMainStep(3)">
                    <div class="main-step-number">3</div>
                    <div class="main-step-title">Slide Generation</div>
                    <div class="main-step-status status-not-started">Not Started</div>
                    <div class="toggle-icon">â–¼</div>
                </div>
                <div class="main-step-content" id="mainStepContent3">
                    <div class="main-step-inner">
                        <p>Complete Steps 1 and 2 first to unlock this step.</p>
                    </div>
                </div>
            </div>

            <!-- Step 4: Worksheet Generation -->
            <div class="main-step main-step-4" id="mainStep4">
                <div class="main-step-header" onclick="toggleMainStep(4)">
                    <div class="main-step-number">4</div>
                    <div class="main-step-title">Worksheet Generation</div>
                    <div class="main-step-status status-not-started">Not Started</div>
                    <div class="toggle-icon">â–¼</div>
                </div>
                <div class="main-step-content" id="mainStepContent4">
					<div class="main-step-inner">
						<!-- Substeps Navigation -->
						<div class="substeps-nav">
							<div class="nav-scroll-indicator nav-scroll-left" onclick="scrollSubstepNav('left')">â—€</div>
							<div class="substep-tab active" data-step="4" data-substep="A" onclick="switchSubstep(4, 'A')">4A: Reference Materials</div>
							<div class="substep-tab" data-step="4" data-substep="B" onclick="switchSubstep(4, 'B')">4B: Prior Knowledge Retrieval</div>
							<div class="substep-tab" data-step="4" data-substep="C" onclick="switchSubstep(4, 'C')">4C: SCALE Questions</div>
							<div class="substep-tab" data-step="4" data-substep="D" onclick="switchSubstep(4, 'D')">4D: Application Questions</div>
							<div class="substep-tab" data-step="4" data-substep="E" onclick="switchSubstep(4, 'E')">4E: Exam Technique Questions</div>
							<div class="substep-tab" data-step="4" data-substep="F" onclick="switchSubstep(4, 'F')">4F: Exam Style Questions</div>
							<div class="substep-tab" data-step="4" data-substep="G" onclick="switchSubstep(4, 'G')">4G: Worksheet Finalization</div>
							<div class="nav-scroll-indicator nav-scroll-right" onclick="scrollSubstepNav('right')">â–¶</div>
						</div>
						
						<!-- Substep 4A: Reference Materials -->
						<div class="substep-content active" data-step="4" data-substep="A">
							<div class="card">
								<div class="card-header">
									<h3 class="card-title">Reference Materials</h3>
								</div>
								
								<div class="alert alert-info">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
									<div>
										Create reference materials for your worksheet, including key definitions, formulas, diagrams, and examples that students will need to complete the activities.
									</div>
								</div>
								
								<!-- Learning Objectives Summary -->
								<div id="learningObjectivesForWorksheets" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
									<p>Please complete Step 1 first to see learning objectives here.</p>
								</div>
								
								<div class="prompt-response-container">
									<div class="prompt-area">
										<div class="area-header">
											<h4 class="area-title">Generate Reference Materials</h4>
											<button id="generateReferenceMaterialsPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
										</div>
										<div class="textarea-container">
											<textarea id="referenceMaterialsPromptTextarea" class="prompt-textarea" readonly placeholder="Click 'Generate Prompt' to create reference materials..."></textarea>
											<button id="copyReferenceMaterialsPromptBtn" class="copy-btn">Copy</button>
										</div>
									</div>
									
									<div class="response-area">
										<div class="area-header">
											<h4 class="area-title">Claude's Response</h4>
											<button id="previewReferenceMaterialsResponseBtn" class="btn btn-outline btn-sm">Preview</button>
										</div>
										<div class="textarea-container">
											<textarea id="referenceMaterialsResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
										</div>
										<p class="response-instructions">Paste Claude's full response including all XML tags</p>
										
										<div id="referenceMaterialsPreview" class="response-preview">
											<div class="response-tabs">
												<div class="response-tab active" data-tab="referenceMaterialsFormatted">Formatted</div>
												<div class="response-tab" data-tab="referenceMaterialsTagged">Tagged</div>
											</div>
											<div class="response-display">
												<div class="response-content active" id="referenceMaterialsFormattedResponse"></div>
												<div class="response-content" id="referenceMaterialsTaggedResponse"></div>
											</div>
										</div>
									</div>
								</div>

								<!-- Reference Materials Sections -->
								<div id="referenceMaterialsEditContainer" style="margin-top: 2rem; display: none;">
									<h4>Reference Materials</h4>
									
									<!-- Definitions -->
									<div class="reference-section">
										<div class="reference-section-header">
											<h5>Definitions</h5>
											<button class="edit-button" id="editDefinitionsBtn">Edit</button>
										</div>
										<div id="definitionsContent" class="reference-section-content">
											<p>No definitions available yet.</p>
										</div>
									</div>
									
									<!-- Formulas -->
									<div class="reference-section">
										<div class="reference-section-header">
											<h5>Formulas</h5>
											<button class="edit-button" id="editFormulasBtn">Edit</button>
										</div>
										<div id="formulasContent" class="reference-section-content">
											<p>No formulas available yet.</p>
										</div>
									</div>
									
									<!-- Diagrams -->
									<div class="reference-section">
										<div class="reference-section-header">
											<h5>Diagrams</h5>
											<button class="edit-button" id="editDiagramsBtn">Edit</button>
										</div>
										<div id="diagramsContent" class="reference-section-content">
											<p>No diagrams available yet.</p>
										</div>
									</div>
									
									<!-- Examples -->
									<div class="reference-section">
										<div class="reference-section-header">
											<h5>Examples</h5>
											<button class="edit-button" id="editExamplesBtn">Edit</button>
										</div>
										<div id="examplesContent" class="reference-section-content">
											<p>No examples available yet.</p>
										</div>
									</div>
								</div>
								
								<div class="nav-buttons">
									<button class="btn btn-outline" onclick="switchSubstep(3, 'D')">Back to Step 3</button>
									<div class="nav-buttons-right">
										<button id="continueToRetrievalBtn" class="btn btn-primary" disabled>Continue to Prior Knowledge Retrieval</button>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Substep 4B: Prior Knowledge Retrieval -->
						<div class="substep-content" data-step="4" data-substep="B">
							<div class="card">
								<div class="card-header">
									<h3 class="card-title">Prior Knowledge Retrieval</h3>
								</div>
								
								<div class="alert alert-info">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
									<div>
										Create retrieval practice questions based on the prior knowledge needed for each learning objective. These will be included at the beginning of your worksheet.
									</div>
								</div>
								
								<!-- Prior Knowledge Summary -->
								<div id="priorKnowledgeForWorksheets" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
									<p>Please complete Step 1D first to see prior knowledge here.</p>
								</div>
								
								<!-- Worksheet Tabs -->
								<div class="worksheet-tabs-container" id="worksheetTabsB">
									<!-- Tabs will be inserted dynamically -->
								</div>
								
								<div class="prompt-response-container">
									<div class="prompt-area">
										<div class="area-header">
											<h4 class="area-title">Generate Retrieval Questions</h4>
											<button id="generateRetrievalWorksheetPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
										</div>
										<div class="textarea-container">
											<textarea id="retrievalWorksheetPromptTextarea" class="prompt-textarea" readonly placeholder="Click 'Generate Prompt' to create retrieval questions..."></textarea>
											<button id="copyRetrievalWorksheetPromptBtn" class="copy-btn">Copy</button>
										</div>
									</div>
									
									<div class="response-area">
										<div class="area-header">
											<h4 class="area-title">Claude's Response</h4>
											<button id="previewRetrievalWorksheetResponseBtn" class="btn btn-outline btn-sm">Preview</button>
										</div>
										<div class="textarea-container">
											<textarea id="retrievalWorksheetResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
										</div>
										<p class="response-instructions">Paste Claude's full response including all XML tags</p>
										
										<div id="retrievalWorksheetPreview" class="response-preview">
											<div class="response-tabs">
												<div class="response-tab active" data-tab="retrievalWorksheetFormatted">Formatted</div>
												<div class="response-tab" data-tab="retrievalWorksheetTagged">Tagged</div>
											</div>
											<div class="response-display">
												<div class="response-content active" id="retrievalWorksheetFormattedResponse"></div>
												<div class="response-content" id="retrievalWorksheetTaggedResponse"></div>
											</div>
										</div>
									</div>
								</div>

								<!-- Retrieval Questions by Worksheet -->
								<div class="worksheet-content-container">
									<!-- Worksheet 1 Content -->
									<div class="worksheet-content active" data-substep="B" data-worksheet="1">
										<div id="retrievalWorksheetEditContainer" style="margin-top: 2rem; display: none;">
											<div class="edit-header">
												<h4>Retrieval Questions</h4>
												<button class="btn btn-outline" id="editRetrievalWorksheetQuestionsBtn">Edit Questions</button>
											</div>
											<div id="retrievalQuestionsWS1" class="retrieval-questions-container">
												<p>No retrieval questions available yet.</p>
											</div>
										</div>
									</div>
									
									<!-- Worksheet 2 Content -->
									<div class="worksheet-content" data-substep="B" data-worksheet="2">
										<div id="retrievalWorksheetEditContainer2" style="margin-top: 2rem; display: none;">
											<div class="edit-header">
												<h4>Retrieval Questions</h4>
												<button class="btn btn-outline" id="editRetrievalWorksheetQuestionsBtn2">Edit Questions</button>
											</div>
											<div id="retrievalQuestionsWS2" class="retrieval-questions-container">
												<p>No retrieval questions available yet.</p>
											</div>
										</div>
									</div>
								</div>
								
								<div class="nav-buttons">
									<button class="btn btn-outline" onclick="switchSubstep(4, 'A')">Back</button>
									<div class="nav-buttons-right">
										<button id="continueToScaleQuestionsBtn" class="btn btn-primary" disabled>Continue to SCALE Questions</button>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Substep 4C: SCALE Questions -->
						<div class="substep-content" data-step="4" data-substep="C">
							<div class="card">
								<div class="card-header">
									<h3 class="card-title">SCALE Framework Questions</h3>
								</div>
								
								<div class="alert alert-info">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
									<div>
										Create SCALE framework questions (Simple Recognition, Conceptual Understanding, Application, Linking Ideas, Extended Thinking) for each learning objective. Select questions to include in your worksheet.
									</div>
								</div>
								
								<!-- Worksheet Tabs -->
								<div class="worksheet-tabs-container" id="worksheetTabsC">
									<!-- Tabs will be inserted dynamically -->
								</div>
								
								<div class="prompt-response-container">
									<div class="prompt-area">
										<div class="area-header">
											<h4 class="area-title">Generate SCALE Questions</h4>
											<button id="generateScaleQuestionsPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
										</div>
										<div class="textarea-container">
											<textarea id="scaleQuestionsPromptTextarea" class="prompt-textarea" readonly placeholder="Click 'Generate Prompt' to create SCALE questions..."></textarea>
											<button id="copyScaleQuestionsPromptBtn" class="copy-btn">Copy</button>
										</div>
									</div>
									
									<div class="response-area">
										<div class="area-header">
											<h4 class="area-title">Claude's Response</h4>
											<button id="previewScaleQuestionsResponseBtn" class="btn btn-outline btn-sm">Preview</button>
										</div>
										<div class="textarea-container">
											<textarea id="scaleQuestionsResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
										</div>
										<p class="response-instructions">Paste Claude's full response including all XML tags</p>
										
										<div id="scaleQuestionsPreview" class="response-preview">
											<div class="response-tabs">
												<div class="response-tab active" data-tab="scaleQuestionsFormatted">Formatted</div>
												<div class="response-tab" data-tab="scaleQuestionsTagged">Tagged</div>
											</div>
											<div class="response-display">
												<div class="response-content active" id="scaleQuestionsFormattedResponse"></div>
												<div class="response-content" id="scaleQuestionsTaggedResponse"></div>
											</div>
										</div>
									</div>
								</div>

								<!-- SCALE Questions by Worksheet -->
								<div class="worksheet-content-container">
									<!-- Worksheet 1 Content -->
									<div class="worksheet-content active" data-substep="C" data-worksheet="1">
										<div id="scaleQuestionsEditContainer" style="margin-top: 2rem; display: none;">
											<div class="edit-header">
												<h4>SCALE Questions</h4>
												<button class="btn btn-outline" id="editScaleQuestionsBtn">Edit Questions</button>
											</div>
											
											<!-- LO1 SCALE Questions -->
											<div class="scale-lo-container" data-lo="1">
												<h5>Learning Objective 1 SCALE Questions</h5>
												<p class="scale-description">Select which questions to include in your worksheet:</p>
												<div id="scaleQuestionsWS1LO1" class="scale-questions-container">
													<p>No SCALE questions available yet.</p>
												</div>
											</div>
											
											<!-- LO2 SCALE Questions -->
											<div class="scale-lo-container" data-lo="2">
												<h5>Learning Objective 2 SCALE Questions</h5>
												<p class="scale-description">Select which questions to include in your worksheet:</p>
												<div id="scaleQuestionsWS1LO2" class="scale-questions-container">
													<p>No SCALE questions available yet.</p>
												</div>
											</div>
											
											<!-- LO3 SCALE Questions -->
											<div class="scale-lo-container" data-lo="3" style="display: none;">
												<h5>Learning Objective 3 SCALE Questions</h5>
												<p class="scale-description">Select which questions to include in your worksheet:</p>
												<div id="scaleQuestionsWS1LO3" class="scale-questions-container">
													<p>No SCALE questions available yet.</p>
												</div>
											</div>
										</div>
									</div>
									
									<!-- Worksheet 2 Content -->
									<div class="worksheet-content" data-substep="C" data-worksheet="2">
										<div id="scaleQuestionsEditContainer2" style="margin-top: 2rem; display: none;">
											<div class="edit-header">
												<h4>SCALE Questions</h4>
												<button class="btn btn-outline" id="editScaleQuestionsBtn2">Edit Questions</button>
											</div>
											
											<!-- LO1 SCALE Questions -->
											<div class="scale-lo-container" data-lo="1">
												<h5>Learning Objective 1 SCALE Questions</h5>
												<p class="scale-description">Select which questions to include in your worksheet:</p>
												<div id="scaleQuestionsWS2LO1" class="scale-questions-container">
													<p>No SCALE questions available yet.</p>
												</div>
											</div>
											
											<!-- LO2 SCALE Questions -->
											<div class="scale-lo-container" data-lo="2">
												<h5>Learning Objective 2 SCALE Questions</h5>
												<p class="scale-description">Select which questions to include in your worksheet:</p>
												<div id="scaleQuestionsWS2LO2" class="scale-questions-container">
													<p>No SCALE questions available yet.</p>
												</div>
											</div>
											
											<!-- LO3 SCALE Questions -->
											<div class="scale-lo-container" data-lo="3" style="display: none;">
												<h5>Learning Objective 3 SCALE Questions</h5>
												<p class="scale-description">Select which questions to include in your worksheet:</p>
												<div id="scaleQuestionsWS2LO3" class="scale-questions-container">
													<p>No SCALE questions available yet.</p>
												</div>
											</div>
										</div>
									</div>
								</div>
								
								<div class="nav-buttons">
									<button class="btn btn-outline" onclick="switchSubstep(4, 'B')">Back</button>
									<div class="nav-buttons-right">
										<button id="continueToApplicationQuestionsBtn" class="btn btn-primary" disabled>Continue to Application Questions</button>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Substep 4D: Application Questions -->
						<div class="substep-content" data-step="4" data-substep="D">
							<div class="card">
								<div class="card-header">
									<h3 class="card-title">Application Questions</h3>
								</div>
								
								<div class="alert alert-info">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
									<div>
										Create application questions based on the teaching frameworks chosen in Step 2. These will allow students to apply their knowledge to real-world contexts.
									</div>
								</div>
								
								<!-- Worksheet Tabs -->
								<div class="worksheet-tabs-container" id="worksheetTabsD">
									<!-- Tabs will be inserted dynamically -->
								</div>
								
								<div class="prompt-response-container">
									<div class="prompt-area">
										<div class="area-header">
											<h4 class="area-title">Generate Application Questions</h4>
											<button id="generateApplicationQuestionsPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
										</div>
										<div class="textarea-container">
											<textarea id="applicationQuestionsPromptTextarea" class="prompt-textarea" readonly placeholder="Click 'Generate Prompt' to create application questions..."></textarea>
											<button id="copyApplicationQuestionsPromptBtn" class="copy-btn">Copy</button>
										</div>
									</div>
									
									<div class="response-area">
										<div class="area-header">
											<h4 class="area-title">Claude's Response</h4>
											<button id="previewApplicationQuestionsResponseBtn" class="btn btn-outline btn-sm">Preview</button>
										</div>
										<div class="textarea-container">
											<textarea id="applicationQuestionsResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
										</div>
										<p class="response-instructions">Paste Claude's full response including all XML tags</p>
										
										<div id="applicationQuestionsPreview" class="response-preview">
											<div class="response-tabs">
												<div class="response-tab active" data-tab="applicationQuestionsFormatted">Formatted</div>
												<div class="response-tab" data-tab="applicationQuestionsTagged">Tagged</div>
											</div>
											<div class="response-display">
												<div class="response-content active" id="applicationQuestionsFormattedResponse"></div>
												<div class="response-content" id="applicationQuestionsTaggedResponse"></div>
											</div>
										</div>
									</div>
								</div>

								<!-- Application Questions by Worksheet -->
								<div class="worksheet-content-container">
									<!-- Worksheet 1 Content -->
									<div class="worksheet-content active" data-substep="D" data-worksheet="1">
										<div id="applicationQuestionsEditContainer" style="margin-top: 2rem; display: none;">
											<div class="edit-header">
												<h4>Application Questions</h4>
												<button class="btn btn-outline" id="editApplicationQuestionsBtn">Edit Questions</button>
											</div>
											
											<!-- LO1 Application Questions -->
											<div class="application-lo-container" data-lo="1">
												<h5>Learning Objective 1 Application Questions</h5>
												<div id="applicationQuestionsWS1LO1" class="application-questions-container">
													<p>No application questions available yet.</p>
												</div>
											</div>
											
											<!-- LO2 Application Questions -->
											<div class="application-lo-container" data-lo="2">
												<h5>Learning Objective 2 Application Questions</h5>
												<div id="applicationQuestionsWS1LO2" class="application-questions-container">
													<p>No application questions available yet.</p>
												</div>
											</div>
											
											<!-- LO3 Application Questions -->
											<div class="application-lo-container" data-lo="3" style="display: none;">
												<h5>Learning Objective 3 Application Questions</h5>
												<div id="applicationQuestionsWS1LO3" class="application-questions-container">
													<p>No application questions available yet.</p>
												</div>
											</div>
										</div>
									</div>
									
									<!-- Worksheet 2 Content -->
									<div class="worksheet-content" data-substep="D" data-worksheet="2">
										<!-- Similar structure to Worksheet 1 -->
										<div id="applicationQuestionsEditContainer2" style="margin-top: 2rem; display: none;">
											<!-- Duplicate structure with different IDs -->
										</div>
									</div>
								</div>
								
								<div class="nav-buttons">
									<button class="btn btn-outline" onclick="switchSubstep(4, 'C')">Back</button>
									<div class="nav-buttons-right">
										<button id="continueToExamTechniqueQuestionsBtn" class="btn btn-primary" disabled>Continue to Exam Technique Questions</button>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Substep 4E: Exam Technique Questions -->
						<div class="substep-content" data-step="4" data-substep="E">
							<div class="card">
								<div class="card-header">
									<h3 class="card-title">Exam Technique Questions</h3>
								</div>
								
								<div class="alert alert-info">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
									<div>
										Create questions that help students practice specific exam techniques identified in Step 2 (BLT, EVERY, MEMES, GRAPH).
									</div>
								</div>
								
								<!-- Worksheet Tabs -->
								<div class="worksheet-tabs-container" id="worksheetTabsE">
									<!-- Tabs will be inserted dynamically -->
								</div>
								
								<div class="prompt-response-container">
									<div class="prompt-area">
										<div class="area-header">
											<h4 class="area-title">Generate Exam Technique Questions</h4>
											<button id="generateExamTechniqueQuestionsPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
										</div>
										<div class="textarea-container">
											<textarea id="examTechniqueQuestionsPromptTextarea" class="prompt-textarea" readonly placeholder="Click 'Generate Prompt' to create exam technique questions..."></textarea>
											<button id="copyExamTechniqueQuestionsPromptBtn" class="copy-btn">Copy</button>
										</div>
									</div>
									
									<div class="response-area">
										<div class="area-header">
											<h4 class="area-title">Claude's Response</h4>
											<button id="previewExamTechniqueQuestionsResponseBtn" class="btn btn-outline btn-sm">Preview</button>
										</div>
										<div class="textarea-container">
											<textarea id="examTechniqueQuestionsResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
										</div>
										<p class="response-instructions">Paste Claude's full response including all XML tags</p>
										
										<div id="examTechniqueQuestionsPreview" class="response-preview">
											<div class="response-tabs">
												<div class="response-tab active" data-tab="examTechniqueQuestionsFormatted">Formatted</div>
												<div class="response-tab" data-tab="examTechniqueQuestionsTagged">Tagged</div>
											</div>
											<div class="response-display">
												<div class="response-content active" id="examTechniqueQuestionsFormattedResponse"></div>
												<div class="response-content" id="examTechniqueQuestionsTaggedResponse"></div>
											</div>
										</div>
									</div>
								</div>

								<!-- Exam Technique Questions by Worksheet -->
								<div class="worksheet-content-container">
									<!-- Similar structure to previous substeps -->
									<div class="worksheet-content active" data-substep="E" data-worksheet="1">
										<div id="examTechniqueQuestionsEditContainer" style="margin-top: 2rem; display: none;">
											<!-- Content for worksheet 1 -->
										</div>
									</div>
									
									<div class="worksheet-content" data-substep="E" data-worksheet="2">
										<div id="examTechniqueQuestionsEditContainer2" style="margin-top: 2rem; display: none;">
											<!-- Content for worksheet 2 -->
										</div>
									</div>
								</div>
								
								<div class="nav-buttons">
									<button class="btn btn-outline" onclick="switchSubstep(4, 'D')">Back</button>
									<div class="nav-buttons-right">
										<button id="continueToExamStyleQuestionsBtn" class="btn btn-primary" disabled>Continue to Exam Style Questions</button>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Substep 4F: Exam Style Questions -->
						<div class="substep-content" data-step="4" data-substep="F">
							<div class="card">
								<div class="card-header">
									<h3 class="card-title">Exam Style Questions</h3>
								</div>
								
								<div class="alert alert-info">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
									<div>
										Create exam-style questions that match the format and style of the selected exam board, providing students with authentic exam practice.
									</div>
								</div>
								
								<!-- Worksheet Tabs -->
								<div class="worksheet-tabs-container" id="worksheetTabsF">
									<!-- Tabs will be inserted dynamically -->
								</div>
								
								<div class="prompt-response-container">
									<div class="prompt-area">
										<div class="area-header">
											<h4 class="area-title">Generate Exam Style Questions</h4>
											<button id="generateExamStyleQuestionsPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
										</div>
										<div class="textarea-container">
											<textarea id="examStyleQuestionsPromptTextarea" class="prompt-textarea" readonly placeholder="Click 'Generate Prompt' to create exam style questions..."></textarea>
											<button id="copyExamStyleQuestionsPromptBtn" class="copy-btn">Copy</button>
										</div>
									</div>
									
									<div class="response-area">
										<div class="area-header">
											<h4 class="area-title">Claude's Response</h4>
											<button id="previewExamStyleQuestionsResponseBtn" class="btn btn-outline btn-sm">Preview</button>
										</div>
										<div class="textarea-container">
											<textarea id="examStyleQuestionsResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
										</div>
										<p class="response-instructions">Paste Claude's full response including all XML tags</p>
										
										<div id="examStyleQuestionsPreview" class="response-preview">
											<div class="response-tabs">
												<div class="response-tab active" data-tab="examStyleQuestionsFormatted">Formatted</div>
												<div class="response-tab" data-tab="examStyleQuestionsTagged">Tagged</div>
											</div>
											<div class="response-display">
												<div class="response-content active" id="examStyleQuestionsFormattedResponse"></div>
												<div class="response-content" id="examStyleQuestionsTaggedResponse"></div>
											</div>
										</div>
									</div>
								</div>

								<!-- Exam Style Questions by Worksheet -->
								<div class="worksheet-content-container">
									<!-- Similar structure to previous substeps -->
									<div class="worksheet-content active" data-substep="F" data-worksheet="1">
										<div id="examStyleQuestionsEditContainer" style="margin-top: 2rem; display: none;">
											<!-- Content for worksheet 1 -->
										</div>
									</div>
									
									<div class="worksheet-content" data-substep="F" data-worksheet="2">
										<div id="examStyleQuestionsEditContainer2" style="margin-top: 2rem; display: none;">
											<!-- Content for worksheet 2 -->
										</div>
									</div>
								</div>
								
								<div class="nav-buttons">
									<button class="btn btn-outline" onclick="switchSubstep(4, 'E')">Back</button>
									<div class="nav-buttons-right">
										<button id="continueToWorksheetFinalizationBtn" class="btn btn-primary" disabled>Continue to Worksheet Finalization</button>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Substep 4G: Worksheet Finalization -->
						<div class="substep-content" data-step="4" data-substep="G">
							<div class="card">
								<div class="card-header">
									<h3 class="card-title">Worksheet Finalization</h3>
								</div>
								
								<div class="alert alert-info">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
									<div>
										Finalize your worksheet settings, including answer display options, formatting preferences, and layout settings.
									</div>
								</div>
								
								<!-- Worksheet Tabs -->
								<div class="worksheet-tabs-container" id="worksheetTabsG">
									<!-- Tabs will be inserted dynamically -->
								</div>
								
								<!-- Finalization Settings by Worksheet -->
								<div class="worksheet-content-container">
									<!-- Worksheet 1 Content -->
									<div class="worksheet-content active" data-substep="G" data-worksheet="1">
										<h4>Worksheet 1 Settings</h4>
										
										<div class="finalization-section">
											<h5>Answer Display</h5>
											<div class="radio-group">
												<div class="radio-container">
													<input type="radio" id="answerDisplaySeparate1" name="answerDisplay1" value="Separate" checked>
													<label for="answerDisplaySeparate1">Separate answer sheet</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="answerDisplayEnd1" name="answerDisplay1" value="EndOfSheet">
													<label for="answerDisplayEnd1">At end of worksheet</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="answerDisplayNone1" name="answerDisplay1" value="None">
													<label for="answerDisplayNone1">No answers</label>
												</div>
											</div>
										</div>
										
										<div class="finalization-section">
											<h5>Content Options</h5>
											<div class="checkbox-container">
												<input type="checkbox" id="includeSentenceStarters1" checked>
												<label for="includeSentenceStarters1">Include sentence starters for extended responses</label>
											</div>
											
											<h5 class="mt-3">Answer Line Style</h5>
											<div class="radio-group">
												<div class="radio-container">
													<input type="radio" id="answerLineNone1" name="answerLineStyle1" value="None">
													<label for="answerLineNone1">No lines</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="answerLineSingle1" name="answerLineStyle1" value="Single" checked>
													<label for="answerLineSingle1">Single lines</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="answerLineMultiple1" name="answerLineStyle1" value="Multiple">
													<label for="answerLineMultiple1">Multiple lines</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="answerLineBoxed1" name="answerLineStyle1" value="Boxed">
													<label for="answerLineBoxed1">Boxed areas</label>
												</div>
											</div>
											
											<div class="checkbox-container mt-3">
												<input type="checkbox" id="showPoints1" checked>
												<label for="showPoints1">Show available points for each question</label>
											</div>
										</div>
										
										<div class="finalization-section">
											<h5>Section Labeling</h5>
											<div class="radio-group">
												<div class="radio-container">
													<input type="radio" id="sectionLabelingNumbered1" name="sectionLabeling1" value="Numbered" checked>
													<label for="sectionLabelingNumbered1">Numbered sections (1, 2, 3)</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="sectionLabelingLettered1" name="sectionLabeling1" value="Lettered">
													<label for="sectionLabelingLettered1">Lettered sections (A, B, C)</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="sectionLabelingNamed1" name="sectionLabeling1" value="Named">
													<label for="sectionLabelingNamed1">Named sections</label>
												</div>
											</div>
										</div>
										
										<div class="finalization-section">
											<h5>Paper Size & Orientation</h5>
											<div class="radio-group">
												<div class="radio-container">
													<input type="radio" id="paperSizeA4-1" name="paperSize1" value="A4" checked>
													<label for="paperSizeA4-1">A4</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="paperSizeA3-1" name="paperSize1" value="A3">
													<label for="paperSizeA3-1">A3</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="paperSizeLetter1" name="paperSize1" value="Letter">
													<label for="paperSizeLetter1">Letter</label>
												</div>
											</div>
											
											<div class="radio-group mt-3">
												<div class="radio-container">
													<input type="radio" id="orientationPortrait1" name="orientation1" value="Portrait" checked>
													<label for="orientationPortrait1">Portrait</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="orientationLandscape1" name="orientation1" value="Landscape">
													<label for="orientationLandscape1">Landscape</label>
												</div>
											</div>
										</div>
									</div>
									
									<!-- Worksheet 2 Content -->
									<div class="worksheet-content" data-substep="G" data-worksheet="2">
										<h4>Worksheet 2 Settings</h4>
										
										<!-- Duplicate of Worksheet 1 settings but with different IDs -->
										<div class="finalization-section">
											<h5>Answer Display</h5>
											<div class="radio-group">
												<div class="radio-container">
													<input type="radio" id="answerDisplaySeparate2" name="answerDisplay2" value="Separate" checked>
													<label for="answerDisplaySeparate2">Separate answer sheet</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="answerDisplayEnd2" name="answerDisplay2" value="EndOfSheet">
													<label for="answerDisplayEnd2">At end of worksheet</label>
												</div>
												<div class="radio-container">
													<input type="radio" id="answerDisplayNone2" name="answerDisplay2" value="None">
													<label for="answerDisplayNone2">No answers</label>
												</div>
											</div>
										</div>
										
										<!-- Additional settings sections with "2" suffix in IDs -->
									</div>
								</div>
								
								<div class="apply-settings-container">
									<button id="applyFinalizationSettingsBtn" class="btn btn-secondary">Apply Settings</button>
								</div>
								
								<div class="prompt-response-container">
									<div class="prompt-area">
										<div class="area-header">
											<h4 class="area-title">Generate Worksheet Preview</h4>
											<button id="generateWorksheetFinalizationPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
										</div>
										<div class="textarea-container">
											<textarea id="worksheetFinalizationPromptTextarea" class="prompt-textarea" readonly placeholder="Apply settings first, then click 'Generate Prompt'..."></textarea>
											<button id="copyWorksheetFinalizationPromptBtn" class="copy-btn">Copy</button>
										</div>
									</div>
									
									<div class="response-area">
										<div class="area-header">
											<h4 class="area-title">Claude's Response</h4>
											<button id="previewWorksheetFinalizationResponseBtn" class="btn btn-outline btn-sm">Preview</button>
										</div>
										<div class="textarea-container">
											<textarea id="worksheetFinalizationResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
										</div>
										<p class="response-instructions">Paste Claude's full response including all XML tags</p>
										
										<div id="worksheetFinalizationPreview" class="response-preview">
											<div class="response-tabs">
												<div class="response-tab active" data-tab="worksheetFinalizationFormatted">Formatted</div>
												<div class="response-tab" data-tab="worksheetFinalizationTagged">Tagged</div>
											</div>
											<div class="response-display">
												<div class="response-content active" id="worksheetFinalizationFormattedResponse"></div>
												<div class="response-content" id="worksheetFinalizationTaggedResponse"></div>
											</div>
										</div>
									</div>
								</div>

								<!-- Worksheet Preview -->
								<div id="worksheetPreviewContainer" style="margin-top: 2rem; display: none;">
									<div class="worksheet-content-container">
										<!-- Worksheet 1 Preview -->
										<div class="worksheet-content active" data-substep="G" data-worksheet="1">
											<div id="worksheetPreviewWS1" class="worksheet-preview">
												<p>Generate a preview to see how your worksheet will look.</p>
											</div>
										</div>
										
										<!-- Worksheet 2 Preview -->
										<div class="worksheet-content" data-substep="G" data-worksheet="2">
											<div id="worksheetPreviewWS2" class="worksheet-preview">
												<p>Generate a preview to see how your worksheet will look.</p>
											</div>
										</div>
									</div>
								</div>
								
								<div class="preview-action-container" style="margin-top: 1rem;">
									<button id="generateWorksheetPreviewBtn" class="btn btn-secondary" disabled>Generate Worksheet Preview</button>
								</div>
								
								<div class="nav-buttons">
									<button class="btn btn-outline" onclick="switchSubstep(4, 'F')">Back</button>
									<div class="nav-buttons-right">
										<button id="finishStep4Btn" class="btn btn-primary" disabled>Complete Worksheet Generation</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
            </div>
        </div>
    </div>

<!-- Step 5: Export and Integration -->
<div class="main-step main-step-5" id="mainStep5">
    <div class="main-step-header" onclick="toggleMainStep(5)">
        <div class="main-step-number">5</div>
        <div class="main-step-title">Export and Integration</div>
        <div class="main-step-status status-not-started">Not Started</div>
        <div class="toggle-icon">â–¼</div>
    </div>
    <div class="main-step-content" id="mainStepContent5">
        <div class="main-step-inner">
            <!-- Substeps Navigation -->
            <div class="substeps-nav">
                <div class="nav-scroll-indicator nav-scroll-left" onclick="scrollSubstepNav('left')">â—€</div>
                <div class="substep-tab active" data-step="5" data-substep="A" onclick="switchSubstep(5, 'A')">5A: Save/Load Options</div>
                <div class="substep-tab" data-step="5" data-substep="B" onclick="switchSubstep(5, 'B')">5B: Export Slides</div>
                <div class="substep-tab" data-step="5" data-substep="C" onclick="switchSubstep(5, 'C')">5C: Export Worksheets</div>
                <div class="substep-tab" data-step="5" data-substep="D" onclick="switchSubstep(5, 'D')">5D: Complete Package</div>
                <div class="nav-scroll-indicator nav-scroll-right" onclick="scrollSubstepNav('right')">â–¶</div>
            </div>
            
            <!-- Substep 5A: Save/Load Options -->
            <div class="substep-content active" data-step="5" data-substep="A">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Save & Load Lesson Plan</h3>
                    </div>
                    
                    <div class="alert alert-info">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                        <div>
                            Save your lesson plan to your browser's local storage or load a previously saved lesson plan. This allows you to continue working on your lesson plan later.
                        </div>
                    </div>
                    
                    <div id="saveStatusContainer"></div>
                    
                    <div class="save-load-container">
                        <div class="save-container">
                            <h4>Save Current Lesson Plan</h4>
                            <p>Save your lesson plan to continue working on it later. This will save all your progress to your browser's local storage.</p>
                            <button id="saveLessonBtn" class="btn btn-primary">Save Lesson Plan</button>
                        </div>
                        
                        <div class="load-container">
                            <h4>Load Saved Lesson Plan</h4>
                            <p>Load a previously saved lesson plan. This will replace your current progress with the saved state.</p>
                            <button id="loadLessonBtn" class="btn btn-secondary">Load Lesson Plan</button>
                        </div>
                    </div>
                    
                    <div class="auto-save-container">
                        <h4>Auto-Save Settings</h4>
                        <div class="checkbox-container">
                            <input type="checkbox" id="enableAutoSave" checked>
                            <label for="enableAutoSave">Enable automatic saving every</label>
                            <select id="autoSaveInterval" class="form-control-sm">
                                <option value="1">1 minute</option>
                                <option value="5" selected>5 minutes</option>
                                <option value="10">10 minutes</option>
                                <option value="15">15 minutes</option>
                                <option value="30">30 minutes</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="nav-buttons">
                        <button class="btn btn-outline" onclick="switchSubstep(4, 'G')">Back to Step 4</button>
                        <div class="nav-buttons-right">
                            <button class="btn btn-primary" onclick="switchSubstep(5, 'B')">Continue to Export Slides</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Substep 5B: Export Slides -->
            <div class="substep-content" data-step="5" data-substep="B">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Export Slide Presentation</h3>
                    </div>
                    
                    <div class="alert alert-info">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                        <div>
                            Export your slides in a format compatible with PowerPoint or other presentation software. You can customize export options below.
                        </div>
                    </div>
                    
                    <div id="slidesExportStatusContainer"></div>
                    
                    <div class="export-settings-container">
                        <h4>Slide Export Settings</h4>
                        
                        <div class="checkbox-container">
                            <input type="checkbox" id="includeSlidesNotes" checked>
                            <label for="includeSlidesNotes">Include teacher notes in export</label>
                        </div>
                        
                        <div class="checkbox-container">
                            <input type="checkbox" id="includeVisualPlaceholders" checked>
                            <label for="includeVisualPlaceholders">Include visual element placeholders</label>
                        </div>
                    </div>
                    
                    <div class="slides-preview-container">
                        <h4>Slides Preview</h4>
                        <div class="slides-preview">
                            <p>Your presentation will include:</p>
                            <ul>
                                <li>Title slide with lesson information</li>
                                <li>Retrieval practice section with <span id="retrievalSlideCount">0</span> slides</li>
                                <li>Teaching content sections with <span id="teachingSlideCount">0</span> total slides</li>
                                <li>Formative assessment section with <span id="formativeSlideCount">0</span> slides</li>
                                <li>Conclusion slide</li>
                            </ul>
                            <p>Total slides: <span id="totalSlideCount">0</span></p>
                        </div>
                    </div>
                    
                    <div class="export-buttons-container">
                        <button id="exportSlidesBtn" class="btn btn-primary">Export Slides XML</button>
                    </div>
                    
                    <div class="nav-buttons">
                        <button class="btn btn-outline" onclick="switchSubstep(5, 'A')">Back</button>
                        <div class="nav-buttons-right">
                            <button class="btn btn-primary" onclick="switchSubstep(5, 'C')">Continue to Export Worksheets</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Substep 5C: Export Worksheets -->
            <div class="substep-content" data-step="5" data-substep="C">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Export Worksheets</h3>
                    </div>
                    
                    <div class="alert alert-info">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                        <div>
                            Export your worksheets in XML format for printing or further editing. You can export individual worksheets or all at once.
                        </div>
                    </div>
                    
                    <div id="worksheetExportStatusContainer"></div>
                    
                    <div class="export-settings-container">
                        <h4>Worksheet Export Settings</h4>
                        
                        <div class="checkbox-container">
                            <input type="checkbox" id="includeWorksheetAnswers" checked>
                            <label for="includeWorksheetAnswers">Include answers in export</label>
                        </div>
                        
                        <div class="checkbox-container">
                            <input type="checkbox" id="includeMarkingGuidelines" checked>
                            <label for="includeMarkingGuidelines">Include marking guidelines</label>
                        </div>
                    </div>
                    
                    <div class="worksheets-preview-container">
                        <h4>Worksheets Preview</h4>
                        <div class="worksheets-preview" id="worksheetsPreviewContainer">
                            <!-- Worksheet summaries will be added here -->
                        </div>
                    </div>
                    
                    <div class="export-buttons-container">
                        <button id="exportWorksheet1Btn" class="btn btn-secondary">Export Worksheet 1 XML</button>
                        <button id="exportWorksheet2Btn" class="btn btn-secondary" style="display: none;">Export Worksheet 2 XML</button>
                        <button id="exportAllWorksheetsBtn" class="btn btn-primary">Export All Worksheets</button>
                    </div>
                    
                    <div class="nav-buttons">
                        <button class="btn btn-outline" onclick="switchSubstep(5, 'B')">Back</button>
                        <div class="nav-buttons-right">
                            <button class="btn btn-primary" onclick="switchSubstep(5, 'D')">Continue to Complete Package</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Substep 5D: Complete Package -->
            <div class="substep-content" data-step="5" data-substep="D">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Export Complete Lesson Package</h3>
                    </div>
                    
                    <div class="alert alert-info">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                        <div>
                            Export a complete package containing all lesson components (slides and worksheets) along with metadata for integration with classroom systems.
                        </div>
                    </div>
                    
                    <div id="packageExportStatusContainer"></div>
                    
                    <div class="package-summary-container">
                        <h4>Package Summary</h4>
                        <div class="package-summary">
                            <p><strong>Lesson Title:</strong> <span id="packageLessonTitle">-</span></p>
                            <p><strong>Subject:</strong> <span id="packageSubject">-</span> | <strong>Topic:</strong> <span id="packageTopic">-</span></p>
                            <p><strong>Exam Board:</strong> <span id="packageProvider">-</span> | <strong>Level:</strong> <span id="packageLevel">-</span></p>
                            <p><strong>Contents:</strong></p>
                            <ul>
                                <li>Slide Presentation (<span id="packageSlideCount">0</span> slides)</li>
                                <li><span id="packageWorksheetCount">0</span> Worksheet(s)</li>
                                <li>Full lesson state for future editing</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="export-buttons-container">
                        <button id="updateExportSettingsBtn" class="btn btn-secondary">Update Export Settings</button>
                        <button id="exportPackageBtn" class="btn btn-primary">Export Complete Package</button>
                    </div>
                    
                    <div class="completion-message">
                        <div class="alert alert-success">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>
                            <div>
                                <p><strong>Congratulations!</strong></p>
                                <p>You have completed the lesson planning process. Your lesson plan includes slides and worksheets tailored to your learning objectives.</p>
                                <p>Export your complete package to finalize your work.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="nav-buttons">
                        <button class="btn btn-outline" onclick="switchSubstep(5, 'C')">Back</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

    <!-- Edit Modals -->
    <!-- LO Type Edit Modal -->
    <div class="modal-overlay" id="loTypeEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Learning Objective Type</h3>
                <button class="modal-close" onclick="closeModal('loTypeEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label" for="editLoNumber">Learning Objective:</label>
                    <select id="editLoNumber" class="form-control" disabled>
                        <option value="1">Learning Objective 1</option>
                        <option value="2">Learning Objective 2</option>
                        <option value="3">Learning Objective 3</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editAoCategory">Assessment Objective:</label>
                    <select id="editAoCategory" class="form-control">
                        <option value="AO1">AO1 - Knowledge & Recall</option>
                        <option value="AO2">AO2 - Application</option>
                        <option value="AO3">AO3 - Analysis & Evaluation</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editSpecificType">Specific Type:</label>
                    <select id="editSpecificType" class="form-control">
                        <!-- Options will be populated based on AO category -->
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editTypeJustification">Justification:</label>
                    <textarea id="editTypeJustification" class="form-control" rows="4"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('loTypeEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveLoTypeBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Misconceptions Edit Modal -->
    <div class="modal-overlay" id="misconceptionsEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Misconceptions</h3>
                <button class="modal-close" onclick="closeModal('misconceptionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label" for="editMisconceptionsLoNumber">Learning Objective:</label>
                    <select id="editMisconceptionsLoNumber" class="form-control" disabled>
                        <option value="1">Learning Objective 1</option>
                        <option value="2">Learning Objective 2</option>
                        <option value="3">Learning Objective 3</option>
                    </select>
                </div>
                <div id="misconceptionsEditList">
                    <!-- Misconceptions will be added here -->
                </div>
                <button class="btn btn-outline btn-sm" id="addMisconceptionBtn" style="margin-top: 0.5rem;">+ Add Misconception</button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('misconceptionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveMisconceptionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Prior Knowledge Edit Modal -->
    <div class="modal-overlay" id="priorKnowledgeEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Prior Knowledge</h3>
                <button class="modal-close" onclick="closeModal('priorKnowledgeEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label" for="editPriorKnowledgeLoNumber">Learning Objective:</label>
                    <select id="editPriorKnowledgeLoNumber" class="form-control" disabled>
                        <option value="1">Learning Objective 1</option>
                        <option value="2">Learning Objective 2</option>
                        <option value="3">Learning Objective 3</option>
                    </select>
                </div>
                <div id="priorKnowledgeEditList">
                    <!-- Prior knowledge items will be added here -->
                </div>
                <button class="btn btn-outline btn-sm" id="addPriorKnowledgeBtn" style="margin-top: 0.5rem;">+ Add Prior Knowledge Item</button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('priorKnowledgeEditModal')">Cancel</button>
                <button class="btn btn-primary" id="savePriorKnowledgeBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Step 2 Modals -->
    <!-- Framework Edit Modal -->
    <div class="modal-overlay" id="frameworkEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Framework Assignment</h3>
                <button class="modal-close" onclick="closeModal('frameworkEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label" for="editFrameworkLoNumber">Learning Objective:</label>
                    <select id="editFrameworkLoNumber" class="form-control" disabled>
                        <option value="1">Learning Objective 1</option>
                        <option value="2">Learning Objective 2</option>
                        <option value="3">Learning Objective 3</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editPrimaryFramework">Primary Framework:</label>
                    <select id="editPrimaryFramework" class="form-control">
                        <option value="CER">CER - Claim, Evidence, Reasoning</option>
                        <option value="POE">POE - Predict, Observe, Explain</option>
                        <option value="SOLO">SOLO Taxonomy</option>
                        <option value="PEEL">PEEL - Point, Evidence, Explain, Link</option>
                        <option value="SEEC">SEEC - State, Explain, Example, Connection</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">BLT Supplementary Approach:</label>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editBltUsed">
                        <label for="editBltUsed">Apply BLT framework for this learning objective</label>
                    </div>
                </div>
                <div id="bltLevelsContainer" style="display: none;">
                    <p>Select the Bloom's Taxonomy levels to focus on:</p>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editBltRemember">
                        <label for="editBltRemember">Remember</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editBltUnderstand">
                        <label for="editBltUnderstand">Understand</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editBltApply">
                        <label for="editBltApply">Apply</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editBltAnalyze">
                        <label for="editBltAnalyze">Analyze</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editBltEvaluate">
                        <label for="editBltEvaluate">Evaluate</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editBltCreate">
                        <label for="editBltCreate">Create</label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('frameworkEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveFrameworkBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Exam Technique Edit Modal -->
    <div class="modal-overlay" id="examTechniqueEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Exam Techniques</h3>
                <button class="modal-close" onclick="closeModal('examTechniqueEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label" for="editTechniqueLoNumber">Learning Objective:</label>
                    <select id="editTechniqueLoNumber" class="form-control" disabled>
                        <option value="1">Learning Objective 1</option>
                        <option value="2">Learning Objective 2</option>
                        <option value="3">Learning Objective 3</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Select Exam Techniques:</label>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editTechniqueBLT">
                        <label for="editTechniqueBLT">BLT - Because, Link, Therefore</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editTechniqueEVERY">
                        <label for="editTechniqueEVERY">EVERY - Equation, Values, Equals, Rearrange, Y=Answer</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editTechniqueMEMES">
                        <label for="editTechniqueMEMES">MEMES - Method, Equipment, Measurements, Evaluation, Safety</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="editTechniqueGRAPH">
                        <label for="editTechniqueGRAPH">GRAPH - Grid, Right scale, Axis labeled, Plot, Head (title)</label>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editExamNotes">Additional Notes (Optional):</label>
                    <textarea id="editExamNotes" class="form-control" rows="3" placeholder="Add any specific instructions or focus areas for exam technique"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('examTechniqueEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveExamTechniqueBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Practical Requirements Edit Modal -->
    <div class="modal-overlay" id="practicalEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Practical Requirements</h3>
                <button class="modal-close" onclick="closeModal('practicalEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label" for="editPracticalLoNumber">Learning Objective:</label>
                    <select id="editPracticalLoNumber" class="form-control" disabled>
                        <option value="1">Learning Objective 1</option>
                        <option value="2">Learning Objective 2</option>
                        <option value="3">Learning Objective 3</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editPracticalTitle">Practical Title:</label>
                    <input type="text" id="editPracticalTitle" class="form-control" placeholder="Enter a title for this practical activity">
                </div>
                <div class="form-group">
                    <label class="form-label" for="editPracticalAim">Aim:</label>
                    <textarea id="editPracticalAim" class="form-control" rows="2" placeholder="Enter the aim of the practical"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Variables:</label>
                    <div id="variablesContainer">
                        <!-- Variables will be added here -->
                    </div>
                    <button class="btn btn-outline btn-sm" id="addVariableBtn" style="margin-top: 0.5rem;">+ Add Variable</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Equipment:</label>
                    <div id="equipmentContainer">
                        <!-- Equipment will be added here -->
                    </div>
                    <button class="btn btn-outline btn-sm" id="addEquipmentBtn" style="margin-top: 0.5rem;">+ Add Equipment</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Steps:</label>
                    <div id="stepsContainer">
                        <!-- Steps will be added here -->
                    </div>
                    <button class="btn btn-outline btn-sm" id="addStepBtn" style="margin-top: 0.5rem;">+ Add Step</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editPracticalSafety">Safety Considerations:</label>
                    <textarea id="editPracticalSafety" class="form-control" rows="3" placeholder="Enter any safety considerations"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('practicalEditModal')">Cancel</button>
                <button class="btn btn-primary" id="savePracticalBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Frayer Model Edit Modal -->
    <div class="modal-overlay" id="frayerModelEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Frayer Model</h3>
                <button class="modal-close" onclick="closeModal('frayerModelEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label" for="editFrayerLoNumber">Learning Objective:</label>
                    <select id="editFrayerLoNumber" class="form-control" disabled>
                        <option value="1">Learning Objective 1</option>
                        <option value="2">Learning Objective 2</option>
                        <option value="3">Learning Objective 3</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editFrayerType">Frayer Model Type:</label>
                    <select id="editFrayerType" class="form-control">
                        <option value="equation">Equations</option>
                        <option value="quantity">Physical Quantities</option>
                        <option value="structure">Biological Structures</option>
                        <option value="substance">Scientific Substances</option>
                        <option value="process">Scientific Processes/Cycles</option>
                        <option value="law">Scientific Laws/Theories</option>
                        <option value="classification">Scientific Classifications</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="editFrayerTerm">Target Term/Concept:</label>
                    <input type="text" id="editFrayerTerm" class="form-control" placeholder="Enter the key term or concept">
                </div>
                <div class="form-group">
                    <label class="form-label" for="editFrayerDefinition">Definition:</label>
                    <textarea id="editFrayerDefinition" class="form-control" rows="2" placeholder="Enter a clear, concise definition"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Examples:</label>
                    <div id="examplesContainer">
                        <!-- Examples will be added here -->
                    </div>
                    <button class="btn btn-outline btn-sm" id="addExampleBtn" style="margin-top: 0.5rem;">+ Add Example</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Non-Examples:</label>
                    <div id="nonExamplesContainer">
                        <!-- Non-examples will be added here -->
                    </div>
                    <button class="btn btn-outline btn-sm" id="addNonExampleBtn" style="margin-top: 0.5rem;">+ Add Non-Example</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editFrayerCharacteristics">Essential Characteristics:</label>
                    <textarea id="editFrayerCharacteristics" class="form-control" rows="2" placeholder="Enter essential characteristics or properties"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('frayerModelEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveFrayerModelBtn">Save Changes</button>
            </div>
        </div>
    </div>

<!-- Step 3 Modals -->
    <!-- Retrieval Questions Edit Modal -->
    <div class="modal-overlay" id="retrievalQuestionsEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit Retrieval Questions</h3>
                <button class="modal-close" onclick="closeModal('retrievalQuestionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="retrievalQuestionsContainer">
                    <!-- Questions will be added here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('retrievalQuestionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveRetrievalQuestionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Teaching Slides Edit Modal -->
    <div class="modal-overlay" id="teachingSlidesEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit Teaching Slides</h3>
                <button class="modal-close" onclick="closeModal('teachingSlidesEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="slides-modal-container">
                    <div class="slides-tab-container" id="teachingSlidesTabContainer">
                        <!-- Tabs will be added here -->
                    </div>
                    <div class="slides-content-container" id="teachingSlidesContentContainer">
                        <!-- Content will be added here -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('teachingSlidesEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveTeachingSlidesBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Individual Teaching Slide Edit Modal -->
    <div class="modal-overlay" id="teachingSlideEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Slide</h3>
                <button class="modal-close" onclick="closeModal('teachingSlideEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editSlideLoNumber">
                <input type="hidden" id="editSlideIndex">
                
                <div class="form-group">
                    <label class="form-label" for="editSlideType">Slide Type:</label>
                    <select id="editSlideType" class="form-control">
                        <option value="introduction">Introduction (Hook/Engagement)</option>
                        <option value="keyContent">Key Content (Main Teaching Points)</option>
                        <option value="framework">Framework-Based Structure</option>
                        <option value="practical">Practical Activity</option>
                        <option value="frayerModel">Frayer Model</option>
                        <option value="misconception">Addressing Misconceptions</option>
                        <option value="summary">Summary (Review Key Points)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editSlideTitle">Slide Title:</label>
                    <input type="text" id="editSlideTitle" class="form-control">
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editSlideContent">Slide Content:</label>
                    <textarea id="editSlideContent" class="form-control" rows="5"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editSlideVisuals">Visual Elements (Optional):</label>
                    <textarea id="editSlideVisuals" class="form-control" rows="3" placeholder="Describe any diagrams, images, or visual elements that should be included"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editSlideNotes">Teacher Notes (Optional):</label>
                    <textarea id="editSlideNotes" class="form-control" rows="3" placeholder="Add any delivery notes for the teacher"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('teachingSlideEditModal')">Cancel</button>
                <button class="btn btn-primary" onclick="saveTeachingSlide()">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Formative Questions Edit Modal -->
    <div class="modal-overlay" id="formativeQuestionsEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit Formative Assessment Questions</h3>
                <button class="modal-close" onclick="closeModal('formativeQuestionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="questions-modal-container">
                    <div class="questions-tab-container" id="formativeQuestionsTabContainer">
                        <!-- Tabs will be added here -->
                    </div>
                    <div class="questions-content-container" id="formativeQuestionsContentContainer">
                        <!-- Content will be added here -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('formativeQuestionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveFormativeQuestionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Individual Formative Question Edit Modal -->
    <div class="modal-overlay" id="formativeQuestionEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Question</h3>
                <button class="modal-close" onclick="closeModal('formativeQuestionEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editQuestionLoNumber">
                <input type="hidden" id="editQuestionIndex">
                
                <div class="form-group">
                    <label class="form-label" for="editQuestionText">Question Text:</label>
                    <textarea id="editQuestionText" class="form-control" rows="3"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editQuestionType">Question Type:</label>
                    <select id="editQuestionType" class="form-control">
                        <option value="multiple-choice">Multiple Choice</option>
                        <option value="short-answer">Short Answer</option>
                        <option value="extended-response">Extended Response</option>
                        <option value="calculation">Calculation</option>
                        <option value="practical">Practical Data Analysis</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editQuestionMarks">Marks Available:</label>
                    <input type="text" id="editQuestionMarks" class="form-control">
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editQuestionAnswer">Model Answer:</label>
                    <textarea id="editQuestionAnswer" class="form-control" rows="3"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Marking Guidelines:</label>
                    <div id="markingGuidelinesContainer">
                        <!-- Marking guidelines will be added here -->
                    </div>
                    <button class="btn btn-outline btn-sm" onclick="addMarkingGuidelineField()" style="margin-top: 0.5rem;">+ Add Marking Guideline</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Common Errors:</label>
                    <div id="commonErrorsContainer">
                        <!-- Common errors will be added here -->
                    </div>
                    <button class="btn btn-outline btn-sm" onclick="addCommonErrorField()" style="margin-top: 0.5rem;">+ Add Common Error</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editQuestionMisconception">Targeted Misconception (Optional):</label>
                    <input type="text" id="editQuestionMisconception" class="form-control" placeholder="Which misconception does this question address?">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('formativeQuestionEditModal')">Cancel</button>
                <button class="btn btn-primary" onclick="saveFormativeQuestion()">Save Changes</button>
            </div>
        </div>
    </div>
	
	<!-- Step 4 Modals -->
    <!-- Definitions Edit Modal -->
    <div class="modal-overlay" id="definitionsEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Definitions</h3>
                <button class="modal-close" onclick="closeModal('definitionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="definitionsEditList">
                    <!-- Definition fields will be added here -->
                </div>
                <button class="btn btn-outline btn-sm" onclick="addDefinitionField()" style="margin-top: 0.5rem;">+ Add Definition</button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('definitionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveDefinitionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Formulas Edit Modal -->
    <div class="modal-overlay" id="formulasEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Formulas</h3>
                <button class="modal-close" onclick="closeModal('formulasEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="formulasEditList">
                    <!-- Formula fields will be added here -->
                </div>
                <button class="btn btn-outline btn-sm" onclick="addFormulaField()" style="margin-top: 0.5rem;">+ Add Formula</button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('formulasEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveFormulasBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Diagrams Edit Modal -->
    <div class="modal-overlay" id="diagramsEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Diagrams</h3>
                <button class="modal-close" onclick="closeModal('diagramsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="diagramsEditList">
                    <!-- Diagram fields will be added here -->
                </div>
                <button class="btn btn-outline btn-sm" onclick="addDiagramField()" style="margin-top: 0.5rem;">+ Add Diagram</button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('diagramsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveDiagramsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Examples Edit Modal -->
    <div class="modal-overlay" id="examplesEditModal">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Examples</h3>
                <button class="modal-close" onclick="closeModal('examplesEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="examplesEditList">
                    <!-- Example fields will be added here -->
                </div>
                <button class="btn btn-outline btn-sm" onclick="addExampleField()" style="margin-top: 0.5rem;">+ Add Example</button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('examplesEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveExamplesBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Retrieval Worksheet Questions Edit Modal -->
    <div class="modal-overlay" id="retrievalWorksheetQuestionsEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit Retrieval Questions</h3>
                <button class="modal-close" onclick="closeModal('retrievalWorksheetQuestionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="retrievalWorksheetQuestionsEditList">
                    <!-- Retrieval question fields will be added here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('retrievalWorksheetQuestionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveRetrievalWorksheetQuestionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Scale Questions Edit Modal -->
    <div class="modal-overlay" id="scaleQuestionsEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit SCALE Questions</h3>
                <button class="modal-close" onclick="closeModal('scaleQuestionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="scaleQuestionsEditList">
                    <!-- SCALE question fields will be added here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('scaleQuestionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveScaleQuestionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Application Questions Edit Modal -->
    <div class="modal-overlay" id="applicationQuestionsEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit Application Questions</h3>
                <button class="modal-close" onclick="closeModal('applicationQuestionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="applicationQuestionsEditList">
                    <!-- Application question fields will be added here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('applicationQuestionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveApplicationQuestionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Exam Technique Questions Edit Modal -->
    <div class="modal-overlay" id="examTechniqueQuestionsEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit Exam Technique Questions</h3>
                <button class="modal-close" onclick="closeModal('examTechniqueQuestionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="examTechniqueQuestionsEditList">
                    <!-- Exam technique question fields will be added here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('examTechniqueQuestionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveExamTechniqueQuestionsBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Exam Style Questions Edit Modal -->
    <div class="modal-overlay" id="examStyleQuestionsEditModal">
        <div class="modal-container modal-lg">
            <div class="modal-header">
                <h3 class="modal-title">Edit Exam Style Questions</h3>
                <button class="modal-close" onclick="closeModal('examStyleQuestionsEditModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="examStyleQuestionsEditList">
                    <!-- Exam style question fields will be added here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeModal('examStyleQuestionsEditModal')">Cancel</button>
                <button class="btn btn-primary" id="saveExamStyleQuestionsBtn">Save Changes</button>
            </div>
        </div>
    </div>
	
    <!-- JavaScript Files -->
    <script src="js/constants.js"></script>
    <script src="js/state.js"></script>
    <script src="js/utils.js"></script>
    <script src="js/navigation.js"></script>
    <script src="js/step1.js"></script>
    <script src="js/step2.js"></script>
	<script src="js/step3.js"></script>
	<script src="js/step4.js"></script>
	<script src="js/export.js"></script>
    <script src="js/app.js"></script>
</body>
</html>


ðŸ“„ FILE: app.js
==================================================
// Initialize the application
function initApp() {
    console.log('Initializing app...');
    
    // Ensure appState is available
    if (!window.appState) {
        console.error('appState is not defined');
        window.appState = {
            currentMainStep: 1,
            currentSubStep: 'A',
            mainStepExpanded: [true, false, false, false],
            lessonInfo: {}
        };
    }
    
    setupEventListeners();
    updateStepIndicators();
    setupResponseTabs();
    updateButtonStates();
    
    // Initialize scroll indicators for substep navigation
    checkSubstepNavScroll();
    
    console.log('App initialization complete');
}

// Set up all event listeners
function setupEventListeners() {
    // Form elements for Step 1A
    document.getElementById('provider').addEventListener('change', handleProviderChange);
    document.getElementById('course').addEventListener('change', handleFormInputChange);
    document.getElementById('level').addEventListener('change', handleFormInputChange);
    document.getElementById('ability').addEventListener('change', handleFormInputChange);
    document.getElementById('subject').addEventListener('change', handleFormInputChange);
    document.getElementById('topic').addEventListener('input', handleFormInputChange);
    document.getElementById('lessonNumber').addEventListener('input', handleFormInputChange);
    document.getElementById('lessonTitle').addEventListener('input', handleFormInputChange);
    document.getElementById('description').addEventListener('input', handleFormInputChange);
    
    // Practical component checkboxes
    document.getElementById('lo1HasPractical').addEventListener('change', handlePracticalChange);
    document.getElementById('lo2HasPractical').addEventListener('change', handlePracticalChange);
    document.getElementById('lo3HasPractical').addEventListener('change', handlePracticalChange);
    
    // Step 1A: Overview
    document.getElementById('generateOverviewPromptBtn').addEventListener('click', generateOverviewPrompt);
    document.getElementById('copyOverviewPromptBtn').addEventListener('click', () => copyToClipboard('overviewPromptTextarea'));
    document.getElementById('overviewResponseTextarea').addEventListener('input', handleOverviewResponse);
    document.getElementById('previewOverviewResponseBtn').addEventListener('click', previewOverviewResponse);
    document.getElementById('continueToLOTypesBtn').addEventListener('click', () => switchSubstep(1, 'B'));
    
    // Step 1B: LO Types
    document.getElementById('generateLOTypesPromptBtn').addEventListener('click', generateLOTypesPrompt);
    document.getElementById('copyLOTypesPromptBtn').addEventListener('click', () => copyToClipboard('loTypesPromptTextarea'));
    document.getElementById('loTypesResponseTextarea').addEventListener('input', handleLOTypesResponse);
    document.getElementById('previewLOTypesResponseBtn').addEventListener('click', previewLOTypesResponse);
    document.getElementById('continueToMisconceptionsBtn').addEventListener('click', () => switchSubstep(1, 'C'));
    
    // Edit LO Type buttons
    document.getElementById('editLO1TypeBtn').addEventListener('click', () => openLoTypeEditModal(1));
    document.getElementById('editLO2TypeBtn').addEventListener('click', () => openLoTypeEditModal(2));
    document.getElementById('editLO3TypeBtn').addEventListener('click', () => openLoTypeEditModal(3));
    document.getElementById('editAoCategory').addEventListener('change', updateSpecificTypeOptions);
    document.getElementById('saveLoTypeBtn').addEventListener('click', saveLoTypeChanges);
    
    // Step 1C: Misconceptions
    document.getElementById('generateMisconceptionsPromptBtn').addEventListener('click', generateMisconceptionsPrompt);
    document.getElementById('copyMisconceptionsPromptBtn').addEventListener('click', () => copyToClipboard('misconceptionsPromptTextarea'));
    document.getElementById('misconceptionsResponseTextarea').addEventListener('input', handleMisconceptionsResponse);
    document.getElementById('previewMisconceptionsResponseBtn').addEventListener('click', previewMisconceptionsResponse);
    document.getElementById('continueToPriorKnowledgeBtn').addEventListener('click', () => switchSubstep(1, 'D'));
    
    // Edit Misconceptions buttons
    document.getElementById('editLO1MisconceptionsBtn').addEventListener('click', () => openMisconceptionsEditModal(1));
    document.getElementById('editLO2MisconceptionsBtn').addEventListener('click', () => openMisconceptionsEditModal(2));
    document.getElementById('editLO3MisconceptionsBtn').addEventListener('click', () => openMisconceptionsEditModal(3));
    document.getElementById('addMisconceptionBtn').addEventListener('click', addNewMisconception);
    document.getElementById('saveMisconceptionsBtn').addEventListener('click', saveMisconceptionsChanges);
    
    // Step 1D: Prior Knowledge
    document.getElementById('generatePriorKnowledgePromptBtn').addEventListener('click', generatePriorKnowledgePrompt);
    document.getElementById('copyPriorKnowledgePromptBtn').addEventListener('click', () => copyToClipboard('priorKnowledgePromptTextarea'));
    document.getElementById('priorKnowledgeResponseTextarea').addEventListener('input', handlePriorKnowledgeResponse);
    document.getElementById('previewPriorKnowledgeResponseBtn').addEventListener('click', previewPriorKnowledgeResponse);
    document.getElementById('continueToReviewBtn').addEventListener('click', () => switchSubstep(1, 'E'));
    
    // Edit Prior Knowledge buttons
    document.getElementById('editLO1PriorKnowledgeBtn').addEventListener('click', () => openPriorKnowledgeEditModal(1));
    document.getElementById('editLO2PriorKnowledgeBtn').addEventListener('click', () => openPriorKnowledgeEditModal(2));
    document.getElementById('editLO3PriorKnowledgeBtn').addEventListener('click', () => openPriorKnowledgeEditModal(3));
    document.getElementById('addPriorKnowledgeBtn').addEventListener('click', addNewPriorKnowledgeItem);
    document.getElementById('savePriorKnowledgeBtn').addEventListener('click', savePriorKnowledgeChanges);
    
    // Step 1E: Review & Edit
    document.getElementById('finishStep1Btn').addEventListener('click', finishStep1);
    
    // Step 2 Event Listeners
    // Framework edit modal
    document.getElementById('editBltUsed').addEventListener('change', toggleBltLevelsVisibility);
    document.getElementById('saveFrameworkBtn').addEventListener('click', saveFrameworkChanges);
    
    // Exam Technique edit modal
    document.getElementById('saveExamTechniqueBtn').addEventListener('click', saveExamTechniqueChanges);
    
    // Practical Requirements edit modal
    document.getElementById('addVariableBtn').addEventListener('click', addNewVariable);
    document.getElementById('addEquipmentBtn').addEventListener('click', addNewEquipment);
    document.getElementById('addStepBtn').addEventListener('click', addNewStep);
    document.getElementById('savePracticalBtn').addEventListener('click', savePracticalChanges);
    
    // Frayer Model edit modal
    document.getElementById('addExampleBtn').addEventListener('click', addNewExample);
    document.getElementById('addNonExampleBtn').addEventListener('click', addNewNonExample);
    document.getElementById('saveFrayerModelBtn').addEventListener('click', saveFrayerModelChanges);
    
	// Step 3 buttons
    document.getElementById('continueToTeachingInputBtn').addEventListener('click', () => {
        switchSubstep(3, 'B');
    });
    
    document.getElementById('continueToFormativeAssessmentBtn').addEventListener('click', () => {
        switchSubstep(3, 'C');
    });
    
    document.getElementById('continueToSlideReviewBtn').addEventListener('click', () => {
        switchSubstep(3, 'D');
    });
	
    // Check for scroll on resize
    window.addEventListener('resize', checkSubstepNavScroll);
}

// Handle form input change
function handleFormInputChange(e) {
    const { id, value } = e.target;
    appState.lessonInfo[id] = value;
}

// Handle provider change
function handleProviderChange(e) {
    console.log('Provider changed:', e.target.value);
    const provider = e.target.value;
    const courseSelect = document.getElementById('course');
    
    if (!courseSelect) {
        console.error('Could not find course select element');
        return;
    }
    
    // Save to state
    appState.lessonInfo.provider = provider;
    
    // Clear current options
    courseSelect.innerHTML = '<option value="">Select Course</option>';
    
    if (provider && courseOptions[provider]) {
        // Add new options
        courseOptions[provider].forEach(course => {
            const option = document.createElement('option');
            option.value = course;
            option.textContent = course;
            courseSelect.appendChild(option);
        });
        
        // Enable the select
        courseSelect.disabled = false;
    } else {
        // Disable the select if no provider is selected
        courseSelect.disabled = true;
    }
}

// Handle practical component checkbox changes
function handlePracticalChange(e) {
    const id = e.target.id;
    const isChecked = e.target.checked;
    
    if (id === 'lo1HasPractical') {
        appState.learningObjectives.lo1.hasPractical = isChecked;
        updateBadge('lo1Badge', isChecked);
    } else if (id === 'lo2HasPractical') {
        appState.learningObjectives.lo2.hasPractical = isChecked;
        updateBadge('lo2Badge', isChecked);
    } else if (id === 'lo3HasPractical') {
        appState.learningObjectives.lo3.hasPractical = isChecked;
        updateBadge('lo3Badge', isChecked);
    }
}

// Setup response tabs
function setupResponseTabs() {
    document.querySelectorAll('.response-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabContainer = this.closest('.response-tabs');
            const tabName = this.getAttribute('data-tab');
            
            // Remove active class from all tabs in this container
            tabContainer.querySelectorAll('.response-tab').forEach(t => t.classList.remove('active'));
            
            // Add active class to clicked tab
            this.classList.add('active');
            
            // Find the content container
            const contentContainer = tabContainer.nextElementSibling;
            
            // Hide all content in this container
            contentContainer.querySelectorAll('.response-content').forEach(c => c.classList.remove('active'));
            
            // Show the selected content
            contentContainer.querySelector(`#${tabName}Response`).classList.add('active');
        });
    });
}

// Update button states based on input
function updateButtonStates() {
    // Step 1A: Overview
    document.getElementById('continueToLOTypesBtn').disabled = !appState.responses.overview;
    
    // Step 1B: LO Types
    document.getElementById('continueToMisconceptionsBtn').disabled = !appState.responses.loTypes;
    
    // Step 1C: Misconceptions
    document.getElementById('continueToPriorKnowledgeBtn').disabled = !appState.responses.misconceptions;
    
    // Step 1D: Prior Knowledge
    document.getElementById('continueToReviewBtn').disabled = !appState.responses.priorKnowledge;
    
    // Step 1E: Review completion
    const allComplete = appState.responses.overview && 
                        appState.responses.loTypes && 
                        appState.responses.misconceptions && 
                        appState.responses.priorKnowledge;
    document.getElementById('finishStep1Btn').disabled = !allComplete;
}

// Initialize the application when the DOM is ready
document.addEventListener('DOMContentLoaded', initApp);


ðŸ“„ FILE: constants.js
==================================================
// Course options based on selected provider
const courseOptions = {
    'AQA': ['Combined Science: Trilogy', 'Combined Science: Synergy', 'Biology', 'Chemistry', 'Physics'],
    'Edexcel': ['Combined Science', 'Biology A', 'Biology B', 'Chemistry A', 'Chemistry B', 'Physics A', 'Physics B'],
    'OCR': ['Combined Science A: Gateway', 'Combined Science B: Twenty First Century', 'Biology A', 'Biology B', 'Chemistry A', 'Chemistry B', 'Physics A', 'Physics B'],
    'WJEC': ['Combined Science', 'Biology', 'Chemistry', 'Physics'],
    'CCEA': ['Single Award Science', 'Double Award Science', 'Biology', 'Chemistry', 'Physics']
};

// Assessment objective types
const aoTypes = {
    'AO1': [
        'Abstract Concept Understanding',
        'Tangible Knowledge Recall',
        'Exam Technique Familiarity',
        'Terminology & Keyword Precision',
        'Fact-Sequence Recall'
    ],
    'AO2': [
        'Data Analysis & Interpretation',
        'Exam Application Techniques',
        'Calculation Application',
        'Scientific Method Application',
        'Scenario-Based Application'
    ],
    'AO3': [
        'Experimental Design & Analysis',
        'Multi-Step Problem Solving',
        'Evaluation & Critical Assessment',
        'Interpretation & Conclusion Formation',
        'Abstract Concept Linking'
    ]
};

// Framework descriptions
const frameworkDescriptions = {
    'CER': 'Claim, Evidence, Reasoning - Students make a claim, provide evidence, and explain their reasoning.',
    'POE': 'Predict, Observe, Explain - Students predict what will happen, observe what does happen, and explain why.',
    'SOLO': 'Structure of Observed Learning Outcomes - Progression from simple to complex understanding.',
    'PEEL': 'Point, Evidence, Explain, Link - Structure for developing well-reasoned arguments.',
    'SEEC': 'State, Explain, Example, Connection - Methodical approach to explaining scientific concepts.'
};

// Frayer model type descriptions
const frayerModelDescriptions = {
    'equation': 'Focuses on mathematical equations, their components, and how they relate to physical phenomena',
    'quantity': 'Explores physical quantities, their units, and measurement techniques',
    'structure': 'Examines biological structures, their components, and functions',
    'substance': 'Investigates chemical substances, their properties, and behaviors',
    'process': 'Analyzes scientific processes, cycles, and their stages',
    'law': 'Explores scientific laws, theories, and their applications',
    'classification': 'Focuses on taxonomies, categories, and classification systems'
};


ðŸ“„ FILE: export.js
==================================================
// EXPORT FUNCTIONALITY
// Handles all export and save/load operations for the lesson planner

// PowerPoint Export Functions
function generateSlidesXml() {
    // Create XML for PowerPoint export
    let xml = `<?xml version="1.0" encoding="UTF-8"?>
<slides version="1.0">
    <metadata>
        <title>${escapeXml(appState.lessonInfo.lessonTitle)}</title>
        <subject>${escapeXml(appState.lessonInfo.subject)}</subject>
        <topic>${escapeXml(appState.lessonInfo.topic)}</topic>
        <provider>${escapeXml(appState.lessonInfo.provider)}</provider>
        <level>${escapeXml(appState.lessonInfo.level)}</level>
        <created>${new Date().toISOString()}</created>
    </metadata>
    <slide_collection>`;

    // Add retrieval practice slides
    if (appState.slides.retrieval && appState.slides.retrieval.questions && appState.slides.retrieval.questions.length > 0) {
        xml += `
        <section id="retrieval" title="Retrieval Practice">
            <slide template_id="retrieval_title" transition="fade">
                <content placeholder="title">Retrieval Practice</content>
                <content placeholder="subtitle">Activate Prior Knowledge</content>
            </slide>`;
            
        // Add each retrieval question as a slide
        appState.slides.retrieval.questions.forEach((question, index) => {
            xml += `
            <slide template_id="question_answer" transition="fade">
                <content placeholder="title">Question ${index + 1}</content>
                <content placeholder="question">${escapeXml(question.text)}</content>
                <content placeholder="answer">${escapeXml(question.answer)}</content>
                <content placeholder="notes">${escapeXml(question.priorKnowledgeLink || '')}</content>
            </slide>`;
        });
            
        xml += `
        </section>`;
    }

    // Add teaching slides for each learning objective
    for (let loNum = 1; loNum <= 3; loNum++) {
        if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loKey = 'lo' + loNum;
        if (appState.slides.teaching && appState.slides.teaching[loKey] && appState.slides.teaching[loKey].slides) {
            const loTitle = appState.learningObjectives[loKey].title || `Learning Objective ${loNum}`;
            
            xml += `
        <section id="${loKey}" title="${escapeXml(loTitle)}">
            <slide template_id="section_header" transition="zoom">
                <content placeholder="title">Learning Objective ${loNum}</content>
                <content placeholder="content">${escapeXml(loTitle)}</content>
            </slide>`;
            
            // Add each teaching slide
            appState.slides.teaching[loKey].slides.forEach((slide, index) => {
                // Determine template based on slide type
                let templateId = "content";
                
                switch(slide.type) {
                    case "introduction":
                        templateId = "intro";
                        break;
                    case "keyContent":
                        templateId = "content";
                        break;
                    case "framework":
                        templateId = "framework";
                        break;
                    case "practical":
                        templateId = "practical";
                        break;
                    case "frayerModel":
                        templateId = "frayer";
                        break;
                    case "misconception":
                        templateId = "misconception";
                        break;
                    case "summary":
                        templateId = "summary";
                        break;
                }
                
                xml += `
            <slide template_id="${templateId}" transition="fade">
                <content placeholder="title">${escapeXml(slide.title)}</content>
                <content placeholder="content">${escapeXml(slide.content)}</content>`;
                
                if (slide.visualElements && appState.export.slides.includeVisualPlaceholders) {
                    xml += `
                <content placeholder="visual">${escapeXml(slide.visualElements)}</content>`;
                }
                
                if (slide.notes && appState.export.slides.includeNotes) {
                    xml += `
                <notes>${escapeXml(slide.notes)}</notes>`;
                }
                
                xml += `
            </slide>`;
            });
            
            xml += `
        </section>`;
        }
    }

    // Add formative assessment slides
    for (let loNum = 1; loNum <= 3; loNum++) {
        if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loKey = 'lo' + loNum;
        if (appState.slides.formative && appState.slides.formative[loKey] && appState.slides.formative[loKey].questions) {
            const loTitle = appState.learningObjectives[loKey].title || `Learning Objective ${loNum}`;
            
            xml += `
        <section id="formative_${loKey}" title="Assessment for ${escapeXml(loTitle)}">
            <slide template_id="section_header" transition="zoom">
                <content placeholder="title">Check Your Understanding</content>
                <content placeholder="content">Learning Objective ${loNum}: ${escapeXml(loTitle)}</content>
            </slide>`;
            
            // Add each formative question as a slide
            appState.slides.formative[loKey].questions.forEach((question, index) => {
                xml += `
            <slide template_id="formative_question" transition="fade">
                <content placeholder="title">Question ${index + 1} (${question.marks} marks)</content>
                <content placeholder="question">${escapeXml(question.text)}</content>
                <content placeholder="type">${escapeXml(question.type)}</content>`;
                
                if (question.targetedMisconception) {
                    xml += `
                <content placeholder="misconception">${escapeXml(question.targetedMisconception)}</content>`;
                }
                
                if (appState.export.slides.includeNotes) {
                    xml += `
                <notes>${escapeXml(question.answer || '')}</notes>`;
                }
                
                xml += `
            </slide>`;
            });
            
            xml += `
        </section>`;
        }
    }

    // Add closing slide
    xml += `
        <section id="conclusion" title="Conclusion">
            <slide template_id="conclusion" transition="zoom">
                <content placeholder="title">Lesson Summary</content>
                <content placeholder="content">We've covered:`;
    
    // Add each learning objective to summary
    for (let loNum = 1; loNum <= 3; loNum++) {
        if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loKey = 'lo' + loNum;
        const loTitle = appState.learningObjectives[loKey].title || `Learning Objective ${loNum}`;
        
        xml += `
                â€¢ ${escapeXml(loTitle)}`;
    }
    
    xml += `
                </content>
            </slide>
        </section>
    </slide_collection>
</slides>`;

    return xml;
}

function generateWorksheetXml(worksheetNum = 1) {
    // Create XML for worksheet export
    const worksheetKey = `worksheet${worksheetNum}`;
    
    let xml = `<?xml version="1.0" encoding="UTF-8"?>
<worksheet version="1.0">
    <metadata>
        <title>${escapeXml(appState.lessonInfo.lessonTitle)} - Worksheet ${worksheetNum}</title>
        <subject>${escapeXml(appState.lessonInfo.subject)}</subject>
        <topic>${escapeXml(appState.lessonInfo.topic)}</topic>
        <provider>${escapeXml(appState.lessonInfo.provider)}</provider>
        <level>${escapeXml(appState.lessonInfo.level)}</level>
        <created>${new Date().toISOString()}</created>
    </metadata>
    <worksheet_content>`;

    // Add reference materials
    if (appState.worksheets.reference && shouldIncludeSection(worksheetNum, 'reference')) {
        xml += `
        <section id="reference" title="Reference Materials">`;
        
        // Add definitions
        if (appState.worksheets.reference.definitions && appState.worksheets.reference.definitions.length > 0) {
            xml += `
            <definitions>`;
            
            appState.worksheets.reference.definitions.forEach((def) => {
                xml += `
                <definition>
                    <term>${escapeXml(def.term)}</term>
                    <description>${escapeXml(def.description)}</description>
                </definition>`;
            });
            
            xml += `
            </definitions>`;
        }
        
        // Add formulas
        if (appState.worksheets.reference.formulas && appState.worksheets.reference.formulas.length > 0) {
            xml += `
            <formulas>`;
            
            appState.worksheets.reference.formulas.forEach((formula) => {
                xml += `
                <formula>
                    <name>${escapeXml(formula.name)}</name>
                    <expression>${escapeXml(formula.expression)}</expression>
                    <variables>${escapeXml(formula.variables || '')}</variables>
                </formula>`;
            });
            
            xml += `
            </formulas>`;
        }
        
        // Add diagrams
        if (appState.worksheets.reference.diagrams && appState.worksheets.reference.diagrams.length > 0) {
            xml += `
            <diagrams>`;
            
            appState.worksheets.reference.diagrams.forEach((diagram) => {
                xml += `
                <diagram>
                    <title>${escapeXml(diagram.title)}</title>
                    <description>${escapeXml(diagram.description)}</description>
                </diagram>`;
            });
            
            xml += `
            </diagrams>`;
        }
        
        // Add examples
        if (appState.worksheets.reference.examples && appState.worksheets.reference.examples.length > 0) {
            xml += `
            <examples>`;
            
            appState.worksheets.reference.examples.forEach((example) => {
                xml += `
                <example>
                    <title>${escapeXml(example.title)}</title>
                    <content>${escapeXml(example.content)}</content>
                </example>`;
            });
            
            xml += `
            </examples>`;
        }
        
        xml += `
        </section>`;
    }

    // Add retrieval questions
    if (appState.worksheets.retrieval && appState.worksheets.retrieval[worksheetKey] && appState.worksheets.retrieval[worksheetKey].length > 0) {
        xml += `
        <section id="retrieval" title="Prior Knowledge Retrieval">`;
        
        appState.worksheets.retrieval[worksheetKey].forEach((question, index) => {
            xml += `
            <question id="retrieval_${index + 1}" type="${escapeXml(question.type || 'short-answer')}" marks="${question.marks || 1}">
                <text>${escapeXml(question.text)}</text>`;
                
            if (appState.export.worksheets.includeAnswers) {
                xml += `
                <answer>${escapeXml(question.answer || '')}</answer>`;
            }
                
            if (question.type === 'multiple-choice' && question.options) {
                xml += `
                <options>`;
                
                question.options.forEach((option) => {
                    xml += `
                    <option${option.correct ? ' correct="true"' : ''}>${escapeXml(option.text)}</option>`;
                });
                
                xml += `
                </options>`;
            }
            
            xml += `
            </question>`;
        });
        
        xml += `
        </section>`;
    }

    // Add SCALE questions for each relevant learning objective
    if (appState.worksheets.scale && appState.worksheets.scale[worksheetKey]) {
        for (let loNum = 1; loNum <= 3; loNum++) {
            if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
            
            const loKey = 'lo' + loNum;
            // Check if this LO is allocated to this worksheet
            if (appState.lessonStructure.worksheetAllocation[loKey] != worksheetNum) continue;
            
            if (appState.worksheets.scale[worksheetKey][loKey] && appState.worksheets.scale[worksheetKey][loKey].length > 0) {
                const loTitle = appState.learningObjectives[loKey].title || `Learning Objective ${loNum}`;
                
                const selectedQuestions = appState.worksheets.scale[worksheetKey][loKey].filter(q => q.selected);
                if (selectedQuestions.length === 0) continue;
                
                xml += `
        <section id="scale_${loKey}" title="SCALE Questions: ${escapeXml(loTitle)}">`;
                
                selectedQuestions.forEach((question, index) => {
                    xml += `
            <question id="scale_${loKey}_${index + 1}" type="${escapeXml(question.type || 'short-answer')}" scale_level="${escapeXml(question.scaleLevel || 'S')}" marks="${question.marks || 1}">
                <text>${escapeXml(question.text)}</text>`;
                    
                    if (appState.export.worksheets.includeAnswers) {
                        xml += `
                <answer>${escapeXml(question.answer || '')}</answer>`;
                    }
                    
                    if (question.type === 'multiple-choice' && question.options) {
                        xml += `
                <options>`;
                        
                        question.options.forEach((option) => {
                            xml += `
                    <option${option.correct ? ' correct="true"' : ''}>${escapeXml(option.text)}</option>`;
                        });
                        
                        xml += `
                </options>`;
                    }
                    
                    xml += `
            </question>`;
                });
                
                xml += `
        </section>`;
            }
        }
    }

    // Add application questions for each relevant learning objective
    if (appState.worksheets.application && appState.worksheets.application[worksheetKey]) {
        for (let loNum = 1; loNum <= 3; loNum++) {
            if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
            
            const loKey = 'lo' + loNum;
            // Check if this LO is allocated to this worksheet
            if (appState.lessonStructure.worksheetAllocation[loKey] != worksheetNum) continue;
            
            if (appState.worksheets.application[worksheetKey][loKey] && appState.worksheets.application[worksheetKey][loKey].length > 0) {
                const loTitle = appState.learningObjectives[loKey].title || `Learning Objective ${loNum}`;
                
                xml += `
        <section id="application_${loKey}" title="Application Questions: ${escapeXml(loTitle)}">`;
                
                appState.worksheets.application[worksheetKey][loKey].forEach((question, index) => {
                    xml += `
            <question id="application_${loKey}_${index + 1}" type="${escapeXml(question.type || 'extended-response')}" framework="${escapeXml(question.framework || 'CER')}" marks="${question.marks || 3}">
                <text>${escapeXml(question.text)}</text>`;
                    
                    if (appState.export.worksheets.includeAnswers) {
                        xml += `
                <answer>${escapeXml(question.answer || '')}</answer>`;
                    }
                    
                    if (question.context) {
                        xml += `
                <context>${escapeXml(question.context)}</context>`;
                    }
                    
                    if (appState.export.worksheets.includeMarkingGuidelines && question.markingGuidelines && question.markingGuidelines.length > 0) {
                        xml += `
                <marking_guidelines>`;
                        
                        question.markingGuidelines.forEach((guideline) => {
                            xml += `
                    <guideline>${escapeXml(guideline)}</guideline>`;
                        });
                        
                        xml += `
                </marking_guidelines>`;
                    }
                    
                    xml += `
            </question>`;
                });
                
                xml += `
        </section>`;
            }
        }
    }

    // Add exam technique questions
    if (appState.worksheets.examTechnique && appState.worksheets.examTechnique[worksheetKey]) {
        for (let loNum = 1; loNum <= 3; loNum++) {
            if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
            
            const loKey = 'lo' + loNum;
            // Check if this LO is allocated to this worksheet
            if (appState.lessonStructure.worksheetAllocation[loKey] != worksheetNum) continue;
            
            // Check if this LO has any exam techniques assigned
            const techniques = [];
            if (appState.examTechniques[loKey].BLT) techniques.push('BLT');
            if (appState.examTechniques[loKey].EVERY) techniques.push('EVERY');
            if (appState.examTechniques[loKey].MEMES) techniques.push('MEMES');
            if (appState.examTechniques[loKey].GRAPH) techniques.push('GRAPH');
            
            if (techniques.length === 0) continue;
            
            if (appState.worksheets.examTechnique[worksheetKey][loKey] && appState.worksheets.examTechnique[worksheetKey][loKey].length > 0) {
                const loTitle = appState.learningObjectives[loKey].title || `Learning Objective ${loNum}`;
                
                xml += `
        <section id="examTechnique_${loKey}" title="Exam Technique Questions: ${escapeXml(loTitle)}">`;
                
                appState.worksheets.examTechnique[worksheetKey][loKey].forEach((question, index) => {
                    xml += `
            <question id="examTechnique_${loKey}_${index + 1}" type="${escapeXml(question.type || 'short-answer')}" technique="${escapeXml(question.technique || '')}" marks="${question.marks || 2}">
                <text>${escapeXml(question.text)}</text>`;
                    
                    if (appState.export.worksheets.includeAnswers) {
                        xml += `
                <answer>${escapeXml(question.answer || '')}</answer>`;
                    }
                    
                    if (question.technique_guidance) {
                        xml += `
                <technique_guidance>${escapeXml(question.technique_guidance)}</technique_guidance>`;
                    }
                    
                    xml += `
            </question>`;
                });
                
                xml += `
        </section>`;
            }
        }
    }

    // Add exam style questions
    if (appState.worksheets.examStyle && appState.worksheets.examStyle[worksheetKey]) {
        for (let loNum = 1; loNum <= 3; loNum++) {
            if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
            
            const loKey = 'lo' + loNum;
            // Check if this LO is allocated to this worksheet
            if (appState.lessonStructure.worksheetAllocation[loKey] != worksheetNum) continue;
            
            if (appState.worksheets.examStyle[worksheetKey][loKey] && appState.worksheets.examStyle[worksheetKey][loKey].length > 0) {
                const loTitle = appState.learningObjectives[loKey].title || `Learning Objective ${loNum}`;
                
                xml += `
        <section id="examStyle_${loKey}" title="Exam Style Questions: ${escapeXml(loTitle)}">`;
                
                appState.worksheets.examStyle[worksheetKey][loKey].forEach((question, index) => {
                    xml += `
            <question id="examStyle_${loKey}_${index + 1}" type="${escapeXml(question.type || 'extended-response')}" ao_category="${escapeXml(question.aoCategory || 'AO1')}" marks="${question.marks || 4}">
                <text>${escapeXml(question.text)}</text>`;
                    
                    if (appState.export.worksheets.includeAnswers) {
                        xml += `
                <answer>${escapeXml(question.answer || '')}</answer>`;
                    }
                    
                    if (appState.export.worksheets.includeMarkingGuidelines && question.markingGuidelines && question.markingGuidelines.length > 0) {
                        xml += `
                <marking_guidelines>`;
                        
                        question.markingGuidelines.forEach((guideline) => {
                            xml += `
                    <guideline>${escapeXml(guideline)}</guideline>`;
                        });
                        
                        xml += `
                </marking_guidelines>`;
                    }
                    
                    xml += `
            </question>`;
                });
                
                xml += `
        </section>`;
            }
        }
    }

    // Add finalization preferences
    if (appState.worksheets.finalization && appState.worksheets.finalization[worksheetKey]) {
        const finalization = appState.worksheets.finalization[worksheetKey];
        
        xml += `
        <finalization>
            <answer_display>${escapeXml(finalization.answerDisplay || 'Separate')}</answer_display>
            <include_sentence_starters>${finalization.includeSentenceStarters ? 'true' : 'false'}</include_sentence_starters>
            <answer_line_style>${escapeXml(finalization.answerLineStyle || 'Single')}</answer_line_style>
            <show_points>${finalization.showPoints ? 'true' : 'false'}</show_points>
            <section_labeling>${escapeXml(finalization.sectionLabeling || 'Numbered')}</section_labeling>
            <paper_size>${escapeXml(finalization.paperSize || 'A4')}</paper_size>
            <orientation>${escapeXml(finalization.orientation || 'Portrait')}</orientation>
        </finalization>`;
    }

    xml += `
    </worksheet_content>
</worksheet>`;

    return xml;
}

// Export functions
function exportSlidesXml() {
    const xml = generateSlidesXml();
    if (validateXml(xml)) {
        downloadXmlFile(xml, `${sanitizeFilename(appState.lessonInfo.lessonTitle)}_slides.xml`);
        updateExportStatus('slides', 'success', 'Slides XML exported successfully!');
    } else {
        updateExportStatus('slides', 'error', 'Failed to validate slides XML. Please check the console for details.');
    }
}

function exportWorksheetXml(worksheetNum = 1) {
    const xml = generateWorksheetXml(worksheetNum);
    if (validateXml(xml)) {
        downloadXmlFile(xml, `${sanitizeFilename(appState.lessonInfo.lessonTitle)}_worksheet${worksheetNum}.xml`);
        updateExportStatus('worksheet', 'success', `Worksheet ${worksheetNum} XML exported successfully!`);
    } else {
        updateExportStatus('worksheet', 'error', `Failed to validate worksheet ${worksheetNum} XML. Please check the console for details.`);
    }
}

function exportAllWorksheets() {
    let success = true;
    
    for (let i = 1; i <= appState.worksheets.count; i++) {
        const xml = generateWorksheetXml(i);
        if (validateXml(xml)) {
            downloadXmlFile(xml, `${sanitizeFilename(appState.lessonInfo.lessonTitle)}_worksheet${i}.xml`);
        } else {
            success = false;
            updateExportStatus('worksheet', 'error', `Failed to validate worksheet ${i} XML. Please check the console for details.`);
            break;
        }
    }
    
    if (success) {
        updateExportStatus('worksheet', 'success', 'All worksheets exported successfully!');
    }
}

function exportCompleteLessonPackage() {
    // Create a bundle containing all XMLs
    const slidesXml = generateSlidesXml();
    const worksheetXmls = [];
    
    for (let i = 1; i <= appState.worksheets.count; i++) {
        worksheetXmls.push(generateWorksheetXml(i));
    }
    
    // Validate all XMLs
    if (!validateXml(slidesXml)) {
        updateExportStatus('package', 'error', 'Failed to validate slides XML. Package export aborted.');
        return;
    }
    
    for (let i = 0; i < worksheetXmls.length; i++) {
        if (!validateXml(worksheetXmls[i])) {
            updateExportStatus('package', 'error', `Failed to validate worksheet ${i+1} XML. Package export aborted.`);
            return;
        }
    }
    
    // Create package metadata
    const packageMetadata = {
        title: appState.lessonInfo.lessonTitle,
        subject: appState.lessonInfo.subject,
        topic: appState.lessonInfo.topic,
        provider: appState.lessonInfo.provider,
        level: appState.lessonInfo.level,
        created: new Date().toISOString(),
        slidesCount: 1,
        worksheetsCount: appState.worksheets.count
    };
    
    // Create the package XML
    let packageXml = `<?xml version="1.0" encoding="UTF-8"?>
<lesson_package version="1.0">
    <metadata>
        <title>${escapeXml(packageMetadata.title)}</title>
        <subject>${escapeXml(packageMetadata.subject)}</subject>
        <topic>${escapeXml(packageMetadata.topic)}</topic>
        <provider>${escapeXml(packageMetadata.provider)}</provider>
        <level>${escapeXml(packageMetadata.level)}</level>
        <created>${packageMetadata.created}</created>
        <slides_count>${packageMetadata.slidesCount}</slides_count>
        <worksheets_count>${packageMetadata.worksheetsCount}</worksheets_count>
    </metadata>
    <components>
        <slides filename="${sanitizeFilename(appState.lessonInfo.lessonTitle)}_slides.xml" />`;
    
    for (let i = 1; i <= appState.worksheets.count; i++) {
        packageXml += `
        <worksheet number="${i}" filename="${sanitizeFilename(appState.lessonInfo.lessonTitle)}_worksheet${i}.xml" />`;
    }
    
    packageXml += `
    </components>
    <lesson_state>${escapeXml(JSON.stringify(appState))}</lesson_state>
</lesson_package>`;
    
    // Validate and download package XML
    if (validateXml(packageXml)) {
        downloadXmlFile(packageXml, `${sanitizeFilename(appState.lessonInfo.lessonTitle)}_package.xml`);
        
        // Also download individual component XMLs
        downloadXmlFile(slidesXml, `${sanitizeFilename(appState.lessonInfo.lessonTitle)}_slides.xml`);
        
        for (let i = 0; i < worksheetXmls.length; i++) {
            downloadXmlFile(worksheetXmls[i], `${sanitizeFilename(appState.lessonInfo.lessonTitle)}_worksheet${i+1}.xml`);
        }
        
        updateExportStatus('package', 'success', 'Complete lesson package exported successfully!');
    } else {
        updateExportStatus('package', 'error', 'Failed to validate package XML. Please check the console for details.');
    }
}

// Save & Load Functionality
function saveLessonToLocalStorage() {
    try {
        const serializedState = JSON.stringify(appState);
        localStorage.setItem('gcse_lesson_planner_state', serializedState);
        localStorage.setItem('gcse_lesson_planner_saved_time', new Date().toISOString());
        
        updateSaveStatus('success', 'Lesson saved to browser storage successfully.');
        return true;
    } catch (error) {
        console.error('Failed to save lesson to local storage:', error);
        updateSaveStatus('error', 'Failed to save lesson to browser storage.');
        return false;
    }
}

function loadLessonFromLocalStorage() {
    try {
        const serializedState = localStorage.getItem('gcse_lesson_planner_state');
        if (!serializedState) {
            updateSaveStatus('warning', 'No saved lesson found in browser storage.');
            return false;
        }
        
        const savedTime = localStorage.getItem('gcse_lesson_planner_saved_time');
        const parsedState = JSON.parse(serializedState);
        
        // Update app state
        Object.assign(appState, parsedState);
        
        // Update UI to reflect loaded state
        updateUIFromLoadedState();
        
        updateSaveStatus('success', `Lesson loaded successfully. Last saved: ${formatSavedTime(savedTime)}`);
        return true;
    } catch (error) {
        console.error('Failed to load lesson from local storage:', error);
        updateSaveStatus('error', 'Failed to load lesson from browser storage.');
        return false;
    }
}

function updateUIFromLoadedState() {
    // Update the current step display based on loaded state
    updateStepIndicators();
    
    // Populate form fields with loaded data
    populateFormFields();
    
    // Switch to the appropriate step and substep
    switchSubstep(appState.currentMainStep, appState.currentSubStep);
    
    // Make sure main steps are expanded/collapsed correctly
    appState.mainStepExpanded.forEach((expanded, index) => {
        const stepNumber = index + 1;
        const mainStep = document.getElementById(`mainStep${stepNumber}`);
        const mainStepContent = document.getElementById(`mainStepContent${stepNumber}`);
        
        if (expanded) {
            mainStep.classList.add('expanded');
            mainStepContent.style.height = 'auto';
        } else {
            mainStep.classList.remove('expanded');
            mainStepContent.style.height = '0';
        }
    });
}

function populateFormFields() {
    // Populate Step 1A form fields
    for (const key in appState.lessonInfo) {
        const element = document.getElementById(key);
        if (element) {
            element.value = appState.lessonInfo[key];
        }
    }
    
    // Populate LO checkboxes
    if (appState.learningObjectives.lo1.hasPractical) {
        document.getElementById('lo1HasPractical').checked = true;
    }
    if (appState.learningObjectives.lo2.hasPractical) {
        document.getElementById('lo2HasPractical').checked = true;
    }
    if (appState.learningObjectives.lo3.hasPractical) {
        document.getElementById('lo3HasPractical').checked = true;
    }
    
    // Re-run any initialization functions that would normally run when completing each step
    if (appState.responseTags.learningObjectives) {
        displayLearningObjectives();
    }
    
    if (appState.responseTags.loTypes) {
        displayLOTypes();
    }
    
    if (appState.responseTags.misconceptions) {
        displayMisconceptions();
    }
    
    if (appState.responseTags.priorKnowledge) {
        displayPriorKnowledge();
    }
    
    // Update the export settings form
    updateExportSettingsForm();
}

function updateSaveStatus(type, message) {
    const statusContainer = document.getElementById('saveStatusContainer');
    if (!statusContainer) return;
    
    statusContainer.innerHTML = '';
    
    const statusElement = document.createElement('div');
    statusElement.className = `alert alert-${type}`;
    
    const icon = document.createElement('svg');
    icon.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
    icon.setAttribute('width', '20');
    icon.setAttribute('height', '20');
    icon.setAttribute('viewBox', '0 0 24 24');
    icon.setAttribute('fill', 'none');
    icon.setAttribute('stroke', 'currentColor');
    icon.setAttribute('stroke-width', '2');
    icon.setAttribute('stroke-linecap', 'round');
    icon.setAttribute('stroke-linejoin', 'round');
    
    if (type === 'success') {
        icon.innerHTML = '<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline>';
    } else if (type === 'error') {
        icon.innerHTML = '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line>';
    } else {
        icon.innerHTML = '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line>';
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.textContent = message;
    
    statusElement.appendChild(icon);
    statusElement.appendChild(messageDiv);
    statusContainer.appendChild(statusElement);
    
    // Auto-hide after 5 seconds for success messages
    if (type === 'success') {
        setTimeout(() => {
            statusElement.style.opacity = '0';
            setTimeout(() => {
                if (statusContainer.contains(statusElement)) {
                    statusContainer.removeChild(statusElement);
                }
            }, 300);
        }, 5000);
    }
}

function updateExportStatus(exportType, type, message) {
    const statusContainerId = `${exportType}ExportStatusContainer`;
    const statusContainer = document.getElementById(statusContainerId);
    if (!statusContainer) return;
    
    statusContainer.innerHTML = '';
    
    const statusElement = document.createElement('div');
    statusElement.className = `alert alert-${type}`;
    
    const icon = document.createElement('svg');
    icon.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
    icon.setAttribute('width', '20');
    icon.setAttribute('height', '20');
    icon.setAttribute('viewBox', '0 0 24 24');
    icon.setAttribute('fill', 'none');
    icon.setAttribute('stroke', 'currentColor');
    icon.setAttribute('stroke-width', '2');
    icon.setAttribute('stroke-linecap', 'round');
    icon.setAttribute('stroke-linejoin', 'round');
    
    if (type === 'success') {
        icon.innerHTML = '<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline>';
    } else if (type === 'error') {
        icon.innerHTML = '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line>';
    } else {
        icon.innerHTML = '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line>';
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.textContent = message;
    
    statusElement.appendChild(icon);
    statusElement.appendChild(messageDiv);
    statusContainer.appendChild(statusElement);
    
    // Auto-hide after 5 seconds for success messages
    if (type === 'success') {
        setTimeout(() => {
            statusElement.style.opacity = '0';
            setTimeout(() => {
                if (statusContainer.contains(statusElement)) {
                    statusContainer.removeChild(statusElement);
                }
            }, 300);
        }, 5000);
    }
}

function formatSavedTime(isoString) {
    if (!isoString) return 'Unknown';
    
    try {
        const date = new Date(isoString);
        return date.toLocaleString();
    } catch (error) {
        return isoString;
    }
}

// Update Export Settings
function updateExportSettingsForm() {
    // Update slides export settings
    if (document.getElementById('includeSlidesNotes')) {
        document.getElementById('includeSlidesNotes').checked = appState.export.slides.includeNotes;
    }
    
    if (document.getElementById('includeVisualPlaceholders')) {
        document.getElementById('includeVisualPlaceholders').checked = appState.export.slides.includeVisualPlaceholders;
    }
    
    // Update worksheet export settings
    if (document.getElementById('includeWorksheetAnswers')) {
        document.getElementById('includeWorksheetAnswers').checked = appState.export.worksheets.includeAnswers;
    }
    
    if (document.getElementById('includeMarkingGuidelines')) {
        document.getElementById('includeMarkingGuidelines').checked = appState.export.worksheets.includeMarkingGuidelines;
    }
}

function updateExportSettings() {
    // Update slides export settings
    if (document.getElementById('includeSlidesNotes')) {
        appState.export.slides.includeNotes = document.getElementById('includeSlidesNotes').checked;
    }
    
    if (document.getElementById('includeVisualPlaceholders')) {
        appState.export.slides.includeVisualPlaceholders = document.getElementById('includeVisualPlaceholders').checked;
    }
    
    // Update worksheet export settings
    if (document.getElementById('includeWorksheetAnswers')) {
        appState.export.worksheets.includeAnswers = document.getElementById('includeWorksheetAnswers').checked;
    }
    
    if (document.getElementById('includeMarkingGuidelines')) {
        appState.export.worksheets.includeMarkingGuidelines = document.getElementById('includeMarkingGuidelines').checked;
    }
    
    updateExportStatus('settings', 'success', 'Export settings updated successfully.');
}

// Helper Functions
function validateXml(xml) {
    try {
        const parser = new DOMParser();
        const doc = parser.parseFromString(xml, 'application/xml');
        
        // Check for parser errors
        const parserError = doc.querySelector('parsererror');
        if (parserError) {
            console.error('XML validation error:', parserError.textContent);
            return false;
        }
        
        return true;
    } catch (error) {
        console.error('Failed to validate XML:', error);
        return false;
    }
}

function downloadXmlFile(xml, filename) {
    const blob = new Blob([xml], { type: 'application/xml' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }, 0);
}

function sanitizeFilename(filename) {
    if (!filename) return 'lesson';
    
    // Replace invalid characters with underscores
    return filename.replace(/[/\\?%*:|"<>]/g, '_')
                   .replace(/\s+/g, '_')
                   .trim();
}

function escapeXml(unsafe) {
    if (unsafe === undefined || unsafe === null) return '';
    
    return String(unsafe)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;');
}

function shouldIncludeSection(worksheetNum, sectionType) {
    // Determine if a section should be included based on worksheet allocation
    // Different section types have different rules
    
    if (sectionType === 'reference') {
        // Reference materials should be included on all worksheets
        return true;
    }
    
    if (sectionType === 'retrieval') {
        // Retrieval questions should be included on the first worksheet only
        return worksheetNum === 1;
    }
    
    // For other section types, check if any LOs are allocated to this worksheet
    for (let loNum = 1; loNum <= 3; loNum++) {
        if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loKey = 'lo' + loNum;
        if (appState.lessonStructure.worksheetAllocation[loKey] == worksheetNum) {
            return true;
        }
    }
    
    return false;
}

// Initialize export listeners
function initializeExportListeners() {
    // Save & Load buttons
    const saveBtn = document.getElementById('saveLessonBtn');
    if (saveBtn) {
        saveBtn.addEventListener('click', saveLessonToLocalStorage);
    }
    
    const loadBtn = document.getElementById('loadLessonBtn');
    if (loadBtn) {
        loadBtn.addEventListener('click', loadLessonFromLocalStorage);
    }
    
    // Slides export buttons
    const exportSlidesBtn = document.getElementById('exportSlidesBtn');
    if (exportSlidesBtn) {
        exportSlidesBtn.addEventListener('click', exportSlidesXml);
    }
    
    // Worksheet export buttons
    const exportWorksheet1Btn = document.getElementById('exportWorksheet1Btn');
    if (exportWorksheet1Btn) {
        exportWorksheet1Btn.addEventListener('click', () => exportWorksheetXml(1));
    }
    
    const exportWorksheet2Btn = document.getElementById('exportWorksheet2Btn');
    if (exportWorksheet2Btn) {
        exportWorksheet2Btn.addEventListener('click', () => exportWorksheetXml(2));
    }
    
    const exportAllWorksheetsBtn = document.getElementById('exportAllWorksheetsBtn');
    if (exportAllWorksheetsBtn) {
        exportAllWorksheetsBtn.addEventListener('click', exportAllWorksheets);
    }
    
    // Complete package export button
    const exportPackageBtn = document.getElementById('exportPackageBtn');
    if (exportPackageBtn) {
        exportPackageBtn.addEventListener('click', exportCompleteLessonPackage);
    }
    
    // Export settings update button
    const updateExportSettingsBtn = document.getElementById('updateExportSettingsBtn');
    if (updateExportSettingsBtn) {
        updateExportSettingsBtn.addEventListener('click', updateExportSettings);
    }
}

// Auto-save functionality
let autoSaveInterval = null;

function startAutoSave(intervalMs = 5 * 60 * 1000) { // Default: 5 minutes
    // Clear any existing interval
    if (autoSaveInterval) {
        clearInterval(autoSaveInterval);
    }
    
    // Set new interval
    autoSaveInterval = setInterval(() => {
        saveLessonToLocalStorage();
    }, intervalMs);
}

function stopAutoSave() {
    if (autoSaveInterval) {
        clearInterval(autoSaveInterval);
        autoSaveInterval = null;
    }
}

// Auto-save can be started when the app initializes
// startAutoSave();

// Initialize export functionality
document.addEventListener('DOMContentLoaded', function() {
    initializeExportListeners();
});


ðŸ“„ FILE: fix.js
==================================================
// Fix script for GCSE Science Lesson Planner
(function() {
    // Wait for DOM content to be fully loaded
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Fix script loaded');
        
        // Define course options globally to ensure they're accessible
        window.courseOptions = {
            'AQA': ['Combined Science: Trilogy', 'Combined Science: Synergy', 'Biology', 'Chemistry', 'Physics'],
            'Edexcel': ['Combined Science', 'Biology A', 'Biology B', 'Chemistry A', 'Chemistry B', 'Physics A', 'Physics B'],
            'OCR': ['Combined Science A: Gateway', 'Combined Science B: Twenty First Century', 'Biology A', 'Biology B', 'Chemistry A', 'Chemistry B', 'Physics A', 'Physics B'],
            'WJEC': ['Combined Science', 'Biology', 'Chemistry', 'Physics'],
            'CCEA': ['Single Award Science', 'Double Award Science', 'Biology', 'Chemistry', 'Physics']
        };
        
        // Fix for main step toggling
        window.toggleMainStep = function(stepNumber) {
            console.log('Toggling main step', stepNumber);
            const mainStep = document.getElementById(`mainStep${stepNumber}`);
            const mainStepContent = document.getElementById(`mainStepContent${stepNumber}`);
            
            if (!mainStep || !mainStepContent) {
                console.error(`Could not find main step ${stepNumber} elements`);
                return;
            }
            
            if (mainStep.classList.contains('expanded')) {
                mainStep.classList.remove('expanded');
                mainStepContent.style.height = '0';
                if (window.appState) {
                    window.appState.mainStepExpanded[stepNumber - 1] = false;
                }
            } else {
                mainStep.classList.add('expanded');
                mainStepContent.style.height = 'auto';
                if (window.appState) {
                    window.appState.mainStepExpanded[stepNumber - 1] = true;
                }
            }
        };
        
        // Fix for substep switching
        window.switchSubstep = function(mainStep, subStep) {
            console.log('Switching to substep', mainStep, subStep);
            
            // Update state
            if (window.appState) {
                window.appState.currentMainStep = mainStep;
                window.appState.currentSubStep = subStep;
            }
            
            // Ensure main step is expanded
            const mainStepElement = document.getElementById(`mainStep${mainStep}`);
            const mainStepContent = document.getElementById(`mainStepContent${mainStep}`);
            
            if (!mainStepElement || !mainStepContent) {
                console.error(`Could not find main step ${mainStep} elements`);
                return;
            }
            
            if (!mainStepElement.classList.contains('expanded')) {
                mainStepElement.classList.add('expanded');
                mainStepContent.style.height = 'auto';
                if (window.appState) {
                    window.appState.mainStepExpanded[mainStep - 1] = true;
                }
            }
            
            // Update substep tabs
            document.querySelectorAll('.substep-tab').forEach(tab => {
                if (tab.getAttribute('data-step') == mainStep && tab.getAttribute('data-substep') == subStep) {
                    tab.classList.add('active');
                } else {
                    tab.classList.remove('active');
                }
            });
            
            // Update substep content
            document.querySelectorAll('.substep-content').forEach(content => {
                if (content.getAttribute('data-step') == mainStep && content.getAttribute('data-substep') == subStep) {
                    content.classList.add('active');
                } else {
                    content.classList.remove('active');
                }
            });
            
            // Scroll to top of the main step
            mainStepElement.scrollIntoView({ behavior: 'smooth' });
        };
        
        // Fix for course selection
        window.handleProviderChange = function(e) {
            console.log('Provider changed:', e.target.value);
            const provider = e.target.value;
            const courseSelect = document.getElementById('course');
            
            if (!courseSelect) {
                console.error('Could not find course select element');
                return;
            }
            
            // Save to state
            if (window.appState && window.appState.lessonInfo) {
                window.appState.lessonInfo.provider = provider;
            }
            
            // Clear current options
            courseSelect.innerHTML = '<option value="">Select Course</option>';
            
            if (provider && window.courseOptions[provider]) {
                // Add new options
                window.courseOptions[provider].forEach(course => {
                    const option = document.createElement('option');
                    option.value = course;
                    option.textContent = course;
                    courseSelect.appendChild(option);
                });
                
                // Enable the select
                courseSelect.disabled = false;
            } else {
                // Disable the select if no provider is selected
                courseSelect.disabled = true;
            }
        };
        
        // Re-attach event listener for provider change
        const providerSelect = document.getElementById('provider');
        if (providerSelect) {
            // Replace any existing onchange handler
            providerSelect.onchange = window.handleProviderChange;
        }
        
        // Check for scroll on substep navigation
        window.checkSubstepNavScroll = function() {
            document.querySelectorAll('.substeps-nav').forEach(nav => {
                const hasScrollbar = nav.scrollWidth > nav.clientWidth;
                
                // Get scroll indicators
                const leftIndicator = nav.querySelector('.nav-scroll-left');
                const rightIndicator = nav.querySelector('.nav-scroll-right');
                
                // Show/hide indicators based on scrollbar
                if (hasScrollbar) {
                    if (leftIndicator) leftIndicator.style.display = 'flex';
                    if (rightIndicator) rightIndicator.style.display = 'flex';
                } else {
                    if (leftIndicator) leftIndicator.style.display = 'none';
                    if (rightIndicator) rightIndicator.style.display = 'none';
                }
            });
        };
        
        // Run initialization
        window.checkSubstepNavScroll();
        
        console.log('Fix script completed');
    });
})();


ðŸ“„ FILE: navigation.js
==================================================
// Toggle main step expansion
function toggleMainStep(stepNumber) {
    console.log('Toggling main step', stepNumber);
    const stepIndex = stepNumber - 1;
    const mainStep = document.getElementById(`mainStep${stepNumber}`);
    const mainStepContent = document.getElementById(`mainStepContent${stepNumber}`);
    
    if (!mainStep || !mainStepContent) {
        console.error(`Could not find main step ${stepNumber} elements`);
        return;
    }
    
    if (mainStep.classList.contains('expanded')) {
        mainStep.classList.remove('expanded');
        mainStepContent.style.height = '0';
        appState.mainStepExpanded[stepIndex] = false;
    } else {
        mainStep.classList.add('expanded');
        mainStepContent.style.height = 'auto';
        appState.mainStepExpanded[stepIndex] = true;
    }
}

// Scroll the substep navigation
function scrollSubstepNav(direction) {
    const currentStep = appState.currentMainStep;
    const nav = document.querySelector(`.main-step-${currentStep} .substeps-nav`);
    
    if (!nav) return;
    
    const scrollAmount = 200; // Pixels to scroll
    
    if (direction === 'left') {
        nav.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
    } else {
        nav.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
}

// Handle navigation scroll indicators
function checkSubstepNavScroll() {
    document.querySelectorAll('.substeps-nav').forEach(nav => {
        const hasScrollbar = nav.scrollWidth > nav.clientWidth;
        
        // Get the left and right scroll indicators
        const leftIndicator = nav.querySelector('.nav-scroll-left');
        const rightIndicator = nav.querySelector('.nav-scroll-right');
        
        // Show/hide indicators based on presence of scrollbar
        if (hasScrollbar) {
            if (leftIndicator) leftIndicator.style.display = 'flex';
            if (rightIndicator) rightIndicator.style.display = 'flex';
        } else {
            if (leftIndicator) leftIndicator.style.display = 'none';
            if (rightIndicator) rightIndicator.style.display = 'none';
        }
    });
}

// Switch to a specific substep
function switchSubstep(mainStep, subStep) {
    console.log('Switching to substep', mainStep, subStep);
    
    // Update state
    appState.currentMainStep = mainStep;
    appState.currentSubStep = subStep;
    
    // Ensure main step is expanded
    const mainStepElement = document.getElementById(`mainStep${mainStep}`);
    const mainStepContent = document.getElementById(`mainStepContent${mainStep}`);
    
    if (!mainStepElement || !mainStepContent) {
        console.error(`Could not find main step ${mainStep} elements`);
        return;
    }
    
    if (!mainStepElement.classList.contains('expanded')) {
        mainStepElement.classList.add('expanded');
        mainStepContent.style.height = 'auto';
        appState.mainStepExpanded[mainStep - 1] = true;
    }
    
    // Update substep tabs
    document.querySelectorAll('.substep-tab').forEach(tab => {
        if (tab.getAttribute('data-step') == mainStep && tab.getAttribute('data-substep') == subStep) {
            tab.classList.add('active');
            // Make sure the active tab is visible (scroll to it if necessary)
            const nav = tab.closest('.substeps-nav');
            if (nav) {
                const tabRect = tab.getBoundingClientRect();
                const navRect = nav.getBoundingClientRect();
                
                // Check if tab is not fully visible
                if (tabRect.left < navRect.left || tabRect.right > navRect.right) {
                    tab.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
                }
            }
        } else {
            tab.classList.remove('active');
        }
    });
    
        // Update substep content
    document.querySelectorAll('.substep-content').forEach(content => {
        if (content.getAttribute('data-step') == mainStep && content.getAttribute('data-substep') == subStep) {
            content.classList.add('active');
        } else {
            content.classList.remove('active');
        }
    });
    
    // Prepare content for specific substeps - Step 1
    if (mainStep === 1) {
        if (subStep === 'B') {
            prepareLOTypesSubstep();
        } else if (subStep === 'C') {
            prepareMisconceptionsSubstep();
        } else if (subStep === 'D') {
            preparePriorKnowledgeSubstep();
        } else if (subStep === 'E') {
            prepareReviewSubstep();
        }
    }
    
    // Prepare content for specific substeps - Step 1
    if (mainStep === 1) {
        if (subStep === 'B') {
            prepareLOTypesSubstep();
        } else if (subStep === 'C') {
            prepareMisconceptionsSubstep();
        } else if (subStep === 'D') {
            preparePriorKnowledgeSubstep();
        } else if (subStep === 'E') {
            prepareReviewSubstep();
        }
    }
    
    // Prepare content for specific substeps - Step 2
    if (mainStep === 2) {
        if (subStep === 'A') {
            prepareFrameworksSubstep();
        } else if (subStep === 'B') {
            prepareExamTechniquesSubstep();
        } else if (subStep === 'C') {
            prepareLessonStructureSubstep();
        } else if (subStep === 'D') {
            preparePracticalRequirementsSubstep();
        } else if (subStep === 'E') {
            prepareFrayerModelSubstep();
        } else if (subStep === 'F') {
            prepareStep2ReviewSubstep();
        }
    }
    
	// Prepare content for specific substeps - Step 3
	if (mainStep === 3) {
		if (subStep === 'A') {
			prepareRetrievalPracticeSubstep();
		} else if (subStep === 'B') {
			prepareTeachingInputSubstep();
		} else if (subStep === 'C') {
			prepareFormativeAssessmentSubstep();
		} else if (subStep === 'D') {
			prepareSlideReviewSubstep();
		}
	}
	
	// Prepare content for specific substeps - Step 4
    if (mainStep === 4) {
        if (subStep === 'A') {
            prepareReferenceMaterialsSubstep();
        } else if (subStep === 'B') {
            prepareRetrievalWorksheetSubstep();
        } else if (subStep === 'C') {
            prepareScaleQuestionsSubstep();
        } else if (subStep === 'D') {
            prepareApplicationQuestionsSubstep();
        } else if (subStep === 'E') {
            prepareExamTechniqueQuestionsSubstep();
        } else if (subStep === 'F') {
            prepareExamStyleQuestionsSubstep();
        } else if (subStep === 'G') {
            prepareWorksheetFinalizationSubstep();
        }
    }
	
    // Scroll to top of the main step
    mainStepElement.scrollIntoView({ behavior: 'smooth' });
    
    // Check if we need to show scroll indicators
    checkSubstepNavScroll();
}

// Update step indicators
function updateStepIndicators() {
    // Update main step status
    document.querySelectorAll('.main-step-status').forEach((statusElement, index) => {
        const stepNumber = index + 1;
        
        if (stepNumber < appState.currentMainStep) {
            statusElement.className = 'main-step-status status-completed';
            statusElement.textContent = 'Completed';
        } else if (stepNumber === appState.currentMainStep) {
            statusElement.className = 'main-step-status status-in-progress';
            statusElement.textContent = 'In Progress';
        } else {
            statusElement.className = 'main-step-status status-not-started';
            statusElement.textContent = 'Not Started';
        }
    });
}

// Prepare LO Types Substep
function prepareLOTypesSubstep() {
    // Display the current learning objectives
    displayLOTypesSubstepSummary();
}

// Prepare Misconceptions Substep
function prepareMisconceptionsSubstep() {
    // Display the current learning objectives and types
    displayMisconceptionsSubstepSummary();
}

// Prepare Prior Knowledge Substep
function preparePriorKnowledgeSubstep() {
    // Display the current learning objectives and misconceptions
    displayPriorKnowledgeSubstepSummary();
}

// Prepare Review Substep
function prepareReviewSubstep() {
    // Display all components for review
    updateStep1Review();
}

// Finish Step 1 and move to Step 2
function finishStep1() {
    // Make sure we have all the needed data
    if (!appState.responseTags.learningObjectives || !appState.responseTags.loTypes || 
        !appState.responseTags.misconceptions || !appState.responseTags.priorKnowledge) {
        alert('Please complete all substeps before continuing to Step 2');
        return;
    }
    
    // Update main step status
    appState.currentMainStep = 2;
    appState.currentSubStep = 'A';
    updateStepIndicators();
    
    // Update Step 1 status
    document.querySelector('.main-step-1 .main-step-status').className = 'main-step-status status-completed';
    document.querySelector('.main-step-1 .main-step-status').textContent = 'Completed';
    
    // Update Step 2 status
    document.querySelector('.main-step-2 .main-step-status').className = 'main-step-status status-in-progress';
    document.querySelector('.main-step-2 .main-step-status').textContent = 'In Progress';
    
    // Initialize Step 2A content
    initializeStep2();
    
    // Switch to Step 2A
    switchSubstep(2, 'A');
}

// Finish Step 2 and move to Step 3
function finishStep2() {
    // Update main step status
    appState.currentMainStep = 3;
    appState.currentSubStep = 'A';
    updateStepIndicators();
    
    // Update Step 2 status
    document.querySelector('.main-step-2 .main-step-status').className = 'main-step-status status-completed';
    document.querySelector('.main-step-2 .main-step-status').textContent = 'Completed';
    
    // Update Step 3 status
    document.querySelector('.main-step-3 .main-step-status').className = 'main-step-status status-in-progress';
    document.querySelector('.main-step-3 .main-step-status').textContent = 'In Progress';
    
    // Initialize Step 3 content (placeholder for now)
    const step3Content = document.getElementById('mainStepContent3');
    
    step3Content.innerHTML = `
    <div class="main-step-inner">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Slide Generation</h3>
            </div>
            <div class="alert alert-success">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>
                <div>
                    <p><strong>Step 2 completed successfully!</strong></p>
                    <p>You have now defined your teaching approach. Step 3 (Slide Generation) will be available in the next version of the application.</p>
                </div>
            </div>
        </div>
    </div>
    `;
    
    // Toggle to show Step 3
    if (!appState.mainStepExpanded[2]) {
        toggleMainStep(3);
    }
    
    // Scroll to Step 3
    document.getElementById('mainStep3').scrollIntoView({ behavior: 'smooth' });
// Prepare Retrieval Practice Substep
function prepareRetrievalPracticeSubstep() {
    initializeStep3A();
}

// Prepare Teaching Input Substep
function prepareTeachingInputSubstep() {
    initializeStep3B();
}

// Prepare Formative Assessment Substep
function prepareFormativeAssessmentSubstep() {
    initializeStep3C();
}

// Prepare Slide Review Substep
function prepareSlideReviewSubstep() {
    initializeStep3D();
}

// Initialize Step 3
function initializeStep3() {
    // Set up the substep navigation and content
    const step3Content = document.getElementById('mainStepContent3');
    
    step3Content.innerHTML = `
    <div class="main-step-inner">
        <!-- Substeps Navigation -->
        <div class="substeps-nav">
            <div class="nav-scroll-indicator nav-scroll-left" onclick="scrollSubstepNav('left')">â—€</div>
            <div class="substep-tab active" data-step="3" data-substep="A" onclick="switchSubstep(3, 'A')">3A: Retrieval Practice</div>
            <div class="substep-tab" data-step="3" data-substep="B" onclick="switchSubstep(3, 'B')">3B: Teaching Input</div>
            <div class="substep-tab" data-step="3" data-substep="C" onclick="switchSubstep(3, 'C')">3C: Formative Assessment</div>
            <div class="substep-tab" data-step="3" data-substep="D" onclick="switchSubstep(3, 'D')">3D: Review & Edit</div>
            <div class="nav-scroll-indicator nav-scroll-right" onclick="scrollSubstepNav('right')">â–¶</div>
        </div>
        
        <!-- Substep 3A: Retrieval Practice Slides -->
        <div class="substep-content active" data-step="3" data-substep="A">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Retrieval Practice Slides</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Create retrieval practice questions based on the prior knowledge needed for this lesson. These will be used at the beginning of the lesson to activate students' existing knowledge.
                    </div>
                </div>
                
                <!-- Prior Knowledge Summary for Retrieval -->
                <div id="priorKnowledgeForRetrieval" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <p>Please complete Step 1D first to see prior knowledge here.</p>
                </div>
                
                <div class="prompt-response-container">
                    <div class="prompt-area">
                        <div class="area-header">
                            <h4 class="area-title">Generate Retrieval Questions</h4>
                            <button id="generateRetrievalPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
                        </div>
                        <div class="textarea-container">
                            <textarea id="retrievalPromptTextarea" class="prompt-textarea" readonly placeholder="First complete Step 1D to generate this prompt..."></textarea>
                            <button id="copyRetrievalPromptBtn" class="copy-btn">Copy</button>
                        </div>
                    </div>
                    
                    <div class="response-area">
                        <div class="area-header">
                            <h4 class="area-title">Claude's Response</h4>
                            <button id="previewRetrievalResponseBtn" class="btn btn-outline btn-sm">Preview</button>
                        </div>
                        <div class="textarea-container">
                            <textarea id="retrievalResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
                        </div>
                        <p class="response-instructions">Paste Claude's full response including all XML tags</p>
                        
                        <div id="retrievalPreview" class="response-preview" style="display: none;">
                            <div class="response-tabs">
                                <div class="response-tab active" data-tab="retrievalFormatted">Formatted</div>
                                <div class="response-tab" data-tab="retrievalTagged">Tagged</div>
                            </div>
                            <div class="response-display">
                                <div class="response-content active" id="retrievalFormattedResponse"></div>
                                <div class="response-content" id="retrievalTaggedResponse"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Retrieval Questions with Edit Feature -->
                <div id="retrievalEditContainer" style="margin-top: 2rem; display: none;">
                    <div class="edit-header">
                        <h4>Retrieval Practice Questions</h4>
                        <button class="btn btn-outline" id="editRetrievalQuestionsBtn">Edit Questions</button>
                    </div>
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(2, 'F')">Back to Step 2</button>
                    <div class="nav-buttons-right">
                        <button id="continueToTeachingInputBtn" class="btn btn-primary" disabled>Continue to Teaching Input</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 3B: Teaching Input Slides -->
        <div class="substep-content" data-step="3" data-substep="B">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Teaching Input Slides</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Create teaching input slides that follow the frameworks chosen in Step 2. These slides will form the main content of your lesson.
                    </div>
                </div>
                
                <!-- Learning Objectives Summary for Teaching -->
                <div id="learningObjectivesForTeaching" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <p>Please complete previous steps first to see learning objectives here.</p>
                </div>
                
                <div class="prompt-response-container">
                    <div class="prompt-area">
                        <div class="area-header">
                            <h4 class="area-title">Generate Teaching Slides</h4>
                            <button id="generateTeachingInputPromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
                        </div>
                        <div class="textarea-container">
                            <textarea id="teachingInputPromptTextarea" class="prompt-textarea" readonly placeholder="First complete previous steps to generate this prompt..."></textarea>
                            <button id="copyTeachingInputPromptBtn" class="copy-btn">Copy</button>
                        </div>
                    </div>
                    
                    <div class="response-area">
                        <div class="area-header">
                            <h4 class="area-title">Claude's Response</h4>
                            <button id="previewTeachingInputResponseBtn" class="btn btn-outline btn-sm">Preview</button>
                        </div>
                        <div class="textarea-container">
                            <textarea id="teachingInputResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
                        </div>
                        <p class="response-instructions">Paste Claude's full response including all XML tags</p>
                        
                        <div id="teachingInputPreview" class="response-preview" style="display: none;">
                            <div class="response-tabs">
                                <div class="response-tab active" data-tab="teachingInputFormatted">Formatted</div>
                                <div class="response-tab" data-tab="teachingInputTagged">Tagged</div>
                            </div>
                            <div class="response-display">
                                <div class="response-content active" id="teachingInputFormattedResponse"></div>
                                <div class="response-content" id="teachingInputTaggedResponse"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Teaching Slides with Edit Feature -->
                <div id="teachingInputEditContainer" style="margin-top: 2rem; display: none;">
                    <div class="edit-header">
                        <h4>Teaching Input Slides</h4>
                        <button class="btn btn-outline" id="editTeachingSlidesBtn">Edit Slides</button>
                    </div>
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(3, 'A')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="continueToFormativeAssessmentBtn" class="btn btn-primary" disabled>Continue to Formative Assessment</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 3C: Formative Assessment Slides -->
        <div class="substep-content" data-step="3" data-substep="C">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Formative Assessment Slides</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Create formative assessment questions to check student understanding during or after teaching. These questions should align with the learning objectives and address common misconceptions.
                    </div>
                </div>
                
                <!-- Misconceptions Summary for Formative Assessment -->
                <div id="misconceptionsForFormative" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <p>Please complete previous steps first to see misconceptions here.</p>
                </div>
                
                <div class="prompt-response-container">
                    <div class="prompt-area">
                        <div class="area-header">
                            <h4 class="area-title">Generate Assessment Questions</h4>
                            <button id="generateFormativePromptBtn" class="btn btn-secondary btn-sm">Generate Prompt</button>
                        </div>
                        <div class="textarea-container">
                            <textarea id="formativePromptTextarea" class="prompt-textarea" readonly placeholder="First complete previous steps to generate this prompt..."></textarea>
                            <button id="copyFormativePromptBtn" class="copy-btn">Copy</button>
                        </div>
                    </div>
                    
                    <div class="response-area">
                        <div class="area-header">
                            <h4 class="area-title">Claude's Response</h4>
                            <button id="previewFormativeResponseBtn" class="btn btn-outline btn-sm">Preview</button>
                        </div>
                        <div class="textarea-container">
                            <textarea id="formativeResponseTextarea" class="response-textarea" placeholder="Paste Claude's response here..."></textarea>
                        </div>
                        <p class="response-instructions">Paste Claude's full response including all XML tags</p>
                        
                        <div id="formativePreview" class="response-preview" style="display: none;">
                            <div class="response-tabs">
                                <div class="response-tab active" data-tab="formativeFormatted">Formatted</div>
                                <div class="response-tab" data-tab="formativeTagged">Tagged</div>
                            </div>
                            <div class="response-display">
                                <div class="response-content active" id="formativeFormattedResponse"></div>
                                <div class="response-content" id="formativeTaggedResponse"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Formative Questions with Edit Feature -->
                <div id="formativeEditContainer" style="margin-top: 2rem; display: none;">
                    <div class="edit-header">
                        <h4>Formative Assessment Questions</h4>
                        <button class="btn btn-outline" id="editFormativeQuestionsBtn">Edit Questions</button>
                    </div>
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(3, 'B')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="continueToSlideReviewBtn" class="btn btn-primary" disabled>Continue to Review</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 3D: Review & Edit -->
        <div class="substep-content" data-step="3" data-substep="D">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Review Slide Components</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Review all slide components and ensure they form a cohesive lesson. You can make any necessary edits before finalizing your slides.
                    </div>
                </div>
                
                <div id="slidesReview">
                    <div class="review-section">
                        <h4>Retrieval Practice Slides</h4>
                        <div class="response-display" id="retrievalSlidesReview">
                            <p>Complete Step 3A to see retrieval practice slides.</p>
                        </div>
                    </div>
                    
                    <div class="review-section">
                        <h4>Teaching Input Slides</h4>
                        <div class="response-display" id="teachingSlidesReview">
                            <p>Complete Step 3B to see teaching input slides.</p>
                        </div>
                    </div>
                    
                    <div class="review-section">
                        <h4>Formative Assessment Slides</h4>
                        <div class="response-display" id="formativeSlidesReview">
                            <p>Complete Step 3C to see formative assessment slides.</p>
                        </div>
                    </div>
                    
                    <div class="review-section">
                        <h4>Complete Slide Sequence</h4>
                        <div class="response-display" id="slideSequenceReview">
                            <p>Complete all of Step 3 to see the slide sequence.</p>
                        </div>
                    </div>
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(3, 'C')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="finishStep3Btn" class="btn btn-secondary" disabled>Complete & Continue to Step 4</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    `;
    
    // Initialize first substep
    prepareStep3A();
}

// Finish Step 3 and move to Step 4
function finishStep3() {
    // Make sure we have all the needed data
    if (!appState.responseTags.retrievalQuestions || !appState.responseTags.teachingSlides || 
        !appState.responseTags.formativeAssessment) {
        alert('Please complete all substeps before continuing to Step 4');
        return;
    }
    
    // Update main step status
    appState.currentMainStep = 4;
    appState.currentSubStep = 'A';
    updateStepIndicators();
    
    // Update Step 3 status
    document.querySelector('.main-step-3 .main-step-status').className = 'main-step-status status-completed';
    document.querySelector('.main-step-3 .main-step-status').textContent = 'Completed';
    
    // Update Step 4 status
    document.querySelector('.main-step-4 .main-step-status').className = 'main-step-status status-in-progress';
    document.querySelector('.main-step-4 .main-step-status').textContent = 'In Progress';
    
    // Initialize Step 4 content (placeholder for now)
    const step4Content = document.getElementById('mainStepContent4');
    
    step4Content.innerHTML = `
    <div class="main-step-inner">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Worksheet Generation</h3>
            </div>
            <div class="alert alert-success">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>
                <div>
                    <p><strong>Step 3 completed successfully!</strong></p>
                    <p>You have now generated all slide content for your lesson. Step 4 (Worksheet Generation) will be available in the next version of the application.</p>
                </div>
            </div>
        </div>
    </div>
    `;
    
    // Toggle to show Step 4
    if (!appState.mainStepExpanded[3]) {
        toggleMainStep(4);
    }
    
    // Scroll to Step 4
    document.getElementById('mainStep4').scrollIntoView({ behavior: 'smooth' });
	
// Finish Step 4 and move to Step 5
function finishStep4() {
    // Make sure we have all the needed data
    if (!appState.responseTags.referenceMaterials || !appState.responseTags.retrievalWorksheet || 
        !appState.responseTags.scaleQuestions || !appState.responseTags.applicationQuestions) {
        alert('Please complete all substeps before continuing to Step 5');
        return;
    }
    
    // Update main step status
    appState.currentMainStep = 5;
    appState.currentSubStep = 'A';
    updateStepIndicators();
    
    // Update Step 4 status
    document.querySelector('.main-step-4 .main-step-status').className = 'main-step-status status-completed';
    document.querySelector('.main-step-4 .main-step-status').textContent = 'Completed';
    
    // Update Step 5 status
    document.querySelector('.main-step-5 .main-step-status').className = 'main-step-status status-in-progress';
    document.querySelector('.main-step-5 .main-step-status').textContent = 'In Progress';
    
    // Toggle to show Step 5
    if (!appState.mainStepExpanded[4]) {
        toggleMainStep(5);
    }
    
    // Scroll to Step 5
    document.getElementById('mainStep5').scrollIntoView({ behavior: 'smooth' });
}

// Update slide count display
function updateSlideCountDisplay() {
    // Count retrieval slides
    let retrievalCount = 0;
    if (appState.slides.retrieval && appState.slides.retrieval.questions) {
        retrievalCount = appState.slides.retrieval.questions.length;
    }
    
    // Count teaching slides
    let teachingCount = 0;
    for (let loNum = 1; loNum <= 3; loNum++) {
        if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loKey = 'lo' + loNum;
        if (appState.slides.teaching && appState.slides.teaching[loKey] && appState.slides.teaching[loKey].slides) {
            teachingCount += appState.slides.teaching[loKey].slides.length;
        }
    }
    
    // Count formative assessment slides
    let formativeCount = 0;
    for (let loNum = 1; loNum <= 3; loNum++) {
        if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loKey = 'lo' + loNum;
        if (appState.slides.formative && appState.slides.formative[loKey] && appState.slides.formative[loKey].questions) {
            formativeCount += appState.slides.formative[loKey].questions.length;
        }
    }
    
    // Calculate total (including title, section headers, and conclusion)
    const sectionCount = 2 + (appState.learningObjectives.lo3.exists ? 3 : 2); // Retrieval + LOs
    const totalCount = 1 + retrievalCount + sectionCount + teachingCount + formativeCount + 1; // Title + Content + Conclusion
    
    // Update the display
    document.getElementById('retrievalSlideCount').textContent = retrievalCount;
    document.getElementById('teachingSlideCount').textContent = teachingCount;
    document.getElementById('formativeSlideCount').textContent = formativeCount;
    document.getElementById('totalSlideCount').textContent = totalCount;
}

// Update worksheet summaries
function updateWorksheetSummaries() {
    const container = document.getElementById('worksheetsPreviewContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    for (let i = 1; i <= appState.worksheets.count; i++) {
        const worksheetKey = `worksheet${i}`;
        
        // Count sections and questions
        let sectionCount = 0;
        let questionCount = 0;
        
        // Reference materials
        if (appState.worksheets.reference && shouldIncludeSection(i, 'reference')) {
            sectionCount++;
        }
        
        // Retrieval questions
        if (appState.worksheets.retrieval && appState.worksheets.retrieval[worksheetKey] && appState.worksheets.retrieval[worksheetKey].length > 0) {
            sectionCount++;
            questionCount += appState.worksheets.retrieval[worksheetKey].length;
        }
        
        // SCALE, Application, Exam Technique, and Exam Style questions
        for (let loNum = 1; loNum <= 3; loNum++) {
            if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
            
            const loKey = 'lo' + loNum;
            // Check if this LO is allocated to this worksheet
            if (appState.lessonStructure.worksheetAllocation[loKey] != i) continue;
            
            // SCALE questions
            if (appState.worksheets.scale && appState.worksheets.scale[worksheetKey] && appState.worksheets.scale[worksheetKey][loKey]) {
                const selectedQuestions = appState.worksheets.scale[worksheetKey][loKey].filter(q => q.selected);
                if (selectedQuestions.length > 0) {
                    sectionCount++;
                    questionCount += selectedQuestions.length;
                }
            }
            
            // Application questions
            if (appState.worksheets.application && appState.worksheets.application[worksheetKey] && appState.worksheets.application[worksheetKey][loKey] && appState.worksheets.application[worksheetKey][loKey].length > 0) {
                sectionCount++;
                questionCount += appState.worksheets.application[worksheetKey][loKey].length;
            }
            
            // Exam Technique questions
            if (appState.worksheets.examTechnique && appState.worksheets.examTechnique[worksheetKey] && appState.worksheets.examTechnique[worksheetKey][loKey] && appState.worksheets.examTechnique[worksheetKey][loKey].length > 0) {
                sectionCount++;
                questionCount += appState.worksheets.examTechnique[worksheetKey][loKey].length;
            }
            
            // Exam Style questions
            if (appState.worksheets.examStyle && appState.worksheets.examStyle[worksheetKey] && appState.worksheets.examStyle[worksheetKey][loKey] && appState.worksheets.examStyle[worksheetKey][loKey].length > 0) {
                sectionCount++;
                questionCount += appState.worksheets.examStyle[worksheetKey][loKey].length;
            }
        }
        
        // Create worksheet summary
        const worksheetSummary = document.createElement('div');
        worksheetSummary.className = 'worksheet-summary';
        worksheetSummary.innerHTML = `
            <h5>Worksheet ${i}</h5>
            <p><strong>Sections:</strong> ${sectionCount}</p>
            <p><strong>Questions:</strong> ${questionCount}</p>
            <p><strong>Allocated LOs:</strong> ${getWorksheetLOsList(i)}</p>
        `;
        
        container.appendChild(worksheetSummary);
    }
}

// Get list of LOs allocated to a worksheet
function getWorksheetLOsList(worksheetNum) {
    const los = [];
    
    for (let loNum = 1; loNum <= 3; loNum++) {
        if (loNum === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loKey = 'lo' + loNum;
        if (appState.lessonStructure.worksheetAllocation[loKey] == worksheetNum) {
            los.push(loNum);
        }
    }
    
    return los.length > 0 ? los.join(', ') : 'None';
}

// Update package summary
function updatePackageSummary() {
    document.getElementById('packageLessonTitle').textContent = appState.lessonInfo.lessonTitle || '-';
    document.getElementById('packageSubject').textContent = appState.lessonInfo.subject || '-';
    document.getElementById('packageTopic').textContent = appState.lessonInfo.topic || '-';
    document.getElementById('packageProvider').textContent = appState.lessonInfo.provider || '-';
    document.getElementById('packageLevel').textContent = appState.lessonInfo.level || '-';
    
    // Slide count (reuse value from slide count display)
    document.getElementById('packageSlideCount').textContent = document.getElementById('totalSlideCount').textContent;
    
    // Worksheet count
    document.getElementById('packageWorksheetCount').textContent = appState.worksheets.count;
}
	
	// Set up the substep navigation and content for Step 4
    const step4Content = document.getElementById('mainStepContent4');
    
    step4Content.innerHTML = `
    <div class="main-step-inner">
        <!-- Substeps Navigation -->
        <div class="substeps-nav">
            <div class="nav-scroll-indicator nav-scroll-left" onclick="scrollSubstepNav('left')">â—€</div>
            <div class="substep-tab active" data-step="4" data-substep="A" onclick="switchSubstep(4, 'A')">4A: Reference Materials</div>
            <div class="substep-tab" data-step="4" data-substep="B" onclick="switchSubstep(4, 'B')">4B: Prior Knowledge Retrieval</div>
            <div class="substep-tab" data-step="4" data-substep="C" onclick="switchSubstep(4, 'C')">4C: SCALE Questions</div>
            <div class="substep-tab" data-step="4" data-substep="D" onclick="switchSubstep(4, 'D')">4D: Application Questions</div>
            <div class="substep-tab" data-step="4" data-substep="E" onclick="switchSubstep(4, 'E')">4E: Exam Technique Questions</div>
            <div class="substep-tab" data-step="4" data-substep="F" onclick="switchSubstep(4, 'F')">4F: Exam Style Questions</div>
            <div class="substep-tab" data-step="4" data-substep="G" onclick="switchSubstep(4, 'G')">4G: Worksheet Finalization</div>
            <div class="nav-scroll-indicator nav-scroll-right" onclick="scrollSubstepNav('right')">â–¶</div>
        </div>
        
        <!-- Substep content will be loaded dynamically -->
        <div id="step4Content">
            <p>Loading Step 4 content...</p>
        </div>
    </div>
    `;
    
    // Initialize Step 4
    initializeStep4();
	
// Prepare Step 4A substep
function prepareReferenceMaterialsSubstep() {
    initializeStep4A();
}

// Prepare Step 4B substep
function prepareRetrievalWorksheetSubstep() {
    initializeStep4B();
}

// Prepare Step 4C substep
function prepareScaleQuestionsSubstep() {
    initializeStep4C();
}

// Prepare Step 4D substep
function prepareApplicationQuestionsSubstep() {
    initializeStep4D();
}

// Prepare Step 4E substep
function prepareExamTechniqueQuestionsSubstep() {
    initializeStep4E();
}

// Prepare Step 4F substep
function prepareExamStyleQuestionsSubstep() {
    initializeStep4F();
}

// Prepare Step 4G substep
function prepareWorksheetFinalizationSubstep() {
    initializeStep4G();
}
}


ðŸ“„ FILE: state.js
==================================================
// APPLICATION STATE
const appState = {
    // Navigation state
    currentMainStep: 1,
    currentSubStep: 'A',
    mainStepExpanded: [true, false, false, false],
    
    // Form data
    lessonInfo: {
        provider: '',
        course: '',
        level: '',
        ability: '',
        subject: '',
        topic: '',
        lessonNumber: '',
        lessonTitle: '',
        description: ''
    },
    
    // Learning Objectives state
    learningObjectives: {
        lo1: {
            title: '',
            description: '',
            hasPractical: false
        },
        lo2: {
            title: '',
            description: '',
            hasPractical: false
        },
        lo3: {
            title: '',
            description: '',
            hasPractical: false,
            exists: false
        },
        count: 0
    },
    
    // Learning Objective Types
    loTypes: {
        lo1: {
            aoCategory: '',
            specificType: '',
            justification: ''
        },
        lo2: {
            aoCategory: '',
            specificType: '',
            justification: ''
        },
        lo3: {
            aoCategory: '',
            specificType: '',
            justification: ''
        }
    },
    
    // Misconceptions
    misconceptions: {
        lo1: [],
        lo2: [],
        lo3: []
    },
    
    // Prior Knowledge
    priorKnowledge: {
        lo1: [],
        lo2: [],
        lo3: []
    },
    
    // Step 2: Teaching Approach
    // Teaching Frameworks
    frameworks: {
        lo1: {
            primaryFramework: 'CER',
            bltUsed: false,
            bltLevels: {
                remember: false,
                understand: false,
                apply: false,
                analyze: false,
                evaluate: false,
                create: false
            }
        },
        lo2: {
            primaryFramework: 'POE',
            bltUsed: false,
            bltLevels: {
                remember: false,
                understand: false,
                apply: false,
                analyze: false,
                evaluate: false,
                create: false
            }
        },
        lo3: {
            primaryFramework: 'SEEC',
            bltUsed: false,
            bltLevels: {
                remember: false,
                understand: false,
                apply: false,
                analyze: false,
                evaluate: false,
                create: false
            }
        }
    },
    
    // Exam Techniques
    examTechniques: {
        lo1: {
            BLT: false,
            EVERY: false,
            MEMES: false,
            GRAPH: false,
            notes: ''
        },
        lo2: {
            BLT: false,
            EVERY: false,
            MEMES: false,
            GRAPH: false,
            notes: ''
        },
        lo3: {
            BLT: false,
            EVERY: false,
            MEMES: false,
            GRAPH: false,
            notes: ''
        }
    },
    
    // Lesson Structure
    lessonStructure: {
        retrieval: {
            questions: ['', '', '']
        },
        loSequence: [1, 2, 3], // Order of teaching LOs
        assessmentType: 'comprehensive', // 'comprehensive' or 'focused'
        worksheetAllocation: {
            lo1: 1, // Worksheet number
            lo2: 1,
            lo3: 1
        }
    },
    
    // Practical Requirements
    practicalRequirements: {
        lo1: {
            title: '',
            aim: '',
            variables: [],  // {name: '', type: 'independent/dependent/control'}
            equipment: [],
            steps: [],
            safety: ''
        },
        lo2: {
            title: '',
            aim: '',
            variables: [],
            equipment: [],
            steps: [],
            safety: ''
        },
        lo3: {
            title: '',
            aim: '',
            variables: [],
            equipment: [],
            steps: [],
            safety: ''
        }
    },
    
    // Frayer Models
    frayerModels: {
        lo1: {
            type: '',       // equation, quantity, structure, substance, process, law, classification
            term: '',
            definition: '',
            examples: [],
            nonExamples: [],
            characteristics: ''
        },
        lo2: {
            type: '',
            term: '',
            definition: '',
            examples: [],
            nonExamples: [],
            characteristics: ''
        },
        lo3: {
            type: '',
            term: '',
            definition: '',
            examples: [],
            nonExamples: [],
            characteristics: ''
        }
    },
	
	// Step 3: Slide Generation
    slides: {
        // Retrieval Practice Slides
        retrieval: {
            questions: [],   // {text, type, answer, distractors[], explanation, priorKnowledgeLink}
            layout: 'standard'  // standard, grid, matching
        },
        
        // Teaching Input Slides
        teaching: {
            // Organized by learning objective
            // lo1: { title: '', slides: [{type, title, content, visualElements, notes}] }
        },
        
        // Formative Assessment Slides
        formative: {
            // Organized by learning objective
            // lo1: { title: '', questions: [{text, type, marks, answer, markingGuidelines[], commonErrors[], targetedMisconception}] }
        }
    },
    
    // Edit state
    editState: {
        currentLO: 1,
        tempMisconceptions: [],
        tempPriorKnowledge: [],
        tempVariables: [],
        tempEquipment: [],
        tempSteps: [],
        tempExamples: [],
        tempNonExamples: []
    },
    
    // Responses from Claude
    responses: {
        // Step 1: Lesson Foundations
        overview: '',
        loTypes: '',
        misconceptions: '',
        priorKnowledge: '',
        
        // Step 2: Teaching Approach
        frameworks: '',
        examTechniques: '',
        lessonStructure: '',
        practicalRequirements: '',
        frayerModels: ''
		
		// Step 3: Slide Generation
        retrieval: '',
        teachingInput: '',
        formative: '',
		
		// Step 4: Worksheet Generation
        referenceMaterials: '',
        retrievalWorksheet: '',
        scaleQuestions: '',
        applicationQuestions: '',
        examTechniqueQuestions: '',
        examStyleQuestions: '',
        worksheetFinalization: '',
    },
    
	// Worksheet Generation state
    worksheets: {
        count: 1,
        current: 1,
        
        // Reference Materials
        reference: {
            definitions: [],
            formulas: [],
            diagrams: [],
            examples: []
        },
        
        // Retrieval Worksheet Questions
        retrieval: {
            worksheet1: [],
            worksheet2: []
        },
        
        // SCALE Questions
        scale: {
            worksheet1: {
                lo1: [],
                lo2: [],
                lo3: []
            },
            worksheet2: {
                lo1: [],
                lo2: [],
                lo3: []
            }
        },
        
        // Application Questions
        application: {
            worksheet1: {
                lo1: [],
                lo2: [],
                lo3: []
            },
            worksheet2: {
                lo1: [],
                lo2: [],
                lo3: []
            }
        },
        
        // Exam Technique Questions
        examTechnique: {
            worksheet1: {
                lo1: [],
                lo2: [],
                lo3: []
            },
            worksheet2: {
                lo1: [],
                lo2: [],
                lo3: []
            }
        },
        
        // Exam Style Questions
        examStyle: {
            worksheet1: {
                lo1: [],
                lo2: [],
                lo3: []
            },
            worksheet2: {
                lo1: [],
                lo2: [],
                lo3: []
            }
        },
        
        // Worksheet Finalization
        finalization: {
            worksheet1: null,
            worksheet2: null
        },
        
        // Worksheet Preview
        preview: {
            worksheet1: {
                description: '',
                sectionOrder: [],
                formatNotes: ''
            },
            worksheet2: {
                description: '',
                sectionOrder: [],
                formatNotes: ''
            }
        }
    },
	
	export: {
		slides: {
			includeNotes: true,
			includeVisualPlaceholders: true,
			slideTemplate: 'default'
		},
		worksheets: {
			includeAnswers: true,
			includeMarkingGuidelines: true,
			separateAnswerSheet: true
		},
		autoSave: {
			enabled: true,
			interval: 5 // minutes
		}
	},
	
    // Extracted XML tags from responses
    responseTags: {
        // Step 1: Lesson Foundations
        lessonInfo: '',
        learningObjectives: '',
        loTypes: '',
        misconceptions: '',
        priorKnowledge: '',
        
        // Step 2: Teaching Approach
        frameworks: '',
        examTechniques: '',
        lessonStructure: '',
        practicalRequirements: '',
        frayerModels: ''
		
		// Step 3: Slide Generation
        retrievalQuestions: '',
        teachingSlides: '',
        formativeAssessment: '',
		
		// Step 4: Worksheet Generation
        referenceMaterials: '',
        retrievalWorksheet: '',
        scaleQuestions: '',
        applicationQuestions: '',
        examTechniqueQuestions: '',
        examStyleQuestions: '',
        worksheetFinalization: ''
    }
};


ðŸ“„ FILE: step1.js
==================================================
// STEP 1A: OVERVIEW FUNCTIONS

// Generate overview prompt
function generateOverviewPrompt() {
    // Basic form validation
    const requiredFields = ['provider', 'course', 'level', 'ability', 'subject', 'topic', 'lessonNumber', 'lessonTitle'];
    let missingFields = [];
    
    requiredFields.forEach(field => {
        if (!appState.lessonInfo[field]) {
            missingFields.push(field);
        }
    });
    
    if (missingFields.length > 0) {
        alert(`Please fill in the following fields: ${missingFields.join(', ')}`);
        return;
    }
    
    const prompt = `Create an engaging GCSE science lesson outline on ${appState.lessonInfo.topic} for ${appState.lessonInfo.level} ${appState.lessonInfo.subject} students of ${appState.lessonInfo.ability} ability level.

FORMAT YOUR RESPONSE USING THIS EXACT XML STRUCTURE:

<LessonInfo>
Subject: ${appState.lessonInfo.subject}
Topic: ${appState.lessonInfo.topic}
ExamBoard: ${appState.lessonInfo.provider}
Course: ${appState.lessonInfo.course}
Level: ${appState.lessonInfo.level}
Ability: ${appState.lessonInfo.ability}
LessonNumber: ${appState.lessonInfo.lessonNumber}
LessonTitle: ${appState.lessonInfo.lessonTitle}
</LessonInfo>

<LearningObjectives>
<LO1>
<Title>[First learning objective title - make this exam-focused but engaging]</Title>
<Description>[One paragraph describing this learning objective and how it will be taught in an engaging way, including any live demonstrations or models if appropriate]</Description>
</LO1>

<LO2>
<Title>[Second learning objective title - make this exam-focused but engaging]</Title>
<Description>[One paragraph describing this learning objective and how it will be taught in an engaging way]</Description>
</LO2>

<!-- Include LO3 only if necessary for the topic -->
<LO3>
<Title>[Optional third learning objective title]</Title>
<Description>[One paragraph describing this learning objective and how it will be taught in an engaging way]</Description>
</LO3>
</LearningObjectives>

Your lesson outline must:
1. Include 2-3 clear, specific learning objectives aligned with the GCSE specification
2. Focus on exam technique while keeping students engaged
3. Suggest general approaches for teaching each objective (NOT detailed lesson activities)
4. Mention if a live demonstration or physical model would be appropriate (without detailed instructions)
5. Make abstract concepts tangible and memorable
6. Indicate in the descriptions if any of the learning objectives would benefit from a practical component
7. DO NOT include detailed worksheets, specific written tasks, or detailed practical descriptions

${appState.lessonInfo.description ? 'Additional information: ' + appState.lessonInfo.description : ''}

IMPORTANT: I need your response in two parts:
1. First, give me a clear, readable version of the response formatted for easy scanning
2. Then, provide the XML-tagged version exactly as specified above (this is what I'll use in subsequent steps)`;

    // Set prompt in textarea
    document.getElementById('overviewPromptTextarea').value = prompt;
}

// Handle overview response
function handleOverviewResponse(e) {
    const response = e.target.value;
    appState.responses.overview = response;
    
    // Extract XML content
    const lessonInfoMatch = extractXML(response, 'LessonInfo');
    const learningObjMatch = extractXML(response, 'LearningObjectives');
    
    if (lessonInfoMatch) {
        appState.responseTags.lessonInfo = lessonInfoMatch;
    }
    
    if (learningObjMatch) {
        appState.responseTags.learningObjectives = learningObjMatch;
        
        // Extract LO titles and descriptions
        extractLearningObjectives(learningObjMatch);
    }
    
    // Update button state
    document.getElementById('continueToLOTypesBtn').disabled = !(lessonInfoMatch && learningObjMatch);
}

// Extract learning objectives from XML
function extractLearningObjectives(xml) {
    // Extract LO1
    const lo1Match = xml.match(/<LO1>[\s\S]*?<Title>([\s\S]*?)<\/Title>[\s\S]*?<Description>([\s\S]*?)<\/Description>[\s\S]*?<\/LO1>/);
    if (lo1Match) {
        appState.learningObjectives.lo1.title = lo1Match[1].trim();
        appState.learningObjectives.lo1.description = lo1Match[2].trim();
        appState.learningObjectives.count = 1;
    }
    
    // Extract LO2
    const lo2Match = xml.match(/<LO2>[\s\S]*?<Title>([\s\S]*?)<\/Title>[\s\S]*?<Description>([\s\S]*?)<\/Description>[\s\S]*?<\/LO2>/);
    if (lo2Match) {
        appState.learningObjectives.lo2.title = lo2Match[1].trim();
        appState.learningObjectives.lo2.description = lo2Match[2].trim();
        appState.learningObjectives.count = 2;
    }
    
    // Extract LO3 if present
    const lo3Match = xml.match(/<LO3>[\s\S]*?<Title>([\s\S]*?)<\/Title>[\s\S]*?<Description>([\s\S]*?)<\/Description>[\s\S]*?<\/LO3>/);
    if (lo3Match) {
        appState.learningObjectives.lo3.title = lo3Match[1].trim();
        appState.learningObjectives.lo3.description = lo3Match[2].trim();
        appState.learningObjectives.lo3.exists = true;
        appState.learningObjectives.count = 3;
    }
}

// Preview overview response
function previewOverviewResponse() {
    if (!appState.responses.overview.trim()) {
        alert('Please paste Claude\'s response before previewing');
        return;
    }
    
    // Format the response for the formatted view
    const formattedResponseHtml = formatResponse(appState.responses.overview, 'overview');
    document.getElementById('overviewFormattedResponse').innerHTML = formattedResponseHtml;
    
    // Format the XML for the tagged view
    const taggedResponseHtml = formatXML(appState.responses.overview);
    document.getElementById('overviewTaggedResponse').innerHTML = taggedResponseHtml;
    
    // Show the preview
    document.getElementById('overviewPreview').style.display = 'block';
    
    // Show learning objectives section with practical detection
    displayLearningObjectives();
}

// Display learning objectives with practical detection options
function displayLearningObjectives() {
    // Set values in the learning objectives containers
    document.getElementById('lo1Title').textContent = appState.learningObjectives.lo1.title;
    document.getElementById('lo1Description').textContent = appState.learningObjectives.lo1.description;
    updateBadge('lo1Badge', appState.learningObjectives.lo1.hasPractical);
    
    document.getElementById('lo2Title').textContent = appState.learningObjectives.lo2.title;
    document.getElementById('lo2Description').textContent = appState.learningObjectives.lo2.description;
    updateBadge('lo2Badge', appState.learningObjectives.lo2.hasPractical);
    
    // Handle LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        document.getElementById('lo3Container').style.display = 'block';
        document.getElementById('lo3Title').textContent = appState.learningObjectives.lo3.title;
        document.getElementById('lo3Description').textContent = appState.learningObjectives.lo3.description;
        updateBadge('lo3Badge', appState.learningObjectives.lo3.hasPractical);
    } else {
        document.getElementById('lo3Container').style.display = 'none';
    }
    
    // Show the section
    document.getElementById('learningObjectivesSection').style.display = 'block';
}

// Update badge display
function updateBadge(badgeId, hasPractical) {
    const badge = document.getElementById(badgeId);
    if (badge) {
        if (hasPractical) {
            badge.textContent = 'Practical';
            badge.classList.add('badge-practical');
        } else {
            badge.textContent = 'Theory';
            badge.classList.remove('badge-practical');
        }
    }
}

// STEP 1B: LO TYPES FUNCTIONS

// Display the content summary for LO Types substep
function displayLOTypesSubstepSummary() {
    let html = '<h4>Learning Objectives</h4>';
    
    // LO1
    html += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1</span>
            <span id="summaryLo1Badge" class="lo-badge ${appState.learningObjectives.lo1.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo1.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo1.title}</strong></p>
        <p>${appState.learningObjectives.lo1.description}</p>
    </div>`;
    
    // LO2
    html += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2</span>
            <span id="summaryLo2Badge" class="lo-badge ${appState.learningObjectives.lo2.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo2.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo2.title}</strong></p>
        <p>${appState.learningObjectives.lo2.description}</p>
    </div>`;
    
    // LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        html += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3</span>
                <span id="summaryLo3Badge" class="lo-badge ${appState.learningObjectives.lo3.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo3.hasPractical ? 'Practical' : 'Theory'}</span>
            </div>
            <p><strong>${appState.learningObjectives.lo3.title}</strong></p>
            <p>${appState.learningObjectives.lo3.description}</p>
        </div>`;
    }
    
    document.getElementById('loBSummaryContent').innerHTML = html;
}

// Generate LO types prompt
function generateLOTypesPrompt() {
    if (!appState.responseTags.learningObjectives) {
        alert('Please complete the overview step first');
        return;
    }

    // Add information about practical components
    let practicalInfo = '\n\nPractical Information:\n';
    practicalInfo += `LO1 Has Practical Component: ${appState.learningObjectives.lo1.hasPractical ? 'Yes' : 'No'}\n`;
    practicalInfo += `LO2 Has Practical Component: ${appState.learningObjectives.lo2.hasPractical ? 'Yes' : 'No'}\n`;
    if (appState.learningObjectives.lo3.exists) {
        practicalInfo += `LO3 Has Practical Component: ${appState.learningObjectives.lo3.hasPractical ? 'Yes' : 'No'}\n`;
    }
    
    const prompt = `Based on the lesson overview I provided earlier, I need you to identify the most appropriate learning objective types for each LO. 

Here's the lesson overview:
${appState.responseTags.lessonInfo}

${appState.responseTags.learningObjectives}
${practicalInfo}

Now, for each learning objective, identify which of these AO types would be most appropriate and WHY:

AO1 - Knowledge & Recall options:
â€¢ Abstract Concept understanding
â€¢ Tangible Knowledge recall
â€¢ Exam Technique familiarity
â€¢ Terminology & Keyword Precision
â€¢ Fact-Sequence Recall

AO2 - Application options:
â€¢ Data Analysis & Interpretation
â€¢ Exam Application Techniques
â€¢ Calculation Application
â€¢ Scientific Method Application
â€¢ Scenario-Based Application

AO3 - Analysis & Evaluation options:
â€¢ Experimental Design & Analysis
â€¢ Multi-Step Problem Solving
â€¢ Evaluation & Critical Assessment
â€¢ Interpretation & Conclusion Formation
â€¢ Abstract Concept Linking

FORMAT YOUR RESPONSE USING THIS EXACT XML STRUCTURE:

<LOTypes>
<LO1Type>
<AOCategory>[AO1/AO2/AO3]</AOCategory>
<SpecificType>[Specific type from the list above]</SpecificType>
<Justification>[Brief explanation of why this type is appropriate for this learning objective, referencing practical components if relevant]</Justification>
</LO1Type>

<LO2Type>
<AOCategory>[AO1/AO2/AO3]</AOCategory>
<SpecificType>[Specific type from the list above]</SpecificType>
<Justification>[Brief explanation of why this type is appropriate for this learning objective, referencing practical components if relevant]</Justification>
</LO2Type>

<!-- Include LO3 only if there was a third learning objective in the overview -->
<LO3Type>
<AOCategory>[AO1/AO2/AO3]</AOCategory>
<SpecificType>[Specific type from the list above]</SpecificType>
<Justification>[Brief explanation of why this type is appropriate for this learning objective, referencing practical components if relevant]</Justification>
</LO3Type>
</LOTypes>

IMPORTANT: I need your response in two parts:
1. First, give me a clear, readable version of the response formatted for easy scanning
2. Then, provide the XML-tagged version exactly as specified above (this is what I'll use in subsequent steps)`;

    // Set prompt in textarea
    document.getElementById('loTypesPromptTextarea').value = prompt;
}

// Handle LO types response
function handleLOTypesResponse(e) {
    const response = e.target.value;
    appState.responses.loTypes = response;
    
    // Extract XML content
    const loTypesMatch = extractXML(response, 'LOTypes');
    
    if (loTypesMatch) {
        appState.responseTags.loTypes = loTypesMatch;
        
        // Extract LO types
        extractLOTypes(loTypesMatch);
    }
    
    // Update button state
    document.getElementById('continueToMisconceptionsBtn').disabled = !loTypesMatch;
}

// Extract LO types from XML
function extractLOTypes(xml) {
    // Extract LO1 type
    const lo1TypeMatch = xml.match(/<LO1Type>[\s\S]*?<AOCategory>([\s\S]*?)<\/AOCategory>[\s\S]*?<SpecificType>([\s\S]*?)<\/SpecificType>[\s\S]*?<Justification>([\s\S]*?)<\/Justification>[\s\S]*?<\/LO1Type>/);
    if (lo1TypeMatch) {
        appState.loTypes.lo1.aoCategory = lo1TypeMatch[1].trim();
        appState.loTypes.lo1.specificType = lo1TypeMatch[2].trim();
        appState.loTypes.lo1.justification = lo1TypeMatch[3].trim();
    }
    
    // Extract LO2 type
    const lo2TypeMatch = xml.match(/<LO2Type>[\s\S]*?<AOCategory>([\s\S]*?)<\/AOCategory>[\s\S]*?<SpecificType>([\s\S]*?)<\/SpecificType>[\s\S]*?<Justification>([\s\S]*?)<\/Justification>[\s\S]*?<\/LO2Type>/);
    if (lo2TypeMatch) {
        appState.loTypes.lo2.aoCategory = lo2TypeMatch[1].trim();
        appState.loTypes.lo2.specificType = lo2TypeMatch[2].trim();
        appState.loTypes.lo2.justification = lo2TypeMatch[3].trim();
    }
    
    // Extract LO3 type if present
    const lo3TypeMatch = xml.match(/<LO3Type>[\s\S]*?<AOCategory>([\s\S]*?)<\/AOCategory>[\s\S]*?<SpecificType>([\s\S]*?)<\/SpecificType>[\s\S]*?<Justification>([\s\S]*?)<\/Justification>[\s\S]*?<\/LO3Type>/);
    if (lo3TypeMatch && appState.learningObjectives.lo3.exists) {
        appState.loTypes.lo3.aoCategory = lo3TypeMatch[1].trim();
        appState.loTypes.lo3.specificType = lo3TypeMatch[2].trim();
        appState.loTypes.lo3.justification = lo3TypeMatch[3].trim();
    }
}

// Preview LO types response
function previewLOTypesResponse() {
    if (!appState.responses.loTypes.trim()) {
        alert('Please paste Claude\'s response before previewing');
        return;
    }
    
    // Format the response for the formatted view
    const formattedResponseHtml = formatResponse(appState.responses.loTypes, 'loTypes');
    document.getElementById('loTypesFormattedResponse').innerHTML = formattedResponseHtml;
    
    // Format the XML for the tagged view
    const taggedResponseHtml = formatXML(appState.responses.loTypes);
    document.getElementById('loTypesTaggedResponse').innerHTML = taggedResponseHtml;
    
    // Show the preview
    document.getElementById('loTypesPreview').style.display = 'block';
    
    // Display LO types for editing
    displayLOTypesForEditing();
}

// Display LO types for editing
function displayLOTypesForEditing() {
    // LO1
    document.getElementById('lo1AOCategory').textContent = appState.loTypes.lo1.aoCategory;
    document.getElementById('lo1SpecificType').textContent = appState.loTypes.lo1.specificType;
    document.getElementById('lo1TypeJustification').textContent = appState.loTypes.lo1.justification;
    
    // LO2
    document.getElementById('lo2AOCategory').textContent = appState.loTypes.lo2.aoCategory;
    document.getElementById('lo2SpecificType').textContent = appState.loTypes.lo2.specificType;
    document.getElementById('lo2TypeJustification').textContent = appState.loTypes.lo2.justification;
    
    // LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        document.getElementById('lo3TypeContainer').style.display = 'block';
        document.getElementById('lo3AOCategory').textContent = appState.loTypes.lo3.aoCategory;
        document.getElementById('lo3SpecificType').textContent = appState.loTypes.lo3.specificType;
        document.getElementById('lo3TypeJustification').textContent = appState.loTypes.lo3.justification;
    } else {
        document.getElementById('lo3TypeContainer').style.display = 'none';
    }
    
    // Show the container
    document.getElementById('loTypesEditContainer').style.display = 'block';
}

// Open LO Type Edit Modal
function openLoTypeEditModal(loNumber) {
    appState.editState.currentLO = loNumber;
    
    // Set the LO number in the dropdown
    document.getElementById('editLoNumber').value = loNumber;
    
    // Get the current values
    const loType = appState.loTypes[`lo${loNumber}`];
    
    // Set the values in the form
    document.getElementById('editAoCategory').value = loType.aoCategory;
    updateSpecificTypeOptions(); // Populate the specific type options based on the AO category
    document.getElementById('editSpecificType').value = loType.specificType;
    document.getElementById('editTypeJustification').value = loType.justification;
    
    // Show the modal
    document.getElementById('loTypeEditModal').classList.add('active');
}

// Update specific type options based on selected AO category
function updateSpecificTypeOptions() {
    const aoCategory = document.getElementById('editAoCategory').value;
    const specificTypeSelect = document.getElementById('editSpecificType');
    
    // Clear current options
    specificTypeSelect.innerHTML = '';
    
    // Add new options based on selected AO category
    if (aoTypes[aoCategory]) {
        aoTypes[aoCategory].forEach(type => {
            const option = document.createElement('option');
            option.value = type;
            option.textContent = type;
            specificTypeSelect.appendChild(option);
        });
    }
}

// Save LO Type changes
function saveLoTypeChanges() {
    const loNumber = appState.editState.currentLO;
    const aoCategory = document.getElementById('editAoCategory').value;
    const specificType = document.getElementById('editSpecificType').value;
    const justification = document.getElementById('editTypeJustification').value;
    
    // Update the state
    appState.loTypes[`lo${loNumber}`].aoCategory = aoCategory;
    appState.loTypes[`lo${loNumber}`].specificType = specificType;
    appState.loTypes[`lo${loNumber}`].justification = justification;
    
    // Update the display
    document.getElementById(`lo${loNumber}AOCategory`).textContent = aoCategory;
    document.getElementById(`lo${loNumber}SpecificType`).textContent = specificType;
    document.getElementById(`lo${loNumber}TypeJustification`).textContent = justification;
    
    // Close the modal
    closeModal('loTypeEditModal');
}

// STEP 1C: MISCONCEPTIONS FUNCTIONS

// Display the content summary for Misconceptions substep
function displayMisconceptionsSubstepSummary() {
    let html = '<h4>Learning Objectives & Types</h4>';
    
    // LO1
    html += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1</span>
            <span id="summaryLo1Badge" class="lo-badge ${appState.learningObjectives.lo1.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo1.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo1.title}</strong></p>
        <p>${appState.learningObjectives.lo1.description}</p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo1.aoCategory} - ${appState.loTypes.lo1.specificType}</p>
        </div>
    </div>`;
    
    // LO2
    html += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2</span>
            <span id="summaryLo2Badge" class="lo-badge ${appState.learningObjectives.lo2.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo2.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo2.title}</strong></p>
        <p>${appState.learningObjectives.lo2.description}</p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo2.aoCategory} - ${appState.loTypes.lo2.specificType}</p>
        </div>
    </div>`;
    
    // LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        html += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3</span>
                <span id="summaryLo3Badge" class="lo-badge ${appState.learningObjectives.lo3.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo3.hasPractical ? 'Practical' : 'Theory'}</span>
            </div>
            <p><strong>${appState.learningObjectives.lo3.title}</strong></p>
            <p>${appState.learningObjectives.lo3.description}</p>
            <div style="margin-top: 0.5rem;">
                <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo3.aoCategory} - ${appState.loTypes.lo3.specificType}</p>
            </div>
        </div>`;
    }
    
    document.getElementById('loCSummaryContent').innerHTML = html;
}

// Generate misconceptions prompt
function generateMisconceptionsPrompt() {
    if (!appState.responseTags.learningObjectives || !appState.responseTags.loTypes) {
        alert('Please complete the previous steps first');
        return;
    }

    // Add information about practical components
    let practicalInfo = '\n\nPractical Information:\n';
    practicalInfo += `LO1 Has Practical Component: ${appState.learningObjectives.lo1.hasPractical ? 'Yes' : 'No'}\n`;
    practicalInfo += `LO2 Has Practical Component: ${appState.learningObjectives.lo2.hasPractical ? 'Yes' : 'No'}\n`;
    if (appState.learningObjectives.lo3.exists) {
        practicalInfo += `LO3 Has Practical Component: ${appState.learningObjectives.lo3.hasPractical ? 'Yes' : 'No'}\n`;
    }
    
    const prompt = `Based on the lesson overview and learning objective types I provided earlier, I need you to identify likely student misconceptions for each learning objective.

Here's the lesson overview:
${appState.responseTags.lessonInfo}

${appState.responseTags.learningObjectives}
${practicalInfo}

Here are the learning objective types:
${appState.responseTags.loTypes}

For each learning objective, identify 2-3 specific misconceptions that students commonly develop about this topic. For any learning objectives with practical components, be sure to include at least one misconception related to the practical aspects.

FORMAT YOUR RESPONSE USING THIS EXACT XML STRUCTURE:

<Misconceptions>
<LO1Misconceptions>
<Misconception1>[Brief description of first misconception related to LO1]</Misconception1>
<Misconception2>[Brief description of second misconception related to LO1]</Misconception2>
<Misconception3>[Optional third misconception related to LO1]</Misconception3>
</LO1Misconceptions>

<LO2Misconceptions>
<Misconception1>[Brief description of first misconception related to LO2]</Misconception1>
<Misconception2>[Brief description of second misconception related to LO2]</Misconception2>
<Misconception3>[Optional third misconception related to LO2]</Misconception3>
</LO2Misconceptions>

<!-- Include LO3 only if there was a third learning objective in the overview -->
<LO3Misconceptions>
<Misconception1>[Brief description of first misconception related to LO3]</Misconception1>
<Misconception2>[Brief description of second misconception related to LO3]</Misconception2>
<Misconception3>[Optional third misconception related to LO3]</Misconception3>
</LO3Misconceptions>
</Misconceptions>

IMPORTANT: I need your response in two parts:
1. First, give me a clear, readable version of the response formatted for easy scanning
2. Then, provide the XML-tagged version exactly as specified above (this is what I'll use in subsequent steps)`;

    // Set prompt in textarea
    document.getElementById('misconceptionsPromptTextarea').value = prompt;
}

// Handle misconceptions response
function handleMisconceptionsResponse(e) {
    const response = e.target.value;
    appState.responses.misconceptions = response;
    
    // Extract XML content
    const misconceptionsMatch = extractXML(response, 'Misconceptions');
    
    if (misconceptionsMatch) {
        appState.responseTags.misconceptions = misconceptionsMatch;
        
        // Extract misconceptions for each LO
        extractMisconceptions(misconceptionsMatch);
    }
    
    // Update button state
    document.getElementById('continueToPriorKnowledgeBtn').disabled = !misconceptionsMatch;
}

// Extract misconceptions from XML
function extractMisconceptions(xml) {
    // Reset misconceptions arrays
    appState.misconceptions.lo1 = [];
    appState.misconceptions.lo2 = [];
    appState.misconceptions.lo3 = [];
    
    // Extract LO1 misconceptions
    const lo1MisconceptionsMatch = xml.match(/<LO1Misconceptions>([\s\S]*?)<\/LO1Misconceptions>/);
    if (lo1MisconceptionsMatch) {
        const misconceptions1 = lo1MisconceptionsMatch[1].match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/g);
        if (misconceptions1) {
            misconceptions1.forEach(misconception => {
                const content = misconception.match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/)[1].trim();
                appState.misconceptions.lo1.push(content);
            });
        }
    }
    
    // Extract LO2 misconceptions
    const lo2MisconceptionsMatch = xml.match(/<LO2Misconceptions>([\s\S]*?)<\/LO2Misconceptions>/);
    if (lo2MisconceptionsMatch) {
        const misconceptions2 = lo2MisconceptionsMatch[1].match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/g);
        if (misconceptions2) {
            misconceptions2.forEach(misconception => {
                const content = misconception.match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/)[1].trim();
                appState.misconceptions.lo2.push(content);
            });
        }
    }
    
    // Extract LO3 misconceptions if LO3 exists
    if (appState.learningObjectives.lo3.exists) {
        const lo3MisconceptionsMatch = xml.match(/<LO3Misconceptions>([\s\S]*?)<\/LO3Misconceptions>/);
        if (lo3MisconceptionsMatch) {
            const misconceptions3 = lo3MisconceptionsMatch[1].match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/g);
            if (misconceptions3) {
                misconceptions3.forEach(misconception => {
                    const content = misconception.match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/)[1].trim();
                    appState.misconceptions.lo3.push(content);
                });
            }
        }
    }
}

// Preview misconceptions response
function previewMisconceptionsResponse() {
    if (!appState.responses.misconceptions.trim()) {
        alert('Please paste Claude\'s response before previewing');
        return;
    }
    
    // Format the response for the formatted view
    const formattedResponseHtml = formatResponse(appState.responses.misconceptions, 'misconceptions');
    document.getElementById('misconceptionsFormattedResponse').innerHTML = formattedResponseHtml;
    
    // Format the XML for the tagged view
    const taggedResponseHtml = formatXML(appState.responses.misconceptions);
    document.getElementById('misconceptionsTaggedResponse').innerHTML = taggedResponseHtml;
    
    // Show the preview
    document.getElementById('misconceptionsPreview').style.display = 'block';
    
    // Display misconceptions for editing
    displayMisconceptionsForEditing();
}

// Display misconceptions for editing
function displayMisconceptionsForEditing() {
    // Clear existing lists
    document.getElementById('lo1MisconceptionsList').innerHTML = '';
    document.getElementById('lo2MisconceptionsList').innerHTML = '';
    document.getElementById('lo3MisconceptionsList').innerHTML = '';
    
    // Populate LO1 misconceptions
    appState.misconceptions.lo1.forEach(misconception => {
        const li = document.createElement('li');
        li.textContent = misconception;
        document.getElementById('lo1MisconceptionsList').appendChild(li);
    });
    
    // Populate LO2 misconceptions
    appState.misconceptions.lo2.forEach(misconception => {
        const li = document.createElement('li');
        li.textContent = misconception;
        document.getElementById('lo2MisconceptionsList').appendChild(li);
    });
    
    // Populate LO3 misconceptions if LO3 exists
    if (appState.learningObjectives.lo3.exists) {
        appState.misconceptions.lo3.forEach(misconception => {
            const li = document.createElement('li');
            li.textContent = misconception;
            document.getElementById('lo3MisconceptionsList').appendChild(li);
        });
        document.getElementById('lo3MisconceptionsContainer').style.display = 'block';
    } else {
        document.getElementById('lo3MisconceptionsContainer').style.display = 'none';
    }
    
    // Show the container
    document.getElementById('misconceptionsEditContainer').style.display = 'block';
}

// Open Misconceptions Edit Modal
function openMisconceptionsEditModal(loNumber) {
    appState.editState.currentLO = loNumber;
    
    // Set the LO number in the dropdown
    document.getElementById('editMisconceptionsLoNumber').value = loNumber;
    
    // Get the current misconceptions
    const misconceptions = appState.misconceptions[`lo${loNumber}`];
    
    // Create a copy for editing
    appState.editState.tempMisconceptions = [...misconceptions];
    
    // Clear the form and populate with current misconceptions
    const container = document.getElementById('misconceptionsEditList');
    container.innerHTML = '';
    
    appState.editState.tempMisconceptions.forEach((misconception, index) => {
        addMisconceptionToForm(misconception, index);
    });
    
    // Show the modal
    document.getElementById('misconceptionsEditModal').classList.add('active');
}

// Add misconception to edit form
function addMisconceptionToForm(misconception = '', index) {
    const container = document.getElementById('misconceptionsEditList');
    
    const formGroup = document.createElement('div');
    formGroup.className = 'form-group';
    formGroup.style.display = 'flex';
    formGroup.style.alignItems = 'center';
    
    const textarea = document.createElement('textarea');
    textarea.className = 'form-control misconception-input';
    textarea.setAttribute('data-index', index);
    textarea.style.flexGrow = '1';
    textarea.value = misconception;
    textarea.placeholder = 'Enter misconception';
    textarea.rows = 2;
    
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'btn btn-outline btn-sm';
    deleteBtn.innerHTML = '&times;';
    deleteBtn.style.marginLeft = '0.5rem';
    deleteBtn.style.alignSelf = 'flex-start';
    deleteBtn.addEventListener('click', () => removeMisconception(index));
    
    formGroup.appendChild(textarea);
    formGroup.appendChild(deleteBtn);
    container.appendChild(formGroup);
}

// Add new misconception
function addNewMisconception() {
    appState.editState.tempMisconceptions.push('');
    addMisconceptionToForm('', appState.editState.tempMisconceptions.length - 1);
}

// Remove misconception
function removeMisconception(index) {
    // Remove from temporary array
    appState.editState.tempMisconceptions.splice(index, 1);
    
    // Rebuild the form
    const container = document.getElementById('misconceptionsEditList');
    container.innerHTML = '';
    
    appState.editState.tempMisconceptions.forEach((misconception, idx) => {
        addMisconceptionToForm(misconception, idx);
    });
}

// Save misconceptions changes
function saveMisconceptionsChanges() {
    const loNumber = appState.editState.currentLO;
    
    // Get values from form
    const inputs = document.querySelectorAll('.misconception-input');
    const misconceptions = [];
    
    inputs.forEach(input => {
        const value = input.value.trim();
        if (value) {
            misconceptions.push(value);
        }
    });
    
    // Update the state
    appState.misconceptions[`lo${loNumber}`] = misconceptions;
    
    // Update the display
    const list = document.getElementById(`lo${loNumber}MisconceptionsList`);
    list.innerHTML = '';
    
    misconceptions.forEach(misconception => {
        const li = document.createElement('li');
        li.textContent = misconception;
        list.appendChild(li);
    });
    
    // Close the modal
    closeModal('misconceptionsEditModal');
}

// STEP 1D: PRIOR KNOWLEDGE FUNCTIONS

// Display the content summary for Prior Knowledge substep
function displayPriorKnowledgeSubstepSummary() {
    let html = '<h4>Learning Objectives & Misconceptions</h4>';
    
    // LO1
    html += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1</span>
            <span id="summaryLo1Badge" class="lo-badge ${appState.learningObjectives.lo1.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo1.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo1.title}</strong></p>
        <p>${appState.learningObjectives.lo1.description}</p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo1.aoCategory} - ${appState.loTypes.lo1.specificType}</p>
            <p><strong>Misconceptions:</strong></p>
            <ul>
                ${appState.misconceptions.lo1.map(m => `<li>${m}</li>`).join('')}
            </ul>
        </div>
    </div>`;
    
    // LO2
    html += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2</span>
            <span id="summaryLo2Badge" class="lo-badge ${appState.learningObjectives.lo2.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo2.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo2.title}</strong></p>
        <p>${appState.learningObjectives.lo2.description}</p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo2.aoCategory} - ${appState.loTypes.lo2.specificType}</p>
            <p><strong>Misconceptions:</strong></p>
            <ul>
                ${appState.misconceptions.lo2.map(m => `<li>${m}</li>`).join('')}
            </ul>
        </div>
    </div>`;
    
    // LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        html += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3</span>
                <span id="summaryLo3Badge" class="lo-badge ${appState.learningObjectives.lo3.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo3.hasPractical ? 'Practical' : 'Theory'}</span>
            </div>
            <p><strong>${appState.learningObjectives.lo3.title}</strong></p>
            <p>${appState.learningObjectives.lo3.description}</p>
            <div style="margin-top: 0.5rem;">
                <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo3.aoCategory} - ${appState.loTypes.lo3.specificType}</p>
                <p><strong>Misconceptions:</strong></p>
                <ul>
                    ${appState.misconceptions.lo3.map(m => `<li>${m}</li>`).join('')}
                </ul>
            </div>
        </div>`;
    }
    
    document.getElementById('loDSummaryContent').innerHTML = html;
}

// Generate prior knowledge prompt
function generatePriorKnowledgePrompt() {
    if (!appState.responseTags.learningObjectives || !appState.responseTags.loTypes || !appState.responseTags.misconceptions) {
        alert('Please complete the previous steps first');
        return;
    }

    // Add information about practical components
    let practicalInfo = '\n\nPractical Information:\n';
    practicalInfo += `LO1 Has Practical Component: ${appState.learningObjectives.lo1.hasPractical ? 'Yes' : 'No'}\n`;
    practicalInfo += `LO2 Has Practical Component: ${appState.learningObjectives.lo2.hasPractical ? 'Yes' : 'No'}\n`;
    if (appState.learningObjectives.lo3.exists) {
        practicalInfo += `LO3 Has Practical Component: ${appState.learningObjectives.lo3.hasPractical ? 'Yes' : 'No'}\n`;
    }
    
    const prompt = `Based on the lesson overview, learning objective types, and misconceptions I provided earlier, I need you to identify the essential prior knowledge students must possess for each learning objective.

Here's the lesson overview:
${appState.responseTags.lessonInfo}

${appState.responseTags.learningObjectives}
${practicalInfo}

Here are the learning objective types:
${appState.responseTags.loTypes}

Here are the identified misconceptions:
${appState.responseTags.misconceptions}

For each learning objective, identify 2-4 specific pieces of prior knowledge that students must already understand before they can successfully engage with this learning objective. For any learning objectives with practical components, be sure to include at least one prior knowledge item related to practical skills or safety.

FORMAT YOUR RESPONSE USING THIS EXACT XML STRUCTURE:

<PriorKnowledge>
<LO1PriorKnowledge>
<Knowledge1>[Brief description of first essential prior knowledge item for LO1]</Knowledge1>
<Knowledge2>[Brief description of second essential prior knowledge item for LO1]</Knowledge2>
<Knowledge3>[Optional third prior knowledge item for LO1]</Knowledge3>
<Knowledge4>[Optional fourth prior knowledge item for LO1]</Knowledge4>
</LO1PriorKnowledge>

<LO2PriorKnowledge>
<Knowledge1>[Brief description of first essential prior knowledge item for LO2]</Knowledge1>
<Knowledge2>[Brief description of second essential prior knowledge item for LO2]</Knowledge2>
<Knowledge3>[Optional third prior knowledge item for LO2]</Knowledge3>
<Knowledge4>[Optional fourth prior knowledge item for LO2]</Knowledge4>
</LO2PriorKnowledge>

<!-- Include LO3 only if there was a third learning objective in the overview -->
<LO3PriorKnowledge>
<Knowledge1>[Brief description of first essential prior knowledge item for LO3]</Knowledge1>
<Knowledge2>[Brief description of second essential prior knowledge item for LO3]</Knowledge2>
<Knowledge3>[Optional third prior knowledge item for LO3]</Knowledge3>
<Knowledge4>[Optional fourth prior knowledge item for LO3]</Knowledge4>
</LO3PriorKnowledge>
</PriorKnowledge>

IMPORTANT: I need your response in two parts:
1. First, give me a clear, readable version of the response formatted for easy scanning
2. Then, provide the XML-tagged version exactly as specified above (this is what I'll use in subsequent steps)`;

    // Set prompt in textarea
    document.getElementById('priorKnowledgePromptTextarea').value = prompt;
}

// Handle prior knowledge response
function handlePriorKnowledgeResponse(e) {
    const response = e.target.value;
    appState.responses.priorKnowledge = response;
    
    // Extract XML content
    const priorKnowledgeMatch = extractXML(response, 'PriorKnowledge');
    
    if (priorKnowledgeMatch) {
        appState.responseTags.priorKnowledge = priorKnowledgeMatch;
        
        // Extract prior knowledge for each LO
        extractPriorKnowledge(priorKnowledgeMatch);
    }
    
    // Update button state
    document.getElementById('continueToReviewBtn').disabled = !priorKnowledgeMatch;
}

// Extract prior knowledge from XML
function extractPriorKnowledge(xml) {
    // Reset prior knowledge arrays
    appState.priorKnowledge.lo1 = [];
    appState.priorKnowledge.lo2 = [];
    appState.priorKnowledge.lo3 = [];
    
    // Extract LO1 prior knowledge
    const lo1PriorKnowledgeMatch = xml.match(/<LO1PriorKnowledge>([\s\S]*?)<\/LO1PriorKnowledge>/);
    if (lo1PriorKnowledgeMatch) {
        const knowledge1 = lo1PriorKnowledgeMatch[1].match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/g);
        if (knowledge1) {
            knowledge1.forEach(knowledge => {
                const content = knowledge.match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/)[1].trim();
                appState.priorKnowledge.lo1.push(content);
            });
        }
    }
    
    // Extract LO2 prior knowledge
    const lo2PriorKnowledgeMatch = xml.match(/<LO2PriorKnowledge>([\s\S]*?)<\/LO2PriorKnowledge>/);
    if (lo2PriorKnowledgeMatch) {
        const knowledge2 = lo2PriorKnowledgeMatch[1].match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/g);
        if (knowledge2) {
            knowledge2.forEach(knowledge => {
                const content = knowledge.match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/)[1].trim();
                appState.priorKnowledge.lo2.push(content);
            });
        }
    }
    
    // Extract LO3 prior knowledge if LO3 exists
    if (appState.learningObjectives.lo3.exists) {
        const lo3PriorKnowledgeMatch = xml.match(/<LO3PriorKnowledge>([\s\S]*?)<\/LO3PriorKnowledge>/);
        if (lo3PriorKnowledgeMatch) {
            const knowledge3 = lo3PriorKnowledgeMatch[1].match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/g);
            if (knowledge3) {
                knowledge3.forEach(knowledge => {
                    const content = knowledge.match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/)[1].trim();
                    appState.priorKnowledge.lo3.push(content);
                });
            }
        }
    }
}

// Preview prior knowledge response
function previewPriorKnowledgeResponse() {
    if (!appState.responses.priorKnowledge.trim()) {
        alert('Please paste Claude\'s response before previewing');
        return;
    }
    
    // Format the response for the formatted view
    const formattedResponseHtml = formatResponse(appState.responses.priorKnowledge, 'priorKnowledge');
    document.getElementById('priorKnowledgeFormattedResponse').innerHTML = formattedResponseHtml;
    
    // Format the XML for the tagged view
    const taggedResponseHtml = formatXML(appState.responses.priorKnowledge);
    document.getElementById('priorKnowledgeTaggedResponse').innerHTML = taggedResponseHtml;
    
    // Show the preview
    document.getElementById('priorKnowledgePreview').style.display = 'block';
    
    // Display prior knowledge for editing
    displayPriorKnowledgeForEditing();
}

// Display prior knowledge for editing
function displayPriorKnowledgeForEditing() {
    // Clear existing lists
    document.getElementById('lo1PriorKnowledgeList').innerHTML = '';
    document.getElementById('lo2PriorKnowledgeList').innerHTML = '';
    document.getElementById('lo3PriorKnowledgeList').innerHTML = '';
    
    // Populate LO1 prior knowledge
    appState.priorKnowledge.lo1.forEach(knowledge => {
        const li = document.createElement('li');
        li.textContent = knowledge;
        document.getElementById('lo1PriorKnowledgeList').appendChild(li);
    });
    
    // Populate LO2 prior knowledge
    appState.priorKnowledge.lo2.forEach(knowledge => {
        const li = document.createElement('li');
        li.textContent = knowledge;
        document.getElementById('lo2PriorKnowledgeList').appendChild(li);
    });
    
    // Populate LO3 prior knowledge if LO3 exists
    if (appState.learningObjectives.lo3.exists) {
        appState.priorKnowledge.lo3.forEach(knowledge => {
            const li = document.createElement('li');
            li.textContent = knowledge;
            document.getElementById('lo3PriorKnowledgeList').appendChild(li);
        });
        document.getElementById('lo3PriorKnowledgeContainer').style.display = 'block';
    } else {
        document.getElementById('lo3PriorKnowledgeContainer').style.display = 'none';
    }
    
    // Show the container
    document.getElementById('priorKnowledgeEditContainer').style.display = 'block';
}

// Open Prior Knowledge Edit Modal
function openPriorKnowledgeEditModal(loNumber) {
    appState.editState.currentLO = loNumber;
    
    // Set the LO number in the dropdown
    document.getElementById('editPriorKnowledgeLoNumber').value = loNumber;
    
    // Get the current prior knowledge items
    const priorKnowledge = appState.priorKnowledge[`lo${loNumber}`];
    
    // Create a copy for editing
    appState.editState.tempPriorKnowledge = [...priorKnowledge];
    
    // Clear the form and populate with current prior knowledge items
    const container = document.getElementById('priorKnowledgeEditList');
    container.innerHTML = '';
    
    appState.editState.tempPriorKnowledge.forEach((knowledge, index) => {
        addPriorKnowledgeToForm(knowledge, index);
    });
    
    // Show the modal
    document.getElementById('priorKnowledgeEditModal').classList.add('active');
}

// Add prior knowledge item to edit form
function addPriorKnowledgeToForm(knowledge = '', index) {
    const container = document.getElementById('priorKnowledgeEditList');
    
    const formGroup = document.createElement('div');
    formGroup.className = 'form-group';
    formGroup.style.display = 'flex';
    formGroup.style.alignItems = 'center';
    
    const textarea = document.createElement('textarea');
    textarea.className = 'form-control prior-knowledge-input';
    textarea.setAttribute('data-index', index);
    textarea.style.flexGrow = '1';
    textarea.value = knowledge;
    textarea.placeholder = 'Enter prior knowledge item';
    textarea.rows = 2;
    
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'btn btn-outline btn-sm';
    deleteBtn.innerHTML = '&times;';
    deleteBtn.style.marginLeft = '0.5rem';
    deleteBtn.style.alignSelf = 'flex-start';
    deleteBtn.addEventListener('click', () => removePriorKnowledgeItem(index));
    
    formGroup.appendChild(textarea);
    formGroup.appendChild(deleteBtn);
    container.appendChild(formGroup);
}

// Add new prior knowledge item
function addNewPriorKnowledgeItem() {
    appState.editState.tempPriorKnowledge.push('');
    addPriorKnowledgeToForm('', appState.editState.tempPriorKnowledge.length - 1);
}

// Remove prior knowledge item
function removePriorKnowledgeItem(index) {
    // Remove from temporary array
    appState.editState.tempPriorKnowledge.splice(index, 1);
    
    // Rebuild the form
    const container = document.getElementById('priorKnowledgeEditList');
    container.innerHTML = '';
    
    appState.editState.tempPriorKnowledge.forEach((knowledge, idx) => {
        addPriorKnowledgeToForm(knowledge, idx);
    });
}

// Save prior knowledge changes
function savePriorKnowledgeChanges() {
    const loNumber = appState.editState.currentLO;
    
    // Get values from form
    const inputs = document.querySelectorAll('.prior-knowledge-input');
    const priorKnowledge = [];
    
    inputs.forEach(input => {
        const value = input.value.trim();
        if (value) {
            priorKnowledge.push(value);
        }
    });
    
    // Update the state
    appState.priorKnowledge[`lo${loNumber}`] = priorKnowledge;
    
    // Update the display
    const list = document.getElementById(`lo${loNumber}PriorKnowledgeList`);
    list.innerHTML = '';
    
    priorKnowledge.forEach(knowledge => {
        const li = document.createElement('li');
        li.textContent = knowledge;
        list.appendChild(li);
    });
    
    // Close the modal
    closeModal('priorKnowledgeEditModal');
}

// STEP 1E: REVIEW & EDIT

// Update Step 1E: Review & Edit
function updateStep1Review() {
    // Lesson Information
    let lessonInfoHtml = `<h4>Lesson Information</h4>
        <table style="width: 100%; border-collapse: collapse;">
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray); width: 30%;"><strong>Subject:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.subject}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);"><strong>Topic:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.topic}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);"><strong>Exam Board:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.provider}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);"><strong>Course:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.course}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);"><strong>Level:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.level}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);"><strong>Student Ability:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.ability}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);"><strong>Lesson Number:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.lessonNumber}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);"><strong>Lesson Title:</strong></td>
                <td style="padding: 0.5rem; border-bottom: 1px solid var(--light-gray);">${appState.lessonInfo.lessonTitle}</td>
            </tr>
            <tr>
                <td style="padding: 0.5rem;"><strong>Additional Info:</strong></td>
                <td style="padding: 0.5rem;">${appState.lessonInfo.description || 'None'}</td>
            </tr>
        </table>`;
    
    document.getElementById('lessonInfoReview').innerHTML = lessonInfoHtml;
    
    // Learning Objectives
    let loHtml = '';
    
    // LO1
    loHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1</span>
            <span class="lo-badge ${appState.learningObjectives.lo1.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo1.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo1.title}</strong></p>
        <p>${appState.learningObjectives.lo1.description}</p>
    </div>`;
    
    // LO2
    loHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2</span>
            <span class="lo-badge ${appState.learningObjectives.lo2.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo2.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo2.title}</strong></p>
        <p>${appState.learningObjectives.lo2.description}</p>
    </div>`;
    
    // LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        loHtml += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3</span>
                <span class="lo-badge ${appState.learningObjectives.lo3.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo3.hasPractical ? 'Practical' : 'Theory'}</span>
            </div>
            <p><strong>${appState.learningObjectives.lo3.title}</strong></p>
            <p>${appState.learningObjectives.lo3.description}</p>
        </div>`;
    }
    
    document.getElementById('learningObjectivesReview').innerHTML = loHtml;
    
    // Learning Objective Types
    let loTypesHtml = '';
    
    // LO1 Types
    loTypesHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1 Types</span>
        </div>
        <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo1.aoCategory}</p>
        <p><strong>Specific Type:</strong> ${appState.loTypes.lo1.specificType}</p>
        <p><strong>Justification:</strong> ${appState.loTypes.lo1.justification}</p>
    </div>`;
    
    // LO2 Types
    loTypesHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2 Types</span>
        </div>
        <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo2.aoCategory}</p>
        <p><strong>Specific Type:</strong> ${appState.loTypes.lo2.specificType}</p>
        <p><strong>Justification:</strong> ${appState.loTypes.lo2.justification}</p>
    </div>`;
    
    // LO3 Types if LO3 exists
    if (appState.learningObjectives.lo3.exists) {
        loTypesHtml += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3 Types</span>
            </div>
            <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo3.aoCategory}</p>
            <p><strong>Specific Type:</strong> ${appState.loTypes.lo3.specificType}</p>
            <p><strong>Justification:</strong> ${appState.loTypes.lo3.justification}</p>
        </div>`;
    }
    
    document.getElementById('loTypesReview').innerHTML = loTypesHtml;
    
    // Misconceptions
    let misconceptionsHtml = '';
    
    // LO1 Misconceptions
    misconceptionsHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1 Misconceptions</span>
        </div>
        <ul>
            ${appState.misconceptions.lo1.map(m => `<li>${m}</li>`).join('')}
        </ul>
    </div>`;
    
    // LO2 Misconceptions
    misconceptionsHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2 Misconceptions</span>
        </div>
        <ul>
            ${appState.misconceptions.lo2.map(m => `<li>${m}</li>`).join('')}
        </ul>
    </div>`;
    
    // LO3 Misconceptions if LO3 exists
    if (appState.learningObjectives.lo3.exists) {
        misconceptionsHtml += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3 Misconceptions</span>
            </div>
            <ul>
                ${appState.misconceptions.lo3.map(m => `<li>${m}</li>`).join('')}
            </ul>
        </div>`;
    }
    
    document.getElementById('misconceptionsReview').innerHTML = misconceptionsHtml;
    
    // Prior Knowledge
    let priorKnowledgeHtml = '';
    
    // LO1 Prior Knowledge
    priorKnowledgeHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1 Prior Knowledge</span>
        </div>
        <ul>
            ${appState.priorKnowledge.lo1.map(pk => `<li>${pk}</li>`).join('')}
        </ul>
    </div>`;
    
    // LO2 Prior Knowledge
    priorKnowledgeHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2 Prior Knowledge</span>
        </div>
        <ul>
            ${appState.priorKnowledge.lo2.map(pk => `<li>${pk}</li>`).join('')}
        </ul>
    </div>`;
    
    // LO3 Prior Knowledge if LO3 exists
    if (appState.learningObjectives.lo3.exists) {
        priorKnowledgeHtml += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3 Prior Knowledge</span>
            </div>
            <ul>
                ${appState.priorKnowledge.lo3.map(pk => `<li>${pk}</li>`).join('')}
            </ul>
        </div>`;
    }
    
    document.getElementById('priorKnowledgeReview').innerHTML = priorKnowledgeHtml;
    
    // Enable the finish button
    document.getElementById('finishStep1Btn').disabled = false;
}


ðŸ“„ FILE: step2.js
==================================================
// STEP 2A: TEACHING FRAMEWORKS FUNCTIONS

// Initialize Step 2 content
function initializeStep2() {
    const step2Content = document.getElementById('mainStepContent2');
    
    // Create the Step 2 inner structure
    step2Content.innerHTML = `
    <div class="main-step-inner">
        <!-- Substeps Navigation -->
        <div class="substeps-nav">
            <div class="nav-scroll-indicator nav-scroll-left" onclick="scrollSubstepNav('left')">â—€</div>
            <div class="substep-tab active" data-step="2" data-substep="A" onclick="switchSubstep(2, 'A')">2A: Teaching Frameworks</div>
            <div class="substep-tab" data-step="2" data-substep="B" onclick="switchSubstep(2, 'B')">2B: Exam Techniques</div>
            <div class="substep-tab" data-step="2" data-substep="C" onclick="switchSubstep(2, 'C')">2C: Lesson Structure</div>
            <div class="substep-tab" data-step="2" data-substep="D" onclick="switchSubstep(2, 'D')">2D: Practical Requirements</div>
            <div class="substep-tab" data-step="2" data-substep="E" onclick="switchSubstep(2, 'E')">2E: Frayer Model</div>
            <div class="substep-tab" data-step="2" data-substep="F" onclick="switchSubstep(2, 'F')">2F: Review & Edit</div>
            <div class="nav-scroll-indicator nav-scroll-right" onclick="scrollSubstepNav('right')">â–¶</div>
        </div>

        <!-- Substep 2A: Teaching Frameworks -->
        <div class="substep-content active" data-step="2" data-substep="A">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Teaching Frameworks</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Select appropriate teaching frameworks for each learning objective. These frameworks will guide how you structure your teaching and assessment.
                    </div>
                </div>
                
                <div id="frameworksLOSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div id="framework-selection-content">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(1, 'E')">Back to Step 1</button>
                    <div class="nav-buttons-right">
                        <button id="continueToExamTechniquesBtn" class="btn btn-primary">Continue to Exam Techniques</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 2B: Exam Techniques -->
        <div class="substep-content" data-step="2" data-substep="B">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Exam Techniques</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Select specific exam techniques to explicitly teach for each learning objective. These techniques will help students structure their answers effectively.
                    </div>
                </div>
                
                <div id="examTechniquesLOSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div id="exam-techniques-content">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(2, 'A')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="continueToLessonStructureBtn" class="btn btn-primary">Continue to Lesson Structure</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 2C: Lesson Structure -->
        <div class="substep-content" data-step="2" data-substep="C">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Lesson Structure</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Organize your lesson with retrieval practice and a logical teaching sequence for your learning objectives.
                    </div>
                </div>
                
                <div id="lessonStructureLOSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div id="lesson-structure-content">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(2, 'B')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="continueToPracticalBtn" class="btn btn-primary">Continue to Practical Requirements</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 2D: Practical Requirements -->
        <div class="substep-content" data-step="2" data-substep="D">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Practical Requirements</h3>
                </div>
                
                <div id="practicalAlert" class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Specify detailed requirements for practical activities in your lesson.
                    </div>
                </div>
                
                <div id="practicalLOSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div id="practical-requirements-content">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(2, 'C')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="continueToFrayerModelBtn" class="btn btn-primary">Continue to Frayer Model</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 2E: Frayer Model -->
        <div class="substep-content" data-step="2" data-substep="E">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Frayer Model Assessment</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Create Frayer models to help students understand key concepts in depth.
                    </div>
                </div>
                
                <div id="frayerModelLOSummary" class="response-display" style="max-height: none; margin-bottom: 1.5rem;">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div id="frayer-model-content">
                    <!-- Will be populated dynamically -->
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(2, 'D')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="continueToStep2ReviewBtn" class="btn btn-primary">Continue to Review</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Substep 2F: Review & Edit -->
        <div class="substep-content" data-step="2" data-substep="F">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Review Teaching Approach</h3>
                </div>
                
                <div class="alert alert-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    <div>
                        Review all the teaching approach elements you've defined. You can make any necessary edits before continuing to the next step.
                    </div>
                </div>
                
                <div id="approachReview">
                    <h4>Teaching Frameworks</h4>
                    <div class="response-display" id="frameworksReview">
                        <p>Complete all previous steps to see a summary here.</p>
                    </div>
                    
                    <h4 style="margin-top: 1.5rem;">Exam Techniques</h4>
                    <div class="response-display" id="examTechniquesReview">
                        <p>Complete all previous steps to see a summary here.</p>
                    </div>
                    
                    <h4 style="margin-top: 1.5rem;">Lesson Structure</h4>
                    <div class="response-display" id="lessonStructureReview">
                        <p>Complete all previous steps to see a summary here.</p>
                    </div>
                    
                    <h4 style="margin-top: 1.5rem;">Practical Requirements</h4>
                    <div class="response-display" id="practicalRequirementsReview">
                        <p>Complete all previous steps to see a summary here.</p>
                    </div>
                    
                    <h4 style="margin-top: 1.5rem;">Frayer Models</h4>
                    <div class="response-display" id="frayerModelsReview">
                        <p>Complete all previous steps to see a summary here.</p>
                    </div>
                </div>
                
                <div class="nav-buttons">
                    <button class="btn btn-outline" onclick="switchSubstep(2, 'E')">Back</button>
                    <div class="nav-buttons-right">
                        <button id="finishStep2Btn" class="btn btn-secondary">Complete & Continue to Step 3</button>
                    </div>
                </div>
            </div>
        </div>
    </div>`;
    
    // Add event listeners for Step 2 buttons
    document.getElementById('continueToExamTechniquesBtn').addEventListener('click', () => switchSubstep(2, 'B'));
    document.getElementById('continueToLessonStructureBtn').addEventListener('click', () => switchSubstep(2, 'C'));
    document.getElementById('continueToPracticalBtn').addEventListener('click', () => switchSubstep(2, 'D'));
    document.getElementById('continueToFrayerModelBtn').addEventListener('click', () => switchSubstep(2, 'E'));
    document.getElementById('continueToStep2ReviewBtn').addEventListener('click', () => switchSubstep(2, 'F'));
    document.getElementById('finishStep2Btn').addEventListener('click', finishStep2);
}

// Display the frameworks substep content
function prepareFrameworksSubstep() {
    // Update the LO summary
    let summaryHtml = '<h4>Learning Objectives</h4>';
    
    // LO1
    summaryHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1</span>
            <span class="lo-badge ${appState.learningObjectives.lo1.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo1.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo1.title}</strong></p>
        <p>${appState.learningObjectives.lo1.description}</p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo1.aoCategory} - ${appState.loTypes.lo1.specificType}</p>
        </div>
    </div>`;
    
    // LO2
    summaryHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2</span>
            <span class="lo-badge ${appState.learningObjectives.lo2.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo2.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo2.title}</strong></p>
        <p>${appState.learningObjectives.lo2.description}</p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo2.aoCategory} - ${appState.loTypes.lo2.specificType}</p>
        </div>
    </div>`;
    
    // LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        summaryHtml += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3</span>
                <span class="lo-badge ${appState.learningObjectives.lo3.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo3.hasPractical ? 'Practical' : 'Theory'}</span>
            </div>
            <p><strong>${appState.learningObjectives.lo3.title}</strong></p>
            <p>${appState.learningObjectives.lo3.description}</p>
            <div style="margin-top: 0.5rem;">
                <p><strong>Assessment Objective:</strong> ${appState.loTypes.lo3.aoCategory} - ${appState.loTypes.lo3.specificType}</p>
            </div>
        </div>`;
    }
    
    document.getElementById('frameworksLOSummary').innerHTML = summaryHtml;
    
    // Create the framework selection interfaces
    let frameworksHtml = '';
    
    // LO1 Framework Selection
    frameworksHtml += `
    <div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1 Framework</span>
            <button class="edit-button" id="editLO1FrameworkBtn">Edit</button>
        </div>
        <p>Select a primary teaching framework for this learning objective:</p>
        <div class="framework-selection">
    `;
    
    // Add framework options
    Object.entries(frameworkDescriptions).forEach(([framework, description]) => {
        frameworksHtml += `
        <div class="framework-card ${appState.frameworks.lo1.primaryFramework === framework ? 'selected' : ''}" onclick="selectFramework(1, '${framework}')">
            <div class="framework-card-header">${framework}</div>
            <div class="framework-card-description">${description}</div>
        </div>
        `;
    });
    
    frameworksHtml += `
        </div>
        
        <div class="supplementary-framework-selection">
            <div class="checkbox-container">
                <input type="checkbox" id="lo1BltUsed" ${appState.frameworks.lo1.bltUsed ? 'checked' : ''} onchange="toggleBltSupplementary(1)">
                <label for="lo1BltUsed">Apply Bloom's Taxonomy (BLT) supplementary approach</label>
            </div>
    `;
    
    // BLT levels (visible if BLT is used)
    if (appState.frameworks.lo1.bltUsed) {
        frameworksHtml += `
            <div id="lo1BltLevels" style="margin-left: 1.5rem; margin-top: 0.5rem;">
                <p>Select Bloom's Taxonomy levels to focus on:</p>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo1BltRemember" ${appState.frameworks.lo1.bltLevels.remember ? 'checked' : ''} onchange="toggleBltLevel(1, 'remember')">
                    <label for="lo1BltRemember">Remember</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo1BltUnderstand" ${appState.frameworks.lo1.bltLevels.understand ? 'checked' : ''} onchange="toggleBltLevel(1, 'understand')">
                    <label for="lo1BltUnderstand">Understand</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo1BltApply" ${appState.frameworks.lo1.bltLevels.apply ? 'checked' : ''} onchange="toggleBltLevel(1, 'apply')">
                    <label for="lo1BltApply">Apply</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo1BltAnalyze" ${appState.frameworks.lo1.bltLevels.analyze ? 'checked' : ''} onchange="toggleBltLevel(1, 'analyze')">
                    <label for="lo1BltAnalyze">Analyze</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo1BltEvaluate" ${appState.frameworks.lo1.bltLevels.evaluate ? 'checked' : ''} onchange="toggleBltLevel(1, 'evaluate')">
                    <label for="lo1BltEvaluate">Evaluate</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo1BltCreate" ${appState.frameworks.lo1.bltLevels.create ? 'checked' : ''} onchange="toggleBltLevel(1, 'create')">
                    <label for="lo1BltCreate">Create</label>
                </div>
            </div>
        `;
    } else {
        frameworksHtml += `<div id="lo1BltLevels" style="display: none;"></div>`;
    }
    
    frameworksHtml += `
        </div>
    </div>
    `;
    
    // LO2 Framework Selection (similar structure)
    frameworksHtml += `
    <div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2 Framework</span>
            <button class="edit-button" id="editLO2FrameworkBtn">Edit</button>
        </div>
        <p>Select a primary teaching framework for this learning objective:</p>
        <div class="framework-selection">
    `;
    
    // Add framework options
    Object.entries(frameworkDescriptions).forEach(([framework, description]) => {
        frameworksHtml += `
        <div class="framework-card ${appState.frameworks.lo2.primaryFramework === framework ? 'selected' : ''}" onclick="selectFramework(2, '${framework}')">
            <div class="framework-card-header">${framework}</div>
            <div class="framework-card-description">${description}</div>
        </div>
        `;
    });
    
    frameworksHtml += `
        </div>
        
        <div class="supplementary-framework-selection">
            <div class="checkbox-container">
                <input type="checkbox" id="lo2BltUsed" ${appState.frameworks.lo2.bltUsed ? 'checked' : ''} onchange="toggleBltSupplementary(2)">
                <label for="lo2BltUsed">Apply Bloom's Taxonomy (BLT) supplementary approach</label>
            </div>
    `;
    
    // BLT levels (visible if BLT is used)
    if (appState.frameworks.lo2.bltUsed) {
        frameworksHtml += `
            <div id="lo2BltLevels" style="margin-left: 1.5rem; margin-top: 0.5rem;">
                <p>Select Bloom's Taxonomy levels to focus on:</p>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo2BltRemember" ${appState.frameworks.lo2.bltLevels.remember ? 'checked' : ''} onchange="toggleBltLevel(2, 'remember')">
                    <label for="lo2BltRemember">Remember</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo2BltUnderstand" ${appState.frameworks.lo2.bltLevels.understand ? 'checked' : ''} onchange="toggleBltLevel(2, 'understand')">
                    <label for="lo2BltUnderstand">Understand</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo2BltApply" ${appState.frameworks.lo2.bltLevels.apply ? 'checked' : ''} onchange="toggleBltLevel(2, 'apply')">
                    <label for="lo2BltApply">Apply</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo2BltAnalyze" ${appState.frameworks.lo2.bltLevels.analyze ? 'checked' : ''} onchange="toggleBltLevel(2, 'analyze')">
                    <label for="lo2BltAnalyze">Analyze</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo2BltEvaluate" ${appState.frameworks.lo2.bltLevels.evaluate ? 'checked' : ''} onchange="toggleBltLevel(2, 'evaluate')">
                    <label for="lo2BltEvaluate">Evaluate</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo2BltCreate" ${appState.frameworks.lo2.bltLevels.create ? 'checked' : ''} onchange="toggleBltLevel(2, 'create')">
                    <label for="lo2BltCreate">Create</label>
                </div>
            </div>
        `;
    } else {
        frameworksHtml += `<div id="lo2BltLevels" style="display: none;"></div>`;
    }
    
    frameworksHtml += `
        </div>
    </div>
    `;
    
    // LO3 Framework Selection (if LO3 exists)
    if (appState.learningObjectives.lo3.exists) {
        frameworksHtml += `
        <div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3 Framework</span>
                <button class="edit-button" id="editLO3FrameworkBtn">Edit</button>
            </div>
            <p>Select a primary teaching framework for this learning objective:</p>
            <div class="framework-selection">
        `;
        
        // Add framework options
        Object.entries(frameworkDescriptions).forEach(([framework, description]) => {
            frameworksHtml += `
            <div class="framework-card ${appState.frameworks.lo3.primaryFramework === framework ? 'selected' : ''}" onclick="selectFramework(3, '${framework}')">
                <div class="framework-card-header">${framework}</div>
                <div class="framework-card-description">${description}</div>
            </div>
            `;
        });
        
        frameworksHtml += `
            </div>
            
            <div class="supplementary-framework-selection">
                <div class="checkbox-container">
                    <input type="checkbox" id="lo3BltUsed" ${appState.frameworks.lo3.bltUsed ? 'checked' : ''} onchange="toggleBltSupplementary(3)">
                    <label for="lo3BltUsed">Apply Bloom's Taxonomy (BLT) supplementary approach</label>
                </div>
        `;
        
        // BLT levels (visible if BLT is used)
        if (appState.frameworks.lo3.bltUsed) {
            frameworksHtml += `
                <div id="lo3BltLevels" style="margin-left: 1.5rem; margin-top: 0.5rem;">
                    <p>Select Bloom's Taxonomy levels to focus on:</p>
                    <div class="checkbox-container">
                        <input type="checkbox" id="lo3BltRemember" ${appState.frameworks.lo3.bltLevels.remember ? 'checked' : ''} onchange="toggleBltLevel(3, 'remember')">
                        <label for="lo3BltRemember">Remember</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="lo3BltUnderstand" ${appState.frameworks.lo3.bltLevels.understand ? 'checked' : ''} onchange="toggleBltLevel(3, 'understand')">
                        <label for="lo3BltUnderstand">Understand</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="lo3BltApply" ${appState.frameworks.lo3.bltLevels.apply ? 'checked' : ''} onchange="toggleBltLevel(3, 'apply')">
                        <label for="lo3BltApply">Apply</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="lo3BltAnalyze" ${appState.frameworks.lo3.bltLevels.analyze ? 'checked' : ''} onchange="toggleBltLevel(3, 'analyze')">
                        <label for="lo3BltAnalyze">Analyze</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="lo3BltEvaluate" ${appState.frameworks.lo3.bltLevels.evaluate ? 'checked' : ''} onchange="toggleBltLevel(3, 'evaluate')">
                        <label for="lo3BltEvaluate">Evaluate</label>
                    </div>
                    <div class="checkbox-container">
                        <input type="checkbox" id="lo3BltCreate" ${appState.frameworks.lo3.bltLevels.create ? 'checked' : ''} onchange="toggleBltLevel(3, 'create')">
                        <label for="lo3BltCreate">Create</label>
                    </div>
                </div>
            `;
        } else {
            frameworksHtml += `<div id="lo3BltLevels" style="display: none;"></div>`;
        }
        
        frameworksHtml += `
            </div>
        </div>
        `;
    }
    
    // Add the frameworks HTML to the page
    document.getElementById('framework-selection-content').innerHTML = frameworksHtml;
    
    // Add event listeners for edit buttons
    document.getElementById('editLO1FrameworkBtn').addEventListener('click', () => openFrameworkEditModal(1));
    document.getElementById('editLO2FrameworkBtn').addEventListener('click', () => openFrameworkEditModal(2));
    if (appState.learningObjectives.lo3.exists) {
        document.getElementById('editLO3FrameworkBtn').addEventListener('click', () => openFrameworkEditModal(3));
    }
}

// Select a framework for a learning objective
function selectFramework(loNumber, framework) {
    // Update the state
    appState.frameworks[`lo${loNumber}`].primaryFramework = framework;
    
    // Update the UI
    const frameworkCards = document.querySelectorAll(`.lo-container:nth-child(${loNumber}) .framework-card`);
    frameworkCards.forEach(card => {
        if (card.querySelector('.framework-card-header').textContent === framework) {
            card.classList.add('selected');
        } else {
            card.classList.remove('selected');
        }
    });
}

// Toggle BLT supplementary framework
function toggleBltSupplementary(loNumber) {
    const checkbox = document.getElementById(`lo${loNumber}BltUsed`);
    const bltLevelsDiv = document.getElementById(`lo${loNumber}BltLevels`);
    
    // Update the state
    appState.frameworks[`lo${loNumber}`].bltUsed = checkbox.checked;
    
    // Show/hide BLT levels
    if (checkbox.checked) {
        // If showing levels, create the HTML if it doesn't exist
        if (bltLevelsDiv.innerHTML === '') {
            bltLevelsDiv.innerHTML = `
                <p>Select Bloom's Taxonomy levels to focus on:</p>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo${loNumber}BltRemember" onchange="toggleBltLevel(${loNumber}, 'remember')">
                    <label for="lo${loNumber}BltRemember">Remember</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo${loNumber}BltUnderstand" onchange="toggleBltLevel(${loNumber}, 'understand')">
                    <label for="lo${loNumber}BltUnderstand">Understand</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo${loNumber}BltApply" onchange="toggleBltLevel(${loNumber}, 'apply')">
                    <label for="lo${loNumber}BltApply">Apply</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo${loNumber}BltAnalyze" onchange="toggleBltLevel(${loNumber}, 'analyze')">
                    <label for="lo${loNumber}BltAnalyze">Analyze</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo${loNumber}BltEvaluate" onchange="toggleBltLevel(${loNumber}, 'evaluate')">
                    <label for="lo${loNumber}BltEvaluate">Evaluate</label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="lo${loNumber}BltCreate" onchange="toggleBltLevel(${loNumber}, 'create')">
                    <label for="lo${loNumber}BltCreate">Create</label>
                </div>
            `;
        }
        
        bltLevelsDiv.style.display = 'block';
    } else {
        bltLevelsDiv.style.display = 'none';
    }
}

// Toggle a specific BLT level
function toggleBltLevel(loNumber, level) {
    const checkbox = document.getElementById(`lo${loNumber}Blt${level.charAt(0).toUpperCase() + level.slice(1)}`);
    
    // Update the state
    appState.frameworks[`lo${loNumber}`].bltLevels[level] = checkbox.checked;
}

// Open Framework Edit Modal
function openFrameworkEditModal(loNumber) {
    appState.editState.currentLO = loNumber;
    
    // Set the LO number in the dropdown
    document.getElementById('editFrameworkLoNumber').value = loNumber;
    
    // Get the current framework settings
    const framework = appState.frameworks[`lo${loNumber}`];
    
    // Set the values in the form
    document.getElementById('editPrimaryFramework').value = framework.primaryFramework;
    document.getElementById('editBltUsed').checked = framework.bltUsed;
    
    // Show/hide BLT levels based on BLT usage
    document.getElementById('bltLevelsContainer').style.display = framework.bltUsed ? 'block' : 'none';
    
    // Set BLT level checkboxes
    document.getElementById('editBltRemember').checked = framework.bltLevels.remember;
    document.getElementById('editBltUnderstand').checked = framework.bltLevels.understand;
    document.getElementById('editBltApply').checked = framework.bltLevels.apply;
    document.getElementById('editBltAnalyze').checked = framework.bltLevels.analyze;
    document.getElementById('editBltEvaluate').checked = framework.bltLevels.evaluate;
    document.getElementById('editBltCreate').checked = framework.bltLevels.create;
    
    // Show the modal
    document.getElementById('frameworkEditModal').classList.add('active');
}

// Save Framework changes
function saveFrameworkChanges() {
    const loNumber = appState.editState.currentLO;
    const primaryFramework = document.getElementById('editPrimaryFramework').value;
    const bltUsed = document.getElementById('editBltUsed').checked;
    
    // Get BLT levels if BLT is used
    let bltLevels = {
        remember: false,
        understand: false,
        apply: false,
        analyze: false,
        evaluate: false,
        create: false
    };
    
    if (bltUsed) {
        bltLevels.remember = document.getElementById('editBltRemember').checked;
        bltLevels.understand = document.getElementById('editBltUnderstand').checked;
        bltLevels.apply = document.getElementById('editBltApply').checked;
        bltLevels.analyze = document.getElementById('editBltAnalyze').checked;
        bltLevels.evaluate = document.getElementById('editBltEvaluate').checked;
        bltLevels.create = document.getElementById('editBltCreate').checked;
    }
    
    // Update the state
    appState.frameworks[`lo${loNumber}`].primaryFramework = primaryFramework;
    appState.frameworks[`lo${loNumber}`].bltUsed = bltUsed;
    appState.frameworks[`lo${loNumber}`].bltLevels = bltLevels;
    
    // Close the modal
    closeModal('frameworkEditModal');
    
    // Refresh the frameworks display
    prepareFrameworksSubstep();
}

// STEP 2B: EXAM TECHNIQUES FUNCTIONS

// Display the exam techniques substep content
function prepareExamTechniquesSubstep() {
    // Update the LO summary with frameworks included
    let summaryHtml = '<h4>Learning Objectives & Frameworks</h4>';
    
    // LO1
    summaryHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1</span>
            <span class="lo-badge ${appState.learningObjectives.lo1.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo1.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo1.title}</strong></p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Framework:</strong> ${appState.frameworks.lo1.primaryFramework}</p>
            ${appState.frameworks.lo1.bltUsed ? '<p><strong>BLT Supplementary:</strong> Yes</p>' : ''}
        </div>
    </div>`;
    
    // LO2
    summaryHtml += `<div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2</span>
            <span class="lo-badge ${appState.learningObjectives.lo2.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo2.hasPractical ? 'Practical' : 'Theory'}</span>
        </div>
        <p><strong>${appState.learningObjectives.lo2.title}</strong></p>
        <div style="margin-top: 0.5rem;">
            <p><strong>Framework:</strong> ${appState.frameworks.lo2.primaryFramework}</p>
            ${appState.frameworks.lo2.bltUsed ? '<p><strong>BLT Supplementary:</strong> Yes</p>' : ''}
        </div>
    </div>`;
    
    // LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        summaryHtml += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3</span>
                <span class="lo-badge ${appState.learningObjectives.lo3.hasPractical ? 'badge-practical' : ''}">${appState.learningObjectives.lo3.hasPractical ? 'Practical' : 'Theory'}</span>
            </div>
            <p><strong>${appState.learningObjectives.lo3.title}</strong></p>
            <div style="margin-top: 0.5rem;">
                <p><strong>Framework:</strong> ${appState.frameworks.lo3.primaryFramework}</p>
                ${appState.frameworks.lo3.bltUsed ? '<p><strong>BLT Supplementary:</strong> Yes</p>' : ''}
            </div>
        </div>`;
    }
    
    document.getElementById('examTechniquesLOSummary').innerHTML = summaryHtml;
    
    // Create the exam techniques selection interfaces
    let techniquesHtml = '';
    
    // LO1 Exam Techniques Selection
    techniquesHtml += `
    <div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 1 Exam Techniques</span>
            <button class="edit-button" id="editLO1TechniquesBtn">Edit</button>
        </div>
        <p>Select exam techniques to explicitly teach for this learning objective:</p>
        <div class="technique-selection">
            <div class="technique-badge ${appState.examTechniques.lo1.BLT ? 'selected' : ''}" onclick="toggleTechnique(1, 'BLT')">
                BLT - Because, Link, Therefore
            </div>
            <div class="technique-badge ${appState.examTechniques.lo1.EVERY ? 'selected' : ''}" onclick="toggleTechnique(1, 'EVERY')">
                EVERY - Equation, Values, Equals, Rearrange, Y=Answer
            </div>
            <div class="technique-badge ${appState.examTechniques.lo1.MEMES ? 'selected' : ''}" onclick="toggleTechnique(1, 'MEMES')">
                MEMES - Method, Equipment, Measurements, Evaluation, Safety
            </div>
            <div class="technique-badge ${appState.examTechniques.lo1.GRAPH ? 'selected' : ''}" onclick="toggleTechnique(1, 'GRAPH')">
                GRAPH - Grid, Right scale, Axis labeled, Plot, Head (title)
            </div>
        </div>
        
        <div style="margin-top: 1rem;">
            <label class="form-label" for="lo1ExamNotes">Additional Notes (Optional):</label>
            <textarea id="lo1ExamNotes" class="form-control" rows="2" placeholder="Add any specific instructions or focus areas for exam technique"
                onchange="updateExamNotes(1)">${appState.examTechniques.lo1.notes}</textarea>
        </div>
    </div>
    `;
    
    // LO2 Exam Techniques Selection
    techniquesHtml += `
    <div class="lo-container">
        <div class="lo-header">
            <span>Learning Objective 2 Exam Techniques</span>
            <button class="edit-button" id="editLO2TechniquesBtn">Edit</button>
        </div>
        <p>Select exam techniques to explicitly teach for this learning objective:</p>
        <div class="technique-selection">
            <div class="technique-badge ${appState.examTechniques.lo2.BLT ? 'selected' : ''}" onclick="toggleTechnique(2, 'BLT')">
                BLT - Because, Link, Therefore
            </div>
            <div class="technique-badge ${appState.examTechniques.lo2.EVERY ? 'selected' : ''}" onclick="toggleTechnique(2, 'EVERY')">
                EVERY - Equation, Values, Equals, Rearrange, Y=Answer
            </div>
            <div class="technique-badge ${appState.examTechniques.lo2.MEMES ? 'selected' : ''}" onclick="toggleTechnique(2, 'MEMES')">
                MEMES - Method, Equipment, Measurements, Evaluation, Safety
            </div>
            <div class="technique-badge ${appState.examTechniques.lo2.GRAPH ? 'selected' : ''}" onclick="toggleTechnique(2, 'GRAPH')">
                GRAPH - Grid, Right scale, Axis labeled, Plot, Head (title)
            </div>
        </div>
        
        <div style="margin-top: 1rem;">
            <label class="form-label" for="lo2ExamNotes">Additional Notes (Optional):</label>
            <textarea id="lo2ExamNotes" class="form-control" rows="2" placeholder="Add any specific instructions or focus areas for exam technique"
                onchange="updateExamNotes(2)">${appState.examTechniques.lo2.notes}</textarea>
        </div>
    </div>
    `;
    
    // LO3 Exam Techniques Selection (if LO3 exists)
    if (appState.learningObjectives.lo3.exists) {
        techniquesHtml += `
        <div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective 3 Exam Techniques</span>
                <button class="edit-button" id="editLO3TechniquesBtn">Edit</button>
            </div>
            <p>Select exam techniques to explicitly teach for this learning objective:</p>
            <div class="technique-selection">
                <div class="technique-badge ${appState.examTechniques.lo3.BLT ? 'selected' : ''}" onclick="toggleTechnique(3, 'BLT')">
                    BLT - Because, Link, Therefore
                </div>
                <div class="technique-badge ${appState.examTechniques.lo3.EVERY ? 'selected' : ''}" onclick="toggleTechnique(3, 'EVERY')">
                    EVERY - Equation, Values, Equals, Rearrange, Y=Answer
                </div>
                <div class="technique-badge ${appState.examTechniques.lo3.MEMES ? 'selected' : ''}" onclick="toggleTechnique(3, 'MEMES')">
                    MEMES - Method, Equipment, Measurements, Evaluation, Safety
                </div>
                <div class="technique-badge ${appState.examTechniques.lo3.GRAPH ? 'selected' : ''}" onclick="toggleTechnique(3, 'GRAPH')">
                    GRAPH - Grid, Right scale, Axis labeled, Plot, Head (title)
                </div>
            </div>
            
            <div style="margin-top: 1rem;">
                <label class="form-label" for="lo3ExamNotes">Additional Notes (Optional):</label>
                <textarea id="lo3ExamNotes" class="form-control" rows="2" placeholder="Add any specific instructions or focus areas for exam technique"
                    onchange="updateExamNotes(3)">${appState.examTechniques.lo3.notes}</textarea>
            </div>
        </div>
        `;
    }
    
    // Add the exam techniques HTML to the page
    document.getElementById('exam-techniques-content').innerHTML = techniquesHtml;
    
    // Add event listeners for edit buttons
    document.getElementById('editLO1TechniquesBtn').addEventListener('click', () => openExamTechniqueEditModal(1));
    document.getElementById('editLO2TechniquesBtn').addEventListener('click', () => openExamTechniqueEditModal(2));
    if (appState.learningObjectives.lo3.exists) {
        document.getElementById('editLO3TechniquesBtn').addEventListener('click', () => openExamTechniqueEditModal(3));
    }
}

// Toggle an exam technique selection
function toggleTechnique(loNumber, technique) {
    // Toggle the state
    appState.examTechniques[`lo${loNumber}`][technique] = !appState.examTechniques[`lo${loNumber}`][technique];
    
    // Update the UI
    const badge = document.querySelector(`.lo-container:nth-child(${loNumber}) .technique-badge:contains('${technique}')`);
    if (appState.examTechniques[`lo${loNumber}`][technique]) {
        badge.classList.add('selected');
    } else {
        badge.classList.remove('selected');
    }
}

// Update exam technique notes
function updateExamNotes(loNumber) {
    const notes = document.getElementById(`lo${loNumber}ExamNotes`).value;
    appState.examTechniques[`lo${loNumber}`].notes = notes;
}

// Open Exam Technique Edit Modal
function openExamTechniqueEditModal(loNumber) {
    appState.editState.currentLO = loNumber;
    
    // Set the LO number in the dropdown
    document.getElementById('editTechniqueLoNumber').value = loNumber;
    
    // Get the current exam technique settings
    const techniques = appState.examTechniques[`lo${loNumber}`];
    
    // Set checkboxes
    document.getElementById('editTechniqueBLT').checked = techniques.BLT;
    document.getElementById('editTechniqueEVERY').checked = techniques.EVERY;
    document.getElementById('editTechniqueMEMES').checked = techniques.MEMES;
    document.getElementById('editTechniqueGRAPH').checked = techniques.GRAPH;
    
    // Set notes
    document.getElementById('editExamNotes').value = techniques.notes;
    
    // Show the modal
    document.getElementById('examTechniqueEditModal').classList.add('active');
}

// Save Exam Technique changes
function saveExamTechniqueChanges() {
    const loNumber = appState.editState.currentLO;
    
    // Get checkbox values
    const blt = document.getElementById('editTechniqueBLT').checked;
    const every = document.getElementById('editTechniqueEVERY').checked;
    const memes = document.getElementById('editTechniqueMEMES').checked;
    const graph = document.getElementById('editTechniqueGRAPH').checked;
    
    // Get notes
    const notes = document.getElementById('editExamNotes').value;
    
    // Update the state
    appState.examTechniques[`lo${loNumber}`].BLT = blt;
    appState.examTechniques[`lo${loNumber}`].EVERY = every;
    appState.examTechniques[`lo${loNumber}`].MEMES = memes;
    appState.examTechniques[`lo${loNumber}`].GRAPH = graph;
    appState.examTechniques[`lo${loNumber}`].notes = notes;
    
    // Close the modal
    closeModal('examTechniqueEditModal');
    
    // Refresh the exam techniques display
    prepareExamTechniquesSubstep();
}


ðŸ“„ FILE: step3.js
==================================================
// ===== STEP 3: SLIDE GENERATION FUNCTIONALITY =====

// ===== SUBSTEP 3A: RETRIEVAL PRACTICE SLIDES =====

// Initialize Step 3A (Retrieval Practice Slides)
function initializeStep3A() {
    // Generate the retrieval practice prompt when button is clicked
    document.getElementById('generateRetrievalPromptBtn').addEventListener('click', generateRetrievalPracticePrompt);
    
    // Copy retrieval practice prompt to clipboard
    document.getElementById('copyRetrievalPromptBtn').addEventListener('click', () => {
        copyToClipboard('retrievalPromptTextarea');
    });
    
    // Preview retrieval practice response
    document.getElementById('previewRetrievalResponseBtn').addEventListener('click', () => {
        previewRetrievalPracticeResponse();
    });
    
    // Switch between formatted and tagged response views
    document.querySelectorAll('#retrievalPreview .response-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // Update active tab
            document.querySelectorAll('#retrievalPreview .response-tab').forEach(t => {
                t.classList.remove('active');
            });
            this.classList.add('active');
            
            // Show corresponding content
            document.querySelectorAll('#retrievalPreview .response-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(`${tabId}Response`).classList.add('active');
        });
    });
    
    // Enable continue button when response is processed
    document.getElementById('retrievalResponseTextarea').addEventListener('input', function() {
        processRetrievalPracticeResponse(this.value);
        document.getElementById('continueToTeachingInputBtn').disabled = !this.value.trim();
    });
    
    // Add event listeners for editing retrieval questions
    document.getElementById('editRetrievalQuestionsBtn').addEventListener('click', openRetrievalQuestionsModal);
    document.getElementById('saveRetrievalQuestionsBtn').addEventListener('click', saveRetrievalQuestions);
    
    // Load prior knowledge from Step 1D
    loadPriorKnowledgeForRetrieval();
}

// Generate the retrieval practice prompt
function generateRetrievalPracticePrompt() {
    if (!validateStep3ARequirements()) return;
    
    // Get prior knowledge from Step 1
    const priorKnowledge = appState.priorKnowledge;
    const loCount = appState.learningObjectives.count;
    
    // Create the retrieval practice prompt
    let prompt = `You are an expert science teacher creating slide content for a GCSE lesson. 

I need you to create 5-10 retrieval practice questions for the beginning of my lesson on "${appState.lessonInfo.lessonTitle}".

Course Details:
- Exam Board: ${appState.lessonInfo.provider}
- Subject: ${appState.lessonInfo.subject}
- Topic: ${appState.lessonInfo.topic}
- Level: ${appState.lessonInfo.level}
- Student Ability: ${appState.lessonInfo.ability}

These retrieval questions should be based on the prior knowledge needed for this lesson:

`;

    // Add prior knowledge for each learning objective
    for (let i = 1; i <= loCount; i++) {
        prompt += `For Learning Objective ${i}: "${appState.learningObjectives[`lo${i}`].title}"\n`;
        
        if (priorKnowledge[`lo${i}`].length > 0) {
            priorKnowledge[`lo${i}`].forEach(item => {
                prompt += `- ${item}\n`;
            });
        } else {
            prompt += "- No specific prior knowledge identified\n";
        }
        
        prompt += "\n";
    }
    
    // Add requirements for the slide
    prompt += `Create 5-10 retrieval practice questions that:
1. Test the essential prior knowledge
2. Progress from simple recall to application
3. Include a mix of multiple choice and short answer questions
4. Are clear and concise

For each question, please provide:
- The question text
- Question type (multiple choice, short answer, true/false, etc.)
- Correct answer
- Any distractors for multiple choice questions
- Brief explanation of why this question is relevant

Output your response in this XML format:
<retrievalQuestions>
  <question>
    <text>Question text goes here</text>
    <type>multiple-choice/short-answer/true-false</type>
    <answer>Correct answer</answer>
    <distractors>
      <distractor>Wrong answer 1</distractor>
      <distractor>Wrong answer 2</distractor>
      <distractor>Wrong answer 3</distractor>
    </distractors>
    <explanation>Explanation of why this is important</explanation>
    <priorKnowledgeLink>Which aspect of prior knowledge this tests</priorKnowledgeLink>
  </question>
  <!-- Repeat for each question -->
</retrievalQuestions>

Additionally, suggest 2-3 slide layout formats that would work well for these retrieval questions with examples of each.`;

    // Set the prompt in the textarea
    document.getElementById('retrievalPromptTextarea').value = prompt;
}

// Preview the retrieval practice response
function previewRetrievalPracticeResponse() {
    const responseText = document.getElementById('retrievalResponseTextarea').value.trim();
    if (!responseText) {
        alert('Please paste Claude\'s response first');
        return;
    }
    
    // Display tagged response
    document.getElementById('retrievalTaggedResponse').innerHTML = escapeHTML(responseText);
    
    // Process and display formatted response
    processRetrievalPracticeResponse(responseText);
    
    // Show the preview
    document.getElementById('retrievalPreview').style.display = 'block';
    document.getElementById('retrievalEditContainer').style.display = 'block';
}

// Process the retrieval practice response
function processRetrievalPracticeResponse(responseText) {
    try {
        // Extract the XML content
        const xmlMatch = responseText.match(/<retrievalQuestions>[\s\S]*?<\/retrievalQuestions>/);
        if (!xmlMatch) {
            console.error('No retrievalQuestions tag found in the response');
            return;
        }
        
        const xmlContent = xmlMatch[0];
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');
        
        // Store in appState
        appState.responseTags.retrievalQuestions = xmlContent;
        appState.responses.retrieval = responseText;
        
        // Parse questions from XML
        const questionNodes = xmlDoc.querySelectorAll('question');
        appState.slides.retrieval.questions = [];
        
        questionNodes.forEach((questionNode, index) => {
            const question = {
                text: getXmlChildText(questionNode, 'text') || '',
                type: getXmlChildText(questionNode, 'type') || '',
                answer: getXmlChildText(questionNode, 'answer') || '',
                distractors: [],
                explanation: getXmlChildText(questionNode, 'explanation') || '',
                priorKnowledgeLink: getXmlChildText(questionNode, 'priorKnowledgeLink') || ''
            };
            
            // Get distractors if they exist
            const distractorNodes = questionNode.querySelectorAll('distractors > distractor');
            distractorNodes.forEach(distractor => {
                question.distractors.push(distractor.textContent.trim());
            });
            
            appState.slides.retrieval.questions.push(question);
        });
        
        // Generate formatted HTML for preview
        let formattedHTML = '<h4>Retrieval Practice Questions</h4>';
        
        appState.slides.retrieval.questions.forEach((question, index) => {
            formattedHTML += `
            <div class="preview-question">
                <div class="question-header">
                    <h5>Question ${index + 1} (${question.type})</h5>
                </div>
                <p><strong>Question:</strong> ${question.text}</p>
                <p><strong>Answer:</strong> ${question.answer}</p>`;
                
            if (question.distractors && question.distractors.length > 0) {
                formattedHTML += `<p><strong>Distractors:</strong></p>
                <ul>`;
                question.distractors.forEach(distractor => {
                    formattedHTML += `<li>${distractor}</li>`;
                });
                formattedHTML += `</ul>`;
            }
            
            formattedHTML += `
                <p><strong>Explanation:</strong> ${question.explanation}</p>
                <p><strong>Prior Knowledge Link:</strong> ${question.priorKnowledgeLink}</p>
            </div>`;
        });
        
        // Add suggested layouts if found
        const layoutMatch = responseText.match(/slide layout formats?([^<]*)/i);
        if (layoutMatch) {
            formattedHTML += `<h4>Suggested Slide Layouts</h4>
            <div class="layout-suggestions">
                <p>${layoutMatch[1].trim()}</p>
            </div>`;
        }
        
        document.getElementById('retrievalFormattedResponse').innerHTML = formattedHTML;
        
        // Update the retrieval question edit UI
        updateRetrievalQuestionsEditUI();
        
        return true;
    } catch (error) {
        console.error('Error processing retrieval practice response:', error);
        document.getElementById('retrievalFormattedResponse').innerHTML = '<p class="error">Error processing the response. Please check the format.</p>';
        return false;
    }
}

// Load prior knowledge for retrieval
function loadPriorKnowledgeForRetrieval() {
    if (!appState.priorKnowledge.lo1.length) return;
    
    let priorKnowledgeHTML = '<h4>Prior Knowledge to Test</h4><div class="prior-knowledge-list">';
    
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        priorKnowledgeHTML += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective ${i}</span>
            </div>
            <p><strong>${appState.learningObjectives[`lo${i}`].title}</strong></p>
            <ul>`;
            
        appState.priorKnowledge[`lo${i}`].forEach(item => {
            priorKnowledgeHTML += `<li>${item}</li>`;
        });
        
        priorKnowledgeHTML += `</ul></div>`;
    }
    
    priorKnowledgeHTML += '</div>';
    
    document.getElementById('priorKnowledgeForRetrieval').innerHTML = priorKnowledgeHTML;
}

// Update the retrieval questions edit UI
function updateRetrievalQuestionsEditUI() {
    const questionsContainer = document.getElementById('retrievalQuestionsContainer');
    questionsContainer.innerHTML = '';
    
    appState.slides.retrieval.questions.forEach((question, index) => {
        const questionElement = document.createElement('div');
        questionElement.className = 'retrieval-question';
        questionElement.innerHTML = `
            <div class="question-header">
                <h5>Question ${index + 1}</h5>
                <div class="question-actions">
                    <button class="btn btn-sm btn-outline" onclick="moveRetrievalQuestion(${index}, 'up')" ${index === 0 ? 'disabled' : ''}>â†‘</button>
                    <button class="btn btn-sm btn-outline" onclick="moveRetrievalQuestion(${index}, 'down')" ${index === appState.slides.retrieval.questions.length - 1 ? 'disabled' : ''}>â†“</button>
                    <button class="btn btn-sm btn-outline delete-btn" onclick="removeRetrievalQuestion(${index})">Ã—</button>
                </div>
            </div>
            <div class="form-group">
                <label class="form-label">Question Text:</label>
                <textarea class="form-control question-text" rows="2">${question.text}</textarea>
            </div>
            <div class="form-group">
                <label class="form-label">Question Type:</label>
                <select class="form-control question-type">
                    <option value="multiple-choice" ${question.type === 'multiple-choice' ? 'selected' : ''}>Multiple Choice</option>
                    <option value="short-answer" ${question.type === 'short-answer' ? 'selected' : ''}>Short Answer</option>
                    <option value="true-false" ${question.type === 'true-false' ? 'selected' : ''}>True/False</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Correct Answer:</label>
                <input type="text" class="form-control question-answer" value="${question.answer}">
            </div>
            <div class="distractors-container ${question.type !== 'multiple-choice' ? 'hidden' : ''}">
                <label class="form-label">Distractors:</label>
                <div class="distractors-list">
                    ${question.distractors.map((distractor, i) => `
                        <div class="distractor-item">
                            <input type="text" class="form-control distractor-text" value="${distractor}">
                            <button class="btn btn-sm btn-outline delete-btn" onclick="removeDistractor(${index}, ${i})">Ã—</button>
                        </div>
                    `).join('')}
                </div>
                <button class="btn btn-outline btn-sm" onclick="addDistractor(${index})">+ Add Distractor</button>
            </div>
            <div class="form-group">
                <label class="form-label">Explanation:</label>
                <textarea class="form-control question-explanation" rows="2">${question.explanation}</textarea>
            </div>
            <div class="form-group">
                <label class="form-label">Prior Knowledge Link:</label>
                <input type="text" class="form-control question-link" value="${question.priorKnowledgeLink}">
            </div>
        `;
        
        questionsContainer.appendChild(questionElement);
    });
    
    // Add change listeners for question type to show/hide distractors
    document.querySelectorAll('.question-type').forEach((select, index) => {
        select.addEventListener('change', function() {
            const distractorsContainer = this.closest('.retrieval-question').querySelector('.distractors-container');
            if (this.value === 'multiple-choice') {
                distractorsContainer.classList.remove('hidden');
            } else {
                distractorsContainer.classList.add('hidden');
            }
        });
    });
    
    // Add "Add Question" button
    const addButton = document.createElement('button');
    addButton.className = 'btn btn-primary';
    addButton.textContent = '+ Add New Question';
    addButton.onclick = addRetrievalQuestion;
    questionsContainer.appendChild(addButton);
}

// Open retrieval questions edit modal
function openRetrievalQuestionsModal() {
    // Set up temporary state
    appState.editState.tempRetrievalQuestions = JSON.parse(JSON.stringify(appState.slides.retrieval.questions));
    
    // Update the edit UI
    updateRetrievalQuestionsEditUI();
    
    // Show the modal
    document.getElementById('retrievalQuestionsEditModal').style.display = 'flex';
}

// Save retrieval questions
function saveRetrievalQuestions() {
    // Collect edited data from UI
    const questionElements = document.querySelectorAll('.retrieval-question');
    appState.slides.retrieval.questions = [];
    
    questionElements.forEach((element, index) => {
        const type = element.querySelector('.question-type').value;
        const distractors = [];
        
        if (type === 'multiple-choice') {
            element.querySelectorAll('.distractor-text').forEach(input => {
                if (input.value.trim()) {
                    distractors.push(input.value.trim());
                }
            });
        }
        
        const question = {
            text: element.querySelector('.question-text').value.trim(),
            type: type,
            answer: element.querySelector('.question-answer').value.trim(),
            distractors: distractors,
            explanation: element.querySelector('.question-explanation').value.trim(),
            priorKnowledgeLink: element.querySelector('.question-link').value.trim()
        };
        
        appState.slides.retrieval.questions.push(question);
    });
    
    // Update the preview
    processRetrievalPracticeResponse(appState.responses.retrieval);
    
    // Close the modal
    closeModal('retrievalQuestionsEditModal');
}

// Add a new retrieval question
function addRetrievalQuestion() {
    appState.slides.retrieval.questions.push({
        text: '',
        type: 'multiple-choice',
        answer: '',
        distractors: ['', '', ''],
        explanation: '',
        priorKnowledgeLink: ''
    });
    
    updateRetrievalQuestionsEditUI();
}

// Remove a retrieval question
function removeRetrievalQuestion(index) {
    if (confirm('Are you sure you want to remove this question?')) {
        appState.slides.retrieval.questions.splice(index, 1);
        updateRetrievalQuestionsEditUI();
    }
}

// Move a retrieval question up or down
function moveRetrievalQuestion(index, direction) {
    const questions = appState.slides.retrieval.questions;
    
    if (direction === 'up' && index > 0) {
        [questions[index], questions[index - 1]] = [questions[index - 1], questions[index]];
    } else if (direction === 'down' && index < questions.length - 1) {
        [questions[index], questions[index + 1]] = [questions[index + 1], questions[index]];
    }
    
    updateRetrievalQuestionsEditUI();
}

// Add a distractor to a question
function addDistractor(questionIndex) {
    const question = appState.slides.retrieval.questions[questionIndex];
    question.distractors.push('');
    updateRetrievalQuestionsEditUI();
}

// Remove a distractor from a question
function removeDistractor(questionIndex, distractorIndex) {
    const question = appState.slides.retrieval.questions[questionIndex];
    question.distractors.splice(distractorIndex, 1);
    updateRetrievalQuestionsEditUI();
}

// Validate requirements for Step 3A
function validateStep3ARequirements() {
    if (!appState.responseTags.priorKnowledge) {
        alert('Please complete Step 1D (Prior Knowledge) first');
        return false;
    }
    return true;
}

// ===== SUBSTEP 3B: TEACHING INPUT SLIDES =====

// Initialize Step 3B (Teaching Input Slides)
function initializeStep3B() {
    // Generate the teaching input prompt when button is clicked
    document.getElementById('generateTeachingInputPromptBtn').addEventListener('click', generateTeachingInputPrompt);
    
    // Copy teaching input prompt to clipboard
    document.getElementById('copyTeachingInputPromptBtn').addEventListener('click', () => {
        copyToClipboard('teachingInputPromptTextarea');
    });
    
    // Preview teaching input response
    document.getElementById('previewTeachingInputResponseBtn').addEventListener('click', () => {
        previewTeachingInputResponse();
    });
    
    // Switch between formatted and tagged response views
    document.querySelectorAll('#teachingInputPreview .response-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // Update active tab
            document.querySelectorAll('#teachingInputPreview .response-tab').forEach(t => {
                t.classList.remove('active');
            });
            this.classList.add('active');
            
            // Show corresponding content
            document.querySelectorAll('#teachingInputPreview .response-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(`${tabId}Response`).classList.add('active');
        });
    });
    
    // Enable continue button when response is processed
    document.getElementById('teachingInputResponseTextarea').addEventListener('input', function() {
        processTeachingInputResponse(this.value);
        document.getElementById('continueToFormativeAssessmentBtn').disabled = !this.value.trim();
    });
    
    // Add event listeners for editing teaching slides
    document.getElementById('editTeachingSlidesBtn').addEventListener('click', openTeachingSlidesModal);
    document.getElementById('saveTeachingSlidesBtn').addEventListener('click', saveTeachingSlides);
    
    // Display learning objectives summary for teaching slides
    displayLearningObjectivesForTeaching();
}

// Generate the teaching input prompt
function generateTeachingInputPrompt() {
    if (!validateStep3BRequirements()) return;
    
    // Get learning objectives, types, and frameworks
    const learningObjectives = appState.learningObjectives;
    const loTypes = appState.loTypes;
    const frameworks = appState.frameworks;
    const misconceptions = appState.misconceptions;
    const practicalRequirements = appState.practicalRequirements;
    const frayerModels = appState.frayerModels;
    
    // Create the teaching input prompt
    let prompt = `You are an expert science teacher creating slide content for a GCSE lesson. 

I need you to create teaching input slides for my lesson on "${appState.lessonInfo.lessonTitle}".

Course Details:
- Exam Board: ${appState.lessonInfo.provider}
- Subject: ${appState.lessonInfo.subject}
- Topic: ${appState.lessonInfo.topic}
- Level: ${appState.lessonInfo.level}
- Student Ability: ${appState.lessonInfo.ability}

Here are the learning objectives for this lesson:
`;

    // Add learning objectives and their frameworks
    for (let i = 1; i <= learningObjectives.count; i++) {
        prompt += `\nLearning Objective ${i}: "${learningObjectives[`lo${i}`].title}"
- Description: ${learningObjectives[`lo${i}`].description}
- Assessment Type: ${loTypes[`lo${i}`].aoCategory} (${loTypes[`lo${i}`].specificType})
- Teaching Framework: ${frameworks[`lo${i}`].primaryFramework}`;

        // Add BLT information if used
        if (frameworks[`lo${i}`].bltUsed) {
            const bltLevels = frameworks[`lo${i}`].bltLevels;
            prompt += `
- Using Bloom's Taxonomy levels: ${Object.entries(bltLevels)
                .filter(([level, used]) => used)
                .map(([level]) => level.charAt(0).toUpperCase() + level.slice(1))
                .join(', ')}`;
        }
        
        // Add practical information if applicable
        if (learningObjectives[`lo${i}`].hasPractical && practicalRequirements[`lo${i}`].title) {
            prompt += `
- Includes Practical: "${practicalRequirements[`lo${i}`].title}"`;
        }
        
        // Add Frayer Model information if applicable
        if (frayerModels[`lo${i}`].term) {
            prompt += `
- Includes Frayer Model for: "${frayerModels[`lo${i}`].term}"`;
        }
        
        // Add key misconceptions to address
        if (misconceptions[`lo${i}`].length > 0) {
            prompt += `
- Key Misconceptions to Address:`;
            misconceptions[`lo${i}`].forEach(misconception => {
                prompt += `
  * ${misconception}`;
            });
        }
    }
    
    // Add slide structure and requirements
    prompt += `\n\nFor each learning objective, please create the following slide content:

1. An engaging introduction slide that hooks students' interest
2. Key teaching input slides that follow the specified framework for each objective
3. Clear explanations that address the identified misconceptions
4. Visual elements descriptions or diagrams where appropriate

Follow these specific framework guidelines:
- For CER (Claim, Evidence, Reasoning): Structure content with clear claims, supporting evidence, and scientific reasoning
- For POE (Predict, Observe, Explain): Create slides that prompt prediction, show observation, and guide explanation
- For SOLO Taxonomy: Progress from unistructural to extended abstract understanding
- For PEEL (Point, Evidence, Explain, Link): Organize content with main points, evidence, explanations, and links to broader concepts
- For SEEC (State, Explain, Example, Connection): Present statements, explanations, examples, and connections

`;

    // Add practical requirements if any learning objective has practical
    const hasPractical = Object.values(learningObjectives)
        .some(lo => typeof lo === 'object' && lo.hasPractical);
    
    if (hasPractical) {
        prompt += `Include practical slides for any learning objective marked with a practical. For these, include:
- Aim of the practical
- Equipment list
- Step-by-step procedure
- Safety considerations
- Data collection tables or result expectations

`;
    }
    
    // Add Frayer Model requirements if any exists
    const hasFrayer = Object.values(frayerModels)
        .some(model => typeof model === 'object' && model.term);
    
    if (hasFrayer) {
        prompt += `Include Frayer Model slides for any terms identified. For these, include:
- Central concept/term
- Definition
- Examples
- Non-examples
- Essential characteristics

`;
    }
    
    // Add output format requirements
    prompt += `Output your response in this XML format:
<teachingSlides>
  <learningObjective number="1">
    <title>${learningObjectives.lo1.title}</title>
    <slides>
      <slide type="introduction">
        <title>Slide title</title>
        <content>Slide content goes here</content>
        <visualElements>Description of any visuals, diagrams, or images</visualElements>
        <notes>Teacher notes for delivery</notes>
      </slide>
      <!-- Additional slides for this learning objective -->
    </slides>
  </learningObjective>
  <!-- Repeat for each learning objective -->
</teachingSlides>

For each slide, specify the slide type as one of:
- introduction (hook/engagement)
- keyContent (main teaching points)
- framework (structure based on the teaching framework)
- practical (for practical activities)
- frayerModel (for concept definitions)
- misconception (addressing common errors)
- summary (reviewing key points)

Create approximately 4-6 slides per learning objective, ensuring a logical flow of information.`;

    // Set the prompt in the textarea
    document.getElementById('teachingInputPromptTextarea').value = prompt;
}

// Preview the teaching input response
function previewTeachingInputResponse() {
    const responseText = document.getElementById('teachingInputResponseTextarea').value.trim();
    if (!responseText) {
        alert('Please paste Claude\'s response first');
        return;
    }
    
    // Display tagged response
    document.getElementById('teachingInputTaggedResponse').innerHTML = escapeHTML(responseText);
    
    // Process and display formatted response
    processTeachingInputResponse(responseText);
    
    // Show the preview
    document.getElementById('teachingInputPreview').style.display = 'block';
    document.getElementById('teachingInputEditContainer').style.display = 'block';
}

// Process the teaching input response
function processTeachingInputResponse(responseText) {
    try {
        // Extract the XML content
        const xmlMatch = responseText.match(/<teachingSlides>[\s\S]*?<\/teachingSlides>/);
        if (!xmlMatch) {
            console.error('No teachingSlides tag found in the response');
            return;
        }
        
        const xmlContent = xmlMatch[0];
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');
        
        // Store in appState
        appState.responseTags.teachingSlides = xmlContent;
        appState.responses.teachingInput = responseText;
        
        // Parse learning objectives and slides from XML
        const loNodes = xmlDoc.querySelectorAll('learningObjective');
        appState.slides.teaching = {};
        
        loNodes.forEach(loNode => {
            const loNumber = loNode.getAttribute('number');
            const loTitle = getXmlChildText(loNode, 'title') || '';
            const slideNodes = loNode.querySelectorAll('slides > slide');
            
            appState.slides.teaching[`lo${loNumber}`] = {
                title: loTitle,
                slides: []
            };
            
            slideNodes.forEach(slideNode => {
                const slide = {
                    type: slideNode.getAttribute('type') || '',
                    title: getXmlChildText(slideNode, 'title') || '',
                    content: getXmlChildText(slideNode, 'content') || '',
                    visualElements: getXmlChildText(slideNode, 'visualElements') || '',
                    notes: getXmlChildText(slideNode, 'notes') || ''
                };
                
                appState.slides.teaching[`lo${loNumber}`].slides.push(slide);
            });
        });
        
        // Generate formatted HTML for preview
        let formattedHTML = '<h4>Teaching Input Slides</h4>';
        
        for (let i = 1; i <= appState.learningObjectives.count; i++) {
            if (!appState.slides.teaching[`lo${i}`]) continue;
            
            formattedHTML += `
            <div class="lo-container">
                <div class="lo-header">
                    <h5>Learning Objective ${i}: ${appState.slides.teaching[`lo${i}`].title}</h5>
                </div>
                <div class="slides-container">`;
                
            appState.slides.teaching[`lo${i}`].slides.forEach((slide, slideIndex) => {
                formattedHTML += `
                <div class="slide-preview">
                    <div class="slide-header">
                        <span class="slide-type">${slide.type}</span>
                        <span class="slide-number">Slide ${slideIndex + 1}</span>
                    </div>
                    <h6>${slide.title}</h6>
                    <div class="slide-content">
                        <p>${slide.content.replace(/\n/g, '<br>')}</p>
                    </div>
                    ${slide.visualElements ? `
                    <div class="slide-visuals">
                        <p><strong>Visual Elements:</strong> ${slide.visualElements}</p>
                    </div>` : ''}
                    ${slide.notes ? `
                    <div class="slide-notes">
                        <p><strong>Teacher Notes:</strong> ${slide.notes}</p>
                    </div>` : ''}
                </div>`;
            });
                
            formattedHTML += `
                </div>
            </div>`;
        }
        
        document.getElementById('teachingInputFormattedResponse').innerHTML = formattedHTML;
        
        return true;
    } catch (error) {
        console.error('Error processing teaching input response:', error);
        document.getElementById('teachingInputFormattedResponse').innerHTML = '<p class="error">Error processing the response. Please check the format.</p>';
        return false;
    }
}

// Display learning objectives for teaching
function displayLearningObjectivesForTeaching() {
    if (!appState.learningObjectives.lo1.title) return;
    
    let loHTML = '<h4>Learning Objectives</h4><div class="lo-summary">';
    
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        const lo = appState.learningObjectives[`lo${i}`];
        const framework = appState.frameworks[`lo${i}`];
        
        loHTML += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective ${i}</span>
                <div>
                    <span class="framework-badge">${framework.primaryFramework}</span>
                    ${lo.hasPractical ? '<span class="practical-badge">Practical</span>' : ''}
                    ${appState.frayerModels[`lo${i}`].term ? '<span class="frayer-badge">Frayer</span>' : ''}
                </div>
            </div>
            <p><strong>${lo.title}</strong></p>
            <p>${lo.description}</p>
        </div>`;
    }
    
    loHTML += '</div>';
    
    document.getElementById('learningObjectivesForTeaching').innerHTML = loHTML;
}

// Open teaching slides edit modal
function openTeachingSlidesModal() {
    // Set up temporary state
    appState.editState.tempTeachingSlides = JSON.parse(JSON.stringify(appState.slides.teaching));
    
    // Update the edit UI
    updateTeachingSlidesEditUI();
    
    // Show the modal
    document.getElementById('teachingSlidesEditModal').style.display = 'flex';
}

// Update the teaching slides edit UI
function updateTeachingSlidesEditUI() {
    const slidesTabContainer = document.getElementById('teachingSlidesTabContainer');
    const slidesContentContainer = document.getElementById('teachingSlidesContentContainer');
    
    slidesTabContainer.innerHTML = '';
    slidesContentContainer.innerHTML = '';
    
    // Add tabs for each learning objective
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (!appState.slides.teaching[`lo${i}`]) continue;
        
        const tabElement = document.createElement('div');
        tabElement.className = `slides-tab ${i === 1 ? 'active' : ''}`;
        tabElement.setAttribute('data-lo', i);
        tabElement.textContent = `LO ${i}`;
        tabElement.onclick = function() {
            document.querySelectorAll('.slides-tab').forEach(tab => tab.classList.remove('active'));
            this.classList.add('active');
            
            document.querySelectorAll('.slides-content').forEach(content => content.classList.remove('active'));
            document.querySelector(`.slides-content[data-lo="${this.getAttribute('data-lo')}"]`).classList.add('active');
        };
        
        slidesTabContainer.appendChild(tabElement);
        
        // Add content for each learning objective
        const contentElement = document.createElement('div');
        contentElement.className = `slides-content ${i === 1 ? 'active' : ''}`;
        contentElement.setAttribute('data-lo', i);
        
        const slides = appState.slides.teaching[`lo${i}`].slides;
        
        contentElement.innerHTML = `
            <h5>${appState.learningObjectives[`lo${i}`].title}</h5>
            <div class="slides-list" id="slidesList${i}">
                ${slides.map((slide, slideIndex) => `
                <div class="slide-edit-item" data-slide="${slideIndex}">
                    <div class="slide-edit-header">
                        <span>${slide.type}: ${slide.title}</span>
                        <div class="slide-actions">
                            <button class="btn btn-sm btn-outline" onclick="moveTeachingSlide(${i}, ${slideIndex}, 'up')" ${slideIndex === 0 ? 'disabled' : ''}>â†‘</button>
                            <button class="btn btn-sm btn-outline" onclick="moveTeachingSlide(${i}, ${slideIndex}, 'down')" ${slideIndex === slides.length - 1 ? 'disabled' : ''}>â†“</button>
                            <button class="btn btn-sm btn-outline" onclick="editTeachingSlide(${i}, ${slideIndex})">Edit</button>
                            <button class="btn btn-sm btn-outline delete-btn" onclick="removeTeachingSlide(${i}, ${slideIndex})">Ã—</button>
                        </div>
                    </div>
                </div>
                `).join('')}
            </div>
            <button class="btn btn-primary" onclick="addTeachingSlide(${i})">+ Add New Slide</button>
        `;
        
        slidesContentContainer.appendChild(contentElement);
    }
}

// Save teaching slides
function saveTeachingSlides() {
    // We don't need additional processing here since each edit is saved directly to state
    // Just close the modal
    closeModal('teachingSlidesEditModal');
    
    // Update the preview
    processTeachingInputResponse(appState.responses.teachingInput);
}

// Edit a teaching slide
function editTeachingSlide(loNumber, slideIndex) {
    const slide = appState.slides.teaching[`lo${loNumber}`].slides[slideIndex];
    
    // Set up the edit modal
    document.getElementById('editSlideLoNumber').value = loNumber;
    document.getElementById('editSlideIndex').value = slideIndex;
    document.getElementById('editSlideType').value = slide.type;
    document.getElementById('editSlideTitle').value = slide.title;
    document.getElementById('editSlideContent').value = slide.content;
    document.getElementById('editSlideVisuals').value = slide.visualElements;
    document.getElementById('editSlideNotes').value = slide.notes;
    
    // Show the modal
    document.getElementById('teachingSlideEditModal').style.display = 'flex';
}

// Save edited teaching slide
function saveTeachingSlide() {
    const loNumber = document.getElementById('editSlideLoNumber').value;
    const slideIndex = document.getElementById('editSlideIndex').value;
    
    // Update slide in state
    appState.slides.teaching[`lo${loNumber}`].slides[slideIndex] = {
        type: document.getElementById('editSlideType').value,
        title: document.getElementById('editSlideTitle').value,
        content: document.getElementById('editSlideContent').value,
        visualElements: document.getElementById('editSlideVisuals').value,
        notes: document.getElementById('editSlideNotes').value
    };
    
    // Close the modal
    closeModal('teachingSlideEditModal');
    
    // Update the edit UI
    updateTeachingSlidesEditUI();
}

// Add a new teaching slide
function addTeachingSlide(loNumber) {
    // Add a new slide to the LO
    appState.slides.teaching[`lo${loNumber}`].slides.push({
        type: 'keyContent',
        title: 'New Slide',
        content: '',
        visualElements: '',
        notes: ''
    });
    
    // Update the edit UI
    updateTeachingSlidesEditUI();
    
    // Edit the new slide
    const newSlideIndex = appState.slides.teaching[`lo${loNumber}`].slides.length - 1;
    editTeachingSlide(loNumber, newSlideIndex);
}

// Remove a teaching slide
function removeTeachingSlide(loNumber, slideIndex) {
    if (confirm('Are you sure you want to remove this slide?')) {
        appState.slides.teaching[`lo${loNumber}`].slides.splice(slideIndex, 1);
        updateTeachingSlidesEditUI();
    }
}

// Move a teaching slide up or down
function moveTeachingSlide(loNumber, slideIndex, direction) {
    const slides = appState.slides.teaching[`lo${loNumber}`].slides;
    
    if (direction === 'up' && slideIndex > 0) {
        [slides[slideIndex], slides[slideIndex - 1]] = [slides[slideIndex - 1], slides[slideIndex]];
    } else if (direction === 'down' && slideIndex < slides.length - 1) {
        [slides[slideIndex], slides[slideIndex + 1]] = [slides[slideIndex + 1], slides[slideIndex]];
    }
    
    updateTeachingSlidesEditUI();
}

// Validate requirements for Step 3B
function validateStep3BRequirements() {
    if (!appState.responseTags.priorKnowledge || !appState.responseTags.frameworks) {
        alert('Please complete Steps 1 and 2 first');
        return false;
    }
    
    if (!appState.responseTags.retrievalQuestions) {
        alert('Please complete Step 3A (Retrieval Practice) first');
        return false;
    }
    
    return true;
}

// ===== SUBSTEP 3C: FORMATIVE ASSESSMENT SLIDES =====

// Initialize Step 3C (Formative Assessment Slides)
function initializeStep3C() {
    // Generate the formative assessment prompt when button is clicked
    document.getElementById('generateFormativePromptBtn').addEventListener('click', generateFormativeAssessmentPrompt);
    
    // Copy formative assessment prompt to clipboard
    document.getElementById('copyFormativePromptBtn').addEventListener('click', () => {
        copyToClipboard('formativePromptTextarea');
    });
    
    // Preview formative assessment response
    document.getElementById('previewFormativeResponseBtn').addEventListener('click', () => {
        previewFormativeAssessmentResponse();
    });
    
    // Switch between formatted and tagged response views
    document.querySelectorAll('#formativePreview .response-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // Update active tab
            document.querySelectorAll('#formativePreview .response-tab').forEach(t => {
                t.classList.remove('active');
            });
            this.classList.add('active');
            
            // Show corresponding content
            document.querySelectorAll('#formativePreview .response-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(`${tabId}Response`).classList.add('active');
        });
    });
    
    // Enable continue button when response is processed
    document.getElementById('formativeResponseTextarea').addEventListener('input', function() {
        processFormativeAssessmentResponse(this.value);
        document.getElementById('continueToSlideReviewBtn').disabled = !this.value.trim();
    });
    
    // Add event listeners for editing formative assessment questions
    document.getElementById('editFormativeQuestionsBtn').addEventListener('click', openFormativeQuestionsModal);
    document.getElementById('saveFormativeQuestionsBtn').addEventListener('click', saveFormativeQuestions);
    
    // Display learning objectives and misconceptions for formative assessment
    displayLearningObjectivesForFormative();
}

// Generate the formative assessment prompt
function generateFormativeAssessmentPrompt() {
    if (!validateStep3CRequirements()) return;
    
    // Get learning objectives, types, and misconceptions
    const learningObjectives = appState.learningObjectives;
    const loTypes = appState.loTypes;
    const misconceptions = appState.misconceptions;
    const examTechniques = appState.examTechniques;
    
    // Create the formative assessment prompt
    let prompt = `You are an expert science teacher creating formative assessment slides for a GCSE lesson. 

I need you to create formative assessment questions for my lesson on "${appState.lessonInfo.lessonTitle}".

Course Details:
- Exam Board: ${appState.lessonInfo.provider}
- Subject: ${appState.lessonInfo.subject}
- Topic: ${appState.lessonInfo.topic}
- Level: ${appState.lessonInfo.level}
- Student Ability: ${appState.lessonInfo.ability}

Here are the learning objectives for this lesson:
`;

    // Add learning objectives and their assessment types
    for (let i = 1; i <= learningObjectives.count; i++) {
        prompt += `\nLearning Objective ${i}: "${learningObjectives[`lo${i}`].title}"
- Description: ${learningObjectives[`lo${i}`].description}
- Assessment Type: ${loTypes[`lo${i}`].aoCategory} (${loTypes[`lo${i}`].specificType})`;

        // Add exam techniques if any are selected
        const techniques = [];
        if (examTechniques[`lo${i}`].BLT) techniques.push('BLT (Because, Link, Therefore)');
        if (examTechniques[`lo${i}`].EVERY) techniques.push('EVERY (Equation, Values, Equals, Rearrange, Y=Answer)');
        if (examTechniques[`lo${i}`].MEMES) techniques.push('MEMES (Method, Equipment, Measurements, Evaluation, Safety)');
        if (examTechniques[`lo${i}`].GRAPH) techniques.push('GRAPH (Grid, Right scale, Axis labeled, Plot, Head)');
        
        if (techniques.length > 0) {
            prompt += `
- Exam Techniques: ${techniques.join(', ')}`;
        }
        
        // Add key misconceptions to address
        if (misconceptions[`lo${i}`].length > 0) {
            prompt += `
- Key Misconceptions to Address:`;
            misconceptions[`lo${i}`].forEach(misconception => {
                prompt += `
  * ${misconception}`;
            });
        }
    }
    
    // Add question requirements
    prompt += `\n\nFor each learning objective, please create the following formative assessment content:

1. 3-5 questions that assess student understanding of the key concepts
2. Questions that specifically target and address the common misconceptions
3. A mix of question types appropriate for the assessment objectives (AO1, AO2, AO3)
4. Questions that allow students to practice relevant exam techniques where applicable

Question types should include:
- Multiple choice questions
- Short answer questions
- Extended response questions
- Practical data analysis questions (where relevant)
- Calculation questions (for Physics or Chemistry)

Each question should:
- Clearly test one aspect of the learning objective
- Have an appropriate mark allocation
- Include a model answer and marking guidelines
- Include common errors to look for

Output your response in this XML format:
<formativeAssessment>
  <learningObjective number="1">
    <title>${learningObjectives.lo1.title}</title>
    <questions>
      <question>
        <text>Question text goes here</text>
        <type>multiple-choice/short-answer/extended-response/calculation/practical</type>
        <marks>Marks available (e.g., 3)</marks>
        <answer>Model answer</answer>
        <markingGuidelines>
          <point>1 mark for...</point>
          <point>1 mark for...</point>
          <point>1 mark for...</point>
        </markingGuidelines>
        <commonErrors>
          <error>Common mistake 1</error>
          <error>Common mistake 2</error>
        </commonErrors>
        <targetedMisconception>Which misconception this addresses (if any)</targetedMisconception>
      </question>
      <!-- Repeat for each question -->
    </questions>
  </learningObjective>
  <!-- Repeat for each learning objective -->
</formativeAssessment>

Please ensure the questions increase in difficulty and align with the assessment objectives for each learning objective.`;

    // Set the prompt in the textarea
    document.getElementById('formativePromptTextarea').value = prompt;
}

// Preview the formative assessment response
function previewFormativeAssessmentResponse() {
    const responseText = document.getElementById('formativeResponseTextarea').value.trim();
    if (!responseText) {
        alert('Please paste Claude\'s response first');
        return;
    }
    
    // Display tagged response
    document.getElementById('formativeTaggedResponse').innerHTML = escapeHTML(responseText);
    
    // Process and display formatted response
    processFormativeAssessmentResponse(responseText);
    
    // Show the preview
    document.getElementById('formativePreview').style.display = 'block';
    document.getElementById('formativeEditContainer').style.display = 'block';
}

// Process the formative assessment response
function processFormativeAssessmentResponse(responseText) {
    try {
        // Extract the XML content
        const xmlMatch = responseText.match(/<formativeAssessment>[\s\S]*?<\/formativeAssessment>/);
        if (!xmlMatch) {
            console.error('No formativeAssessment tag found in the response');
            return;
        }
        
        const xmlContent = xmlMatch[0];
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');
        
        // Store in appState
        appState.responseTags.formativeAssessment = xmlContent;
        appState.responses.formative = responseText;
        
        // Parse learning objectives and questions from XML
        const loNodes = xmlDoc.querySelectorAll('learningObjective');
        appState.slides.formative = {};
        
        loNodes.forEach(loNode => {
            const loNumber = loNode.getAttribute('number');
            const loTitle = getXmlChildText(loNode, 'title') || '';
            const questionNodes = loNode.querySelectorAll('questions > question');
            
            appState.slides.formative[`lo${loNumber}`] = {
                title: loTitle,
                questions: []
            };
            
            questionNodes.forEach(questionNode => {
                const markingGuidelines = [];
                questionNode.querySelectorAll('markingGuidelines > point').forEach(point => {
                    markingGuidelines.push(point.textContent.trim());
                });
                
                const commonErrors = [];
                questionNode.querySelectorAll('commonErrors > error').forEach(error => {
                    commonErrors.push(error.textContent.trim());
                });
                
                const question = {
                    text: getXmlChildText(questionNode, 'text') || '',
                    type: getXmlChildText(questionNode, 'type') || '',
                    marks: getXmlChildText(questionNode, 'marks') || '',
                    answer: getXmlChildText(questionNode, 'answer') || '',
                    markingGuidelines: markingGuidelines,
                    commonErrors: commonErrors,
                    targetedMisconception: getXmlChildText(questionNode, 'targetedMisconception') || ''
                };
                
                appState.slides.formative[`lo${loNumber}`].questions.push(question);
            });
        });
        
        // Generate formatted HTML for preview
        let formattedHTML = '<h4>Formative Assessment Questions</h4>';
        
        for (let i = 1; i <= appState.learningObjectives.count; i++) {
            if (!appState.slides.formative[`lo${i}`]) continue;
            
            formattedHTML += `
            <div class="lo-container">
                <div class="lo-header">
                    <h5>Learning Objective ${i}: ${appState.slides.formative[`lo${i}`].title}</h5>
                </div>
                <div class="questions-container">`;
                
            appState.slides.formative[`lo${i}`].questions.forEach((question, questionIndex) => {
                formattedHTML += `
                <div class="question-preview">
                    <div class="question-header">
                        <span class="question-type">${question.type}</span>
                        <span class="question-marks">${question.marks} marks</span>
                    </div>
                    <p><strong>Question ${questionIndex + 1}:</strong> ${question.text}</p>
                    <p><strong>Answer:</strong> ${question.answer}</p>
                    
                    <div class="marking-guidelines">
                        <p><strong>Marking Guidelines:</strong></p>
                        <ul>`;
                
                question.markingGuidelines.forEach(guideline => {
                    formattedHTML += `<li>${guideline}</li>`;
                });
                
                formattedHTML += `
                        </ul>
                    </div>
                    
                    <div class="common-errors">
                        <p><strong>Common Errors:</strong></p>
                        <ul>`;
                
                question.commonErrors.forEach(error => {
                    formattedHTML += `<li>${error}</li>`;
                });
                
                formattedHTML += `
                        </ul>
                    </div>
                    
                    ${question.targetedMisconception ? `
                    <p><strong>Targeted Misconception:</strong> ${question.targetedMisconception}</p>` : ''}
                </div>`;
            });
                
            formattedHTML += `
                </div>
            </div>`;
        }
        
        document.getElementById('formativeFormattedResponse').innerHTML = formattedHTML;
        
        return true;
    } catch (error) {
        console.error('Error processing formative assessment response:', error);
        document.getElementById('formativeFormattedResponse').innerHTML = '<p class="error">Error processing the response. Please check the format.</p>';
        return false;
    }
}

// Display learning objectives and misconceptions for formative assessment
function displayLearningObjectivesForFormative() {
    if (!appState.learningObjectives.lo1.title) return;
    
    let loHTML = '<h4>Learning Objectives and Misconceptions</h4><div class="lo-summary">';
    
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        const lo = appState.learningObjectives[`lo${i}`];
        const loType = appState.loTypes[`lo${i}`];
        
        loHTML += `<div class="lo-container">
            <div class="lo-header">
                <span>Learning Objective ${i}</span>
                <div>
                    <span class="ao-badge">${loType.aoCategory}</span>
                </div>
            </div>
            <p><strong>${lo.title}</strong></p>
            <p>${lo.description}</p>
            
            <div class="misconceptions-summary">
                <p><strong>Key Misconceptions:</strong></p>
                <ul>`;
        
        if (appState.misconceptions[`lo${i}`].length > 0) {
            appState.misconceptions[`lo${i}`].forEach(misconception => {
                loHTML += `<li>${misconception}</li>`;
            });
        } else {
            loHTML += `<li>No misconceptions identified</li>`;
        }
        
        loHTML += `</ul>
            </div>
        </div>`;
    }
    
    loHTML += '</div>';
    
    document.getElementById('misconceptionsForFormative').innerHTML = loHTML;
}

// Open formative questions edit modal
function openFormativeQuestionsModal() {
    // Set up temporary state
    appState.editState.tempFormativeQuestions = JSON.parse(JSON.stringify(appState.slides.formative));
    
    // Update the edit UI
    updateFormativeQuestionsEditUI();
    
    // Show the modal
    document.getElementById('formativeQuestionsEditModal').style.display = 'flex';
}

// Update the formative questions edit UI
function updateFormativeQuestionsEditUI() {
    const questionsTabContainer = document.getElementById('formativeQuestionsTabContainer');
    const questionsContentContainer = document.getElementById('formativeQuestionsContentContainer');
    
    questionsTabContainer.innerHTML = '';
    questionsContentContainer.innerHTML = '';
    
    // Add tabs for each learning objective
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (!appState.slides.formative[`lo${i}`]) continue;
        
        const tabElement = document.createElement('div');
        tabElement.className = `questions-tab ${i === 1 ? 'active' : ''}`;
        tabElement.setAttribute('data-lo', i);
        tabElement.textContent = `LO ${i}`;
        tabElement.onclick = function() {
            document.querySelectorAll('.questions-tab').forEach(tab => tab.classList.remove('active'));
            this.classList.add('active');
            
            document.querySelectorAll('.questions-content').forEach(content => content.classList.remove('active'));
            document.querySelector(`.questions-content[data-lo="${this.getAttribute('data-lo')}"]`).classList.add('active');
        };
        
        questionsTabContainer.appendChild(tabElement);
        
        // Add content for each learning objective
        const contentElement = document.createElement('div');
        contentElement.className = `questions-content ${i === 1 ? 'active' : ''}`;
        contentElement.setAttribute('data-lo', i);
        
        const questions = appState.slides.formative[`lo${i}`].questions;
        
        contentElement.innerHTML = `
            <h5>${appState.learningObjectives[`lo${i}`].title}</h5>
            <div class="questions-list" id="questionsList${i}">
                ${questions.map((question, questionIndex) => `
                <div class="question-edit-item" data-question="${questionIndex}">
                    <div class="question-edit-header">
                        <span>${question.type} (${question.marks}): ${question.text.substring(0, 50)}${question.text.length > 50 ? '...' : ''}</span>
                        <div class="question-actions">
                            <button class="btn btn-sm btn-outline" onclick="moveFormativeQuestion(${i}, ${questionIndex}, 'up')" ${questionIndex === 0 ? 'disabled' : ''}>â†‘</button>
                            <button class="btn btn-sm btn-outline" onclick="moveFormativeQuestion(${i}, ${questionIndex}, 'down')" ${questionIndex === questions.length - 1 ? 'disabled' : ''}>â†“</button>
                            <button class="btn btn-sm btn-outline" onclick="editFormativeQuestion(${i}, ${questionIndex})">Edit</button>
                            <button class="btn btn-sm btn-outline delete-btn" onclick="removeFormativeQuestion(${i}, ${questionIndex})">Ã—</button>
                        </div>
                    </div>
                </div>
                `).join('')}
            </div>
            <button class="btn btn-primary" onclick="addFormativeQuestion(${i})">+ Add New Question</button>
        `;
        
        questionsContentContainer.appendChild(contentElement);
    }
}

// Save formative questions
function saveFormativeQuestions() {
    // We don't need additional processing here since each edit is saved directly to state
    // Just close the modal
    closeModal('formativeQuestionsEditModal');
    
    // Update the preview
    processFormativeAssessmentResponse(appState.responses.formative);
}

// Edit a formative question
function editFormativeQuestion(loNumber, questionIndex) {
    const question = appState.slides.formative[`lo${loNumber}`].questions[questionIndex];
    
    // Set up the edit modal
    document.getElementById('editQuestionLoNumber').value = loNumber;
    document.getElementById('editQuestionIndex').value = questionIndex;
    document.getElementById('editQuestionText').value = question.text;
    document.getElementById('editQuestionType').value = question.type;
    document.getElementById('editQuestionMarks').value = question.marks;
    document.getElementById('editQuestionAnswer').value = question.answer;
    document.getElementById('editQuestionMisconception').value = question.targetedMisconception;
    
    // Clear existing guidelines and errors
    document.getElementById('markingGuidelinesContainer').innerHTML = '';
    document.getElementById('commonErrorsContainer').innerHTML = '';
    
    // Add marking guidelines
    question.markingGuidelines.forEach((guideline, index) => {
        addMarkingGuidelineField(guideline);
    });
    
    // Add at least one empty guideline if none exist
    if (question.markingGuidelines.length === 0) {
        addMarkingGuidelineField('');
    }
    
    // Add common errors
    question.commonErrors.forEach((error, index) => {
        addCommonErrorField(error);
    });
    
    // Add at least one empty error if none exist
    if (question.commonErrors.length === 0) {
        addCommonErrorField('');
    }
    
    // Show the modal
    document.getElementById('formativeQuestionEditModal').style.display = 'flex';
}

// Save edited formative question
function saveFormativeQuestion() {
    const loNumber = document.getElementById('editQuestionLoNumber').value;
    const questionIndex = document.getElementById('editQuestionIndex').value;
    
    // Collect marking guidelines
    const markingGuidelines = [];
    document.querySelectorAll('.marking-guideline-field').forEach(field => {
        const guidelineText = field.value.trim();
        if (guidelineText) {
            markingGuidelines.push(guidelineText);
        }
    });
    
    // Collect common errors
    const commonErrors = [];
    document.querySelectorAll('.common-error-field').forEach(field => {
        const errorText = field.value.trim();
        if (errorText) {
            commonErrors.push(errorText);
        }
    });
    
    // Update question in state
    appState.slides.formative[`lo${loNumber}`].questions[questionIndex] = {
        text: document.getElementById('editQuestionText').value.trim(),
        type: document.getElementById('editQuestionType').value,
        marks: document.getElementById('editQuestionMarks').value.trim(),
        answer: document.getElementById('editQuestionAnswer').value.trim(),
        markingGuidelines: markingGuidelines,
        commonErrors: commonErrors,
        targetedMisconception: document.getElementById('editQuestionMisconception').value.trim()
    };
    
    // Close the modal
    closeModal('formativeQuestionEditModal');
    
    // Update the edit UI
    updateFormativeQuestionsEditUI();
}

// Add a new formative question
function addFormativeQuestion(loNumber) {
    // Add a new question to the LO
    appState.slides.formative[`lo${loNumber}`].questions.push({
        text: '',
        type: 'short-answer',
        marks: '1',
        answer: '',
        markingGuidelines: [''],
        commonErrors: [''],
        targetedMisconception: ''
    });
    
    // Update the edit UI
    updateFormativeQuestionsEditUI();
    
    // Edit the new question
    const newQuestionIndex = appState.slides.formative[`lo${loNumber}`].questions.length - 1;
    editFormativeQuestion(loNumber, newQuestionIndex);
}

// Remove a formative question
function removeFormativeQuestion(loNumber, questionIndex) {
    if (confirm('Are you sure you want to remove this question?')) {
        appState.slides.formative[`lo${loNumber}`].questions.splice(questionIndex, 1);
        updateFormativeQuestionsEditUI();
    }
}

// Move a formative question up or down
function moveFormativeQuestion(loNumber, questionIndex, direction) {
    const questions = appState.slides.formative[`lo${loNumber}`].questions;
    
    if (direction === 'up' && questionIndex > 0) {
        [questions[questionIndex], questions[questionIndex - 1]] = [questions[questionIndex - 1], questions[questionIndex]];
    } else if (direction === 'down' && questionIndex < questions.length - 1) {
        [questions[questionIndex], questions[questionIndex + 1]] = [questions[questionIndex + 1], questions[questionIndex]];
    }
    
    updateFormativeQuestionsEditUI();
}

// Add a marking guideline field
function addMarkingGuidelineField(value = '') {
    const container = document.getElementById('markingGuidelinesContainer');
    
    const guidelineGroup = document.createElement('div');
    guidelineGroup.className = 'input-group';
    
    guidelineGroup.innerHTML = `
        <input type="text" class="form-control marking-guideline-field" value="${value}" placeholder="Enter marking guideline...">
        <button class="btn btn-outline delete-btn" onclick="this.parentElement.remove()">Ã—</button>
    `;
    
    container.appendChild(guidelineGroup);
}

// Add a common error field
function addCommonErrorField(value = '') {
    const container = document.getElementById('commonErrorsContainer');
    
    const errorGroup = document.createElement('div');
    errorGroup.className = 'input-group';
    
    errorGroup.innerHTML = `
        <input type="text" class="form-control common-error-field" value="${value}" placeholder="Enter common error...">
        <button class="btn btn-outline delete-btn" onclick="this.parentElement.remove()">Ã—</button>
    `;
    
    container.appendChild(errorGroup);
}

// Validate requirements for Step 3C
function validateStep3CRequirements() {
    if (!appState.responseTags.misconceptions) {
        alert('Please complete Step 1C (Misconceptions) first');
        return false;
    }
    
    if (!appState.responseTags.teachingSlides) {
        alert('Please complete Step 3B (Teaching Input) first');
        return false;
    }
    
    return true;
}

// ===== SUBSTEP 3D: REVIEW & EDIT =====

// Initialize Step 3D (Review & Edit)
function initializeStep3D() {
    // Display comprehensive slide review
    updateSlideReview();
    
    // Add event listener for completing Step 3
    document.getElementById('finishStep3Btn').addEventListener('click', finishStep3);
    
    // Enable continue button if all required components are present
    checkStep3Completion();
}

// Update the slide review
function updateSlideReview() {
    // Display retrieval practice slides
    updateRetrievalSlidesReview();
    
    // Display teaching input slides
    updateTeachingSlidesReview();
    
    // Display formative assessment slides
    updateFormativeSlidesReview();
    
    // Display slide sequence
    updateSlideSequenceReview();
}

// Update retrieval slides review
function updateRetrievalSlidesReview() {
    if (!appState.slides.retrieval || !appState.slides.retrieval.questions) {
        document.getElementById('retrievalSlidesReview').innerHTML = '<p>Complete Step 3A to see retrieval practice slides.</p>';
        return;
    }
    
    let html = `<h5>Retrieval Practice (${appState.slides.retrieval.questions.length} questions)</h5>
    <div class="slides-review-container">`;
    
    appState.slides.retrieval.questions.forEach((question, index) => {
        html += `
        <div class="slide-review-item">
            <div class="slide-review-header">
                <span class="slide-number">Q${index + 1}</span>
                <span class="slide-type">${question.type}</span>
            </div>
            <p>${question.text}</p>
        </div>`;
    });
    
    html += `</div>`;
    
    document.getElementById('retrievalSlidesReview').innerHTML = html;
}

// Update teaching slides review
function updateTeachingSlidesReview() {
    if (!appState.slides.teaching || Object.keys(appState.slides.teaching).length === 0) {
        document.getElementById('teachingSlidesReview').innerHTML = '<p>Complete Step 3B to see teaching input slides.</p>';
        return;
    }
    
    let html = '<h5>Teaching Input Slides</h5>';
    
    // Count total slides
    let totalSlides = 0;
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (appState.slides.teaching[`lo${i}`]) {
            totalSlides += appState.slides.teaching[`lo${i}`].slides.length;
        }
    }
    
    html += `<p><strong>Total Slides:</strong> ${totalSlides}</p>
    <div class="slides-review-container">`;
    
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (!appState.slides.teaching[`lo${i}`]) continue;
        
        html += `
        <div class="lo-review-section">
            <h6>LO ${i}: ${appState.learningObjectives[`lo${i}`].title}</h6>
            <div class="lo-slides-container">`;
        
        appState.slides.teaching[`lo${i}`].slides.forEach((slide, slideIndex) => {
            html += `
            <div class="slide-review-item">
                <div class="slide-review-header">
                    <span class="slide-number">Slide ${slideIndex + 1}</span>
                    <span class="slide-type">${slide.type}</span>
                </div>
                <p><strong>${slide.title}</strong></p>
            </div>`;
        });
        
        html += `</div>
        </div>`;
    }
    
    html += `</div>`;
    
    document.getElementById('teachingSlidesReview').innerHTML = html;
}

// Update formative slides review
function updateFormativeSlidesReview() {
    if (!appState.slides.formative || Object.keys(appState.slides.formative).length === 0) {
        document.getElementById('formativeSlidesReview').innerHTML = '<p>Complete Step 3C to see formative assessment slides.</p>';
        return;
    }
    
    let html = '<h5>Formative Assessment Questions</h5>';
    
    // Count total questions
    let totalQuestions = 0;
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (appState.slides.formative[`lo${i}`]) {
            totalQuestions += appState.slides.formative[`lo${i}`].questions.length;
        }
    }
    
    html += `<p><strong>Total Questions:</strong> ${totalQuestions}</p>
    <div class="slides-review-container">`;
    
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (!appState.slides.formative[`lo${i}`]) continue;
        
        html += `
        <div class="lo-review-section">
            <h6>LO ${i}: ${appState.learningObjectives[`lo${i}`].title}</h6>
            <div class="lo-questions-container">`;
        
        appState.slides.formative[`lo${i}`].questions.forEach((question, questionIndex) => {
            html += `
            <div class="slide-review-item">
                <div class="slide-review-header">
                    <span class="slide-number">Q${questionIndex + 1}</span>
                    <span class="slide-type">${question.type} (${question.marks})</span>
                </div>
                <p>${question.text.substring(0, 100)}${question.text.length > 100 ? '...' : ''}</p>
            </div>`;
        });
        
        html += `</div>
        </div>`;
    }
    
    html += `</div>`;
    
    document.getElementById('formativeSlidesReview').innerHTML = html;
}

// Update slide sequence review
function updateSlideSequenceReview() {
    if (!appState.slides.retrieval || !appState.slides.teaching || !appState.slides.formative) {
        document.getElementById('slideSequenceReview').innerHTML = '<p>Complete all of Step 3 to see the slide sequence.</p>';
        return;
    }
    
    let html = '<h5>Complete Slide Sequence</h5>';
    
    // Count total slides
    let totalSlides = 0;
    if (appState.slides.retrieval && appState.slides.retrieval.questions) {
        totalSlides += Math.ceil(appState.slides.retrieval.questions.length / 4); // Estimate 4 questions per slide
    }
    
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (appState.slides.teaching && appState.slides.teaching[`lo${i}`]) {
            totalSlides += appState.slides.teaching[`lo${i}`].slides.length;
        }
    }
    
    if (appState.slides.formative) {
        for (let i = 1; i <= appState.learningObjectives.count; i++) {
            if (appState.slides.formative[`lo${i}`]) {
                totalSlides += Math.ceil(appState.slides.formative[`lo${i}`].questions.length / 2); // Estimate 2 questions per slide
            }
        }
    }
    
    html += `<p><strong>Total Slides:</strong> ${totalSlides}</p>
    <div class="sequence-review-container">
        <ol class="sequence-list">
            <li class="sequence-section">
                <span class="sequence-title">Title Slide</span>
            </li>
            <li class="sequence-section">
                <span class="sequence-title">Lesson Objectives</span>
            </li>
            <li class="sequence-section">
                <span class="sequence-title">Retrieval Practice (${appState.slides.retrieval ? appState.slides.retrieval.questions.length : 0} questions)</span>
            </li>`;
    
    // Add teaching slides in order of learning objectives
    for (let i = 1; i <= appState.learningObjectives.count; i++) {
        if (!appState.slides.teaching || !appState.slides.teaching[`lo${i}`]) continue;
        
        html += `
            <li class="sequence-section">
                <span class="sequence-title">LO ${i}: ${appState.learningObjectives[`lo${i}`].title}</span>
                <ol class="sequence-sublist">`;
        
        appState.slides.teaching[`lo${i}`].slides.forEach((slide, slideIndex) => {
            html += `
                    <li class="sequence-item">
                        <span class="sequence-item-title">${slide.type}: ${slide.title}</span>
                    </li>`;
        });
        
        html += `
                </ol>
            </li>`;
        
        // Add formative assessment for this LO
        if (appState.slides.formative && appState.slides.formative[`lo${i}`]) {
            html += `
            <li class="sequence-section">
                <span class="sequence-title">Formative Assessment for LO ${i} (${appState.slides.formative[`lo${i}`].questions.length} questions)</span>
            </li>`;
        }
    }
    
    html += `
            <li class="sequence-section">
                <span class="sequence-title">Lesson Summary</span>
            </li>
        </ol>
    </div>`;
    
    document.getElementById('slideSequenceReview').innerHTML = html;
}

// Check if Step 3 is complete
function checkStep3Completion() {
    const hasRetrieval = appState.slides.retrieval && appState.slides.retrieval.questions && appState.slides.retrieval.questions.length > 0;
    const hasTeaching = appState.slides.teaching && Object.keys(appState.slides.teaching).length > 0;
    const hasFormative = appState.slides.formative && Object.keys(appState.slides.formative).length > 0;
    
    const isComplete = hasRetrieval && hasTeaching && hasFormative;
    
    document.getElementById('finishStep3Btn').disabled = !isComplete;
    
    return isComplete;
}

// ===== UTILITY FUNCTIONS =====

// Get the text content of an XML child element
function getXmlChildText(parentElement, childTagName) {
    const childElement = parentElement.querySelector(childTagName);
    return childElement ? childElement.textContent.trim() : '';
}

// Escape HTML characters for safe display
function escapeHTML(text) {
    return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}


ðŸ“„ FILE: step4.js
==================================================
// STEP 4: WORKSHEET GENERATION FUNCTIONALITY

// Initialize Step 4 when first accessed
function initializeStep4() {
    // Setup event listeners for Step 4
    setupStep4EventListeners();
    
    // Determine worksheet count based on LO count and allocation from Step 2
    determineWorksheetCount();
    
    // Initialize worksheet tabs
    initializeWorksheetTabs();
    
    // Prepare Step 4A (first substep)
    prepareReferenceMaterialsSubstep();
}

// Setup all event listeners for Step 4
function setupStep4EventListeners() {
    // Reference Materials (4A)
    document.getElementById('generateReferenceMaterialsPromptBtn').addEventListener('click', generateReferenceMaterialsPrompt);
    document.getElementById('copyReferenceMaterialsPromptBtn').addEventListener('click', () => copyToClipboard('referenceMaterialsPromptTextarea'));
    document.getElementById('previewReferenceMaterialsResponseBtn').addEventListener('click', () => previewResponse('referenceMaterials'));
    document.getElementById('referenceMaterialsResponseTextarea').addEventListener('input', handleReferenceMaterialsResponse);
    document.getElementById('continueToRetrievalBtn').addEventListener('click', () => switchSubstep(4, 'B'));
    document.getElementById('editDefinitionsBtn').addEventListener('click', () => openWorksheetEditModal('definitionsEditModal'));
    document.getElementById('editFormulasBtn').addEventListener('click', () => openWorksheetEditModal('formulasEditModal'));
    document.getElementById('editDiagramsBtn').addEventListener('click', () => openWorksheetEditModal('diagramsEditModal'));
    document.getElementById('editExamplesBtn').addEventListener('click', () => openWorksheetEditModal('examplesEditModal'));
    document.getElementById('saveDefinitionsBtn').addEventListener('click', saveDefinitions);
    document.getElementById('saveFormulasBtn').addEventListener('click', saveFormulas);
    document.getElementById('saveDiagramsBtn').addEventListener('click', saveDiagrams);
    document.getElementById('saveExamplesBtn').addEventListener('click', saveExamples);
    
    // Prior Knowledge Retrieval (4B)
    document.getElementById('generateRetrievalWorksheetPromptBtn').addEventListener('click', generateRetrievalWorksheetPrompt);
    document.getElementById('copyRetrievalWorksheetPromptBtn').addEventListener('click', () => copyToClipboard('retrievalWorksheetPromptTextarea'));
    document.getElementById('previewRetrievalWorksheetResponseBtn').addEventListener('click', () => previewResponse('retrievalWorksheet'));
    document.getElementById('retrievalWorksheetResponseTextarea').addEventListener('input', handleRetrievalWorksheetResponse);
    document.getElementById('continueToScaleQuestionsBtn').addEventListener('click', () => switchSubstep(4, 'C'));
    document.getElementById('editRetrievalWorksheetQuestionsBtn').addEventListener('click', () => openWorksheetEditModal('retrievalWorksheetQuestionsEditModal'));
    document.getElementById('saveRetrievalWorksheetQuestionsBtn').addEventListener('click', saveRetrievalWorksheetQuestions);
    
    // SCALE Questions (4C)
    document.getElementById('generateScaleQuestionsPromptBtn').addEventListener('click', generateScaleQuestionsPrompt);
    document.getElementById('copyScaleQuestionsPromptBtn').addEventListener('click', () => copyToClipboard('scaleQuestionsPromptTextarea'));
    document.getElementById('previewScaleQuestionsResponseBtn').addEventListener('click', () => previewResponse('scaleQuestions'));
    document.getElementById('scaleQuestionsResponseTextarea').addEventListener('input', handleScaleQuestionsResponse);
    document.getElementById('continueToApplicationQuestionsBtn').addEventListener('click', () => switchSubstep(4, 'D'));
    document.getElementById('editScaleQuestionsBtn').addEventListener('click', () => openWorksheetEditModal('scaleQuestionsEditModal'));
    document.getElementById('saveScaleQuestionsBtn').addEventListener('click', saveScaleQuestions);
    
    // Application Questions (4D)
    document.getElementById('generateApplicationQuestionsPromptBtn').addEventListener('click', generateApplicationQuestionsPrompt);
    document.getElementById('copyApplicationQuestionsPromptBtn').addEventListener('click', () => copyToClipboard('applicationQuestionsPromptTextarea'));
    document.getElementById('previewApplicationQuestionsResponseBtn').addEventListener('click', () => previewResponse('applicationQuestions'));
    document.getElementById('applicationQuestionsResponseTextarea').addEventListener('input', handleApplicationQuestionsResponse);
    document.getElementById('continueToExamTechniqueQuestionsBtn').addEventListener('click', () => switchSubstep(4, 'E'));
    document.getElementById('editApplicationQuestionsBtn').addEventListener('click', () => openWorksheetEditModal('applicationQuestionsEditModal'));
    document.getElementById('saveApplicationQuestionsBtn').addEventListener('click', saveApplicationQuestions);
    
    // Exam Technique Questions (4E)
    document.getElementById('generateExamTechniqueQuestionsPromptBtn').addEventListener('click', generateExamTechniqueQuestionsPrompt);
    document.getElementById('copyExamTechniqueQuestionsPromptBtn').addEventListener('click', () => copyToClipboard('examTechniqueQuestionsPromptTextarea'));
    document.getElementById('previewExamTechniqueQuestionsResponseBtn').addEventListener('click', () => previewResponse('examTechniqueQuestions'));
    document.getElementById('examTechniqueQuestionsResponseTextarea').addEventListener('input', handleExamTechniqueQuestionsResponse);
    document.getElementById('continueToExamStyleQuestionsBtn').addEventListener('click', () => switchSubstep(4, 'F'));
    document.getElementById('editExamTechniqueQuestionsBtn').addEventListener('click', () => openWorksheetEditModal('examTechniqueQuestionsEditModal'));
    document.getElementById('saveExamTechniqueQuestionsBtn').addEventListener('click', saveExamTechniqueQuestions);
    
    // Exam Style Questions (4F)
    document.getElementById('generateExamStyleQuestionsPromptBtn').addEventListener('click', generateExamStyleQuestionsPrompt);
    document.getElementById('copyExamStyleQuestionsPromptBtn').addEventListener('click', () => copyToClipboard('examStyleQuestionsPromptTextarea'));
    document.getElementById('previewExamStyleQuestionsResponseBtn').addEventListener('click', () => previewResponse('examStyleQuestions'));
    document.getElementById('examStyleQuestionsResponseTextarea').addEventListener('input', handleExamStyleQuestionsResponse);
    document.getElementById('continueToWorksheetFinalizationBtn').addEventListener('click', () => switchSubstep(4, 'G'));
    document.getElementById('editExamStyleQuestionsBtn').addEventListener('click', () => openWorksheetEditModal('examStyleQuestionsEditModal'));
    document.getElementById('saveExamStyleQuestionsBtn').addEventListener('click', saveExamStyleQuestions);
    
    // Worksheet Finalization (4G)
    document.getElementById('generateWorksheetFinalizationPromptBtn').addEventListener('click', generateWorksheetFinalizationPrompt);
    document.getElementById('copyWorksheetFinalizationPromptBtn').addEventListener('click', () => copyToClipboard('worksheetFinalizationPromptTextarea'));
    document.getElementById('previewWorksheetFinalizationResponseBtn').addEventListener('click', () => previewResponse('worksheetFinalization'));
    document.getElementById('worksheetFinalizationResponseTextarea').addEventListener('input', handleWorksheetFinalizationResponse);
    document.getElementById('applyFinalizationSettingsBtn').addEventListener('click', applyFinalizationSettings);
    document.getElementById('generateWorksheetPreviewBtn').addEventListener('click', generateWorksheetPreview);
    document.getElementById('finishStep4Btn').addEventListener('click', finishStep4);
    
    // Worksheet tab switching events
    document.querySelectorAll('.worksheet-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const worksheetNum = this.getAttribute('data-worksheet');
            const substep = this.closest('.substep-content').getAttribute('data-substep');
            switchWorksheetTab(worksheetNum, substep);
        });
    });
}

// Determine the number of worksheets based on LO count and allocation
function determineWorksheetCount() {
    // Default to 1 worksheet
    appState.worksheets.count = 1;
    
    // If we have 3 LOs and the allocation is not all the same worksheet
    if (appState.learningObjectives.lo3.exists) {
        const lo1Worksheet = appState.lessonStructure.worksheetAllocation.lo1;
        const lo2Worksheet = appState.lessonStructure.worksheetAllocation.lo2;
        const lo3Worksheet = appState.lessonStructure.worksheetAllocation.lo3;
        
        // Count distinct worksheet numbers
        const uniqueWorksheets = new Set([lo1Worksheet, lo2Worksheet, lo3Worksheet]).size;
        appState.worksheets.count = uniqueWorksheets;
    }
    
    // Update UI to reflect worksheet count
    updateWorksheetTabsVisibility();
}

// Initialize worksheet tabs UI
function initializeWorksheetTabs() {
    // For each substep with worksheet tabs
    const substeps = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
    
    substeps.forEach(substep => {
        const tabsContainer = document.getElementById(`worksheetTabs${substep}`);
        if (!tabsContainer) return;
        
        // Clear existing tabs
        tabsContainer.innerHTML = '';
        
        // Add appropriate number of tabs
        if (appState.worksheets.count === 1) {
            tabsContainer.innerHTML = `
                <div class="worksheet-tab active" data-worksheet="1" data-substep="${substep}">Worksheet 1</div>
            `;
        } else {
            // Determine which LOs go on which worksheet
            const lo1Worksheet = appState.lessonStructure.worksheetAllocation.lo1;
            const lo2Worksheet = appState.lessonStructure.worksheetAllocation.lo2;
            const lo3Worksheet = appState.lessonStructure.worksheetAllocation.lo3;
            
            // Create tab labeling based on LO allocation
            let ws1Label = "Worksheet 1";
            let ws2Label = "Worksheet 2";
            
            if (lo1Worksheet === 1 && lo2Worksheet === 1 && lo3Worksheet === 2) {
                ws1Label = "Worksheet 1 (LO1, LO2)";
                ws2Label = "Worksheet 2 (LO3)";
            } else if (lo1Worksheet === 1 && lo2Worksheet === 2 && lo3Worksheet === 2) {
                ws1Label = "Worksheet 1 (LO1)";
                ws2Label = "Worksheet 2 (LO2, LO3)";
            } else if (lo1Worksheet === 1 && lo2Worksheet === 2 && lo3Worksheet === 1) {
                ws1Label = "Worksheet 1 (LO1, LO3)";
                ws2Label = "Worksheet 2 (LO2)";
            }
            
            tabsContainer.innerHTML = `
                <div class="worksheet-tab active" data-worksheet="1" data-substep="${substep}">${ws1Label}</div>
                <div class="worksheet-tab" data-worksheet="2" data-substep="${substep}">${ws2Label}</div>
            `;
        }
    });
}

// Update worksheet tabs visibility based on LO allocation
function updateWorksheetTabsVisibility() {
    document.querySelectorAll('.worksheet-tabs-container').forEach(container => {
        // Show all tabs container if we have multiple worksheets
        if (appState.worksheets.count > 1) {
            container.style.display = 'flex';
        } else {
            container.style.display = 'none';
        }
    });
}

// Switch between worksheet tabs
function switchWorksheetTab(worksheetNum, substep) {
    // Update active tab
    document.querySelectorAll(`.worksheet-tab[data-substep="${substep}"]`).forEach(tab => {
        if (tab.getAttribute('data-worksheet') === worksheetNum) {
            tab.classList.add('active');
        } else {
            tab.classList.remove('active');
        }
    });
    
    // Update active content
    document.querySelectorAll(`.worksheet-content[data-substep="${substep}"]`).forEach(content => {
        if (content.getAttribute('data-worksheet') === worksheetNum) {
            content.classList.add('active');
        } else {
            content.classList.remove('active');
        }
    });
    
    // Update current worksheet in state
    appState.worksheets.current = parseInt(worksheetNum);
    
    // Update UI based on which LOs are in the current worksheet
    updateUIForCurrentWorksheet(substep);
}

// Update UI elements based on which LOs are in the current worksheet
function updateUIForCurrentWorksheet(substep) {
    const currentWorksheet = appState.worksheets.current;
    
    // Get LOs that are in the current worksheet
    const losInWorksheet = getLOsInWorksheet(currentWorksheet);
    
    // Enable/disable sections based on LO allocation
    toggleWorksheetSectionsVisibility(substep, losInWorksheet);
}

// Get which LOs are in a specific worksheet
function getLOsInWorksheet(worksheetNum) {
    const result = [];
    
    if (appState.lessonStructure.worksheetAllocation.lo1 === worksheetNum) {
        result.push(1);
    }
    
    if (appState.lessonStructure.worksheetAllocation.lo2 === worksheetNum) {
        result.push(2);
    }
    
    if (appState.learningObjectives.lo3.exists && 
        appState.lessonStructure.worksheetAllocation.lo3 === worksheetNum) {
        result.push(3);
    }
    
    return result;
}

// Toggle visibility of worksheet sections based on LOs in worksheet
function toggleWorksheetSectionsVisibility(substep, losInWorksheet) {
    // Different logic based on substep
    switch(substep) {
        case 'A':
            // Reference materials are shared across worksheets
            break;
            
        case 'B':
            // Prior knowledge questions - show only relevant LO sections
            document.querySelectorAll('.retrieval-lo-container').forEach(container => {
                const loNum = parseInt(container.getAttribute('data-lo'));
                if (losInWorksheet.includes(loNum)) {
                    container.style.display = 'block';
                } else {
                    container.style.display = 'none';
                }
            });
            break;
            
        case 'C':
            // SCALE questions - show only relevant LO sections
            document.querySelectorAll('.scale-lo-container').forEach(container => {
                const loNum = parseInt(container.getAttribute('data-lo'));
                if (losInWorksheet.includes(loNum)) {
                    container.style.display = 'block';
                } else {
                    container.style.display = 'none';
                }
            });
            break;
            
        case 'D':
            // Application questions - show only relevant LO sections
            document.querySelectorAll('.application-lo-container').forEach(container => {
                const loNum = parseInt(container.getAttribute('data-lo'));
                if (losInWorksheet.includes(loNum)) {
                    container.style.display = 'block';
                } else {
                    container.style.display = 'none';
                }
            });
            break;
            
        case 'E':
            // Exam technique questions - show only relevant LO sections
            document.querySelectorAll('.exam-technique-lo-container').forEach(container => {
                const loNum = parseInt(container.getAttribute('data-lo'));
                if (losInWorksheet.includes(loNum)) {
                    container.style.display = 'block';
                } else {
                    container.style.display = 'none';
                }
            });
            break;
            
        case 'F':
            // Exam style questions - show only relevant LO sections
            document.querySelectorAll('.exam-style-lo-container').forEach(container => {
                const loNum = parseInt(container.getAttribute('data-lo'));
                if (losInWorksheet.includes(loNum)) {
                    container.style.display = 'block';
                } else {
                    container.style.display = 'none';
                }
            });
            break;
            
        case 'G':
            // Worksheet finalization - all controls apply to current worksheet
            break;
    }
}

//
// STEP 4A: REFERENCE MATERIALS
//

// Prepare the reference materials substep
function prepareReferenceMaterialsSubstep() {
    // Display learning objectives summary
    displayLearningObjectivesForWorksheets();
    
    // Show previously saved data if it exists
    if (appState.responseTags.referenceMaterials) {
        renderReferenceMaterials();
        document.getElementById('continueToRetrievalBtn').disabled = false;
    }
}

// Generate prompt for reference materials
function generateReferenceMaterialsPrompt() {
    // Get relevant data for the prompt
    const provider = appState.lessonInfo.provider;
    const subject = appState.lessonInfo.subject;
    const topic = appState.lessonInfo.topic;
    const level = appState.lessonInfo.level;
    const ability = appState.lessonInfo.ability;
    
    // Get learning objectives
    let loText = '';
    
    loText += `Learning Objective 1: ${appState.learningObjectives.lo1.title}\n`;
    loText += `Description: ${appState.learningObjectives.lo1.description}\n\n`;
    
    loText += `Learning Objective 2: ${appState.learningObjectives.lo2.title}\n`;
    loText += `Description: ${appState.learningObjectives.lo2.description}\n\n`;
    
    if (appState.learningObjectives.lo3.exists) {
        loText += `Learning Objective 3: ${appState.learningObjectives.lo3.title}\n`;
        loText += `Description: ${appState.learningObjectives.lo3.description}\n\n`;
    }
    
    // Create the prompt
    const prompt = `Please create comprehensive reference materials for a ${level} tier ${subject} GCSE worksheet focused on ${topic} for ${ability} students following the ${provider} specification. 

The worksheet will support these learning objectives:
${loText}

I need the following reference materials formatted with XML tags:

1. <definitions>: Create 3-5 clear definitions of key terms relevant to these learning objectives.
2. <formulas>: Provide any relevant formulas, equations, or mathematical relationships (with units).
3. <diagrams>: Describe 1-3 essential diagrams that would help understanding (detailed descriptions that could be illustrated).
4. <examples>: Provide 2-3 worked examples that demonstrate application of key concepts.

For each item, include:
- Brief title or label
- Clear, concise content appropriate for ${ability} ${level} students
- Explanation of relevance to the learning objectives
- Age-appropriate language and complexity

Please structure your response using the following XML format:
<referenceMaterials>
    <definitions>
        [List of definitions with titles and explanations]
    </definitions>
    <formulas>
        [List of formulas with titles, expressions, and explanations]
    </formulas>
    <diagrams>
        [List of diagram descriptions with titles and explanations]
    </diagrams>
    <examples>
        [List of worked examples with titles, steps, and explanations]
    </examples>
</referenceMaterials>`;

    // Set the prompt in the textarea
    document.getElementById('referenceMaterialsPromptTextarea').value = prompt;
}

// Handle response for reference materials
function handleReferenceMaterialsResponse() {
    const responseText = document.getElementById('referenceMaterialsResponseTextarea').value;
    if (!responseText) return;
    
    // Store response
    appState.responses.referenceMaterials = responseText;
    
    // Extract XML tags from response
    const referenceMaterialsMatch = /<referenceMaterials>([\s\S]*?)<\/referenceMaterials>/g.exec(responseText);
    
    if (referenceMaterialsMatch && referenceMaterialsMatch[1]) {
        appState.responseTags.referenceMaterials = referenceMaterialsMatch[0];
        
        // Parse other tags
        parseReferenceMaterialsContent(referenceMaterialsMatch[0]);
        
        // Render the content
        renderReferenceMaterials();
        
        // Enable continue button
        document.getElementById('continueToRetrievalBtn').disabled = false;
    }
}

// Parse reference materials content from XML
function parseReferenceMaterialsContent(xml) {
    // Parse definitions
    const definitionsMatch = /<definitions>([\s\S]*?)<\/definitions>/g.exec(xml);
    if (definitionsMatch && definitionsMatch[1]) {
        appState.worksheets.reference.definitions = parseDefinitions(definitionsMatch[1]);
    }
    
    // Parse formulas
    const formulasMatch = /<formulas>([\s\S]*?)<\/formulas>/g.exec(xml);
    if (formulasMatch && formulasMatch[1]) {
        appState.worksheets.reference.formulas = parseFormulas(formulasMatch[1]);
    }
    
    // Parse diagrams
    const diagramsMatch = /<diagrams>([\s\S]*?)<\/diagrams>/g.exec(xml);
    if (diagramsMatch && diagramsMatch[1]) {
        appState.worksheets.reference.diagrams = parseDiagrams(diagramsMatch[1]);
    }
    
    // Parse examples
    const examplesMatch = /<examples>([\s\S]*?)<\/examples>/g.exec(xml);
    if (examplesMatch && examplesMatch[1]) {
        appState.worksheets.reference.examples = parseExamples(examplesMatch[1]);
    }
}

// Parse definitions from XML content
function parseDefinitions(content) {
    const definitions = [];
    
    // Look for definition items
    const regex = /<definition>[\s\S]*?<title>(.*?)<\/title>[\s\S]*?<explanation>([\s\S]*?)<\/explanation>[\s\S]*?<\/definition>/g;
    let match;
    
    while ((match = regex.exec(content)) !== null) {
        definitions.push({
            title: match[1].trim(),
            explanation: match[2].trim()
        });
    }
    
    return definitions;
}

// Parse formulas from XML content
function parseFormulas(content) {
    const formulas = [];
    
    // Look for formula items
    const regex = /<formula>[\s\S]*?<title>(.*?)<\/title>[\s\S]*?<expression>([\s\S]*?)<\/expression>[\s\S]*?<explanation>([\s\S]*?)<\/explanation>[\s\S]*?<\/formula>/g;
    let match;
    
    while ((match = regex.exec(content)) !== null) {
        formulas.push({
            title: match[1].trim(),
            expression: match[2].trim(),
            explanation: match[3].trim()
        });
    }
    
    return formulas;
}

// Parse diagrams from XML content
function parseDiagrams(content) {
    const diagrams = [];
    
    // Look for diagram items
    const regex = /<diagram>[\s\S]*?<title>(.*?)<\/title>[\s\S]*?<description>([\s\S]*?)<\/description>[\s\S]*?<explanation>([\s\S]*?)<\/explanation>[\s\S]*?<\/diagram>/g;
    let match;
    
    while ((match = regex.exec(content)) !== null) {
        diagrams.push({
            title: match[1].trim(),
            description: match[2].trim(),
            explanation: match[3].trim()
        });
    }
    
    return diagrams;
}

// Parse examples from XML content
function parseExamples(content) {
    const examples = [];
    
    // Look for example items
    const regex = /<example>[\s\S]*?<title>(.*?)<\/title>[\s\S]*?<steps>([\s\S]*?)<\/steps>[\s\S]*?<explanation>([\s\S]*?)<\/explanation>[\s\S]*?<\/example>/g;
    let match;
    
    while ((match = regex.exec(content)) !== null) {
        examples.push({
            title: match[1].trim(),
            steps: match[2].trim(),
            explanation: match[3].trim()
        });
    }
    
    return examples;
}

// Render reference materials in the UI
function renderReferenceMaterials() {
    // Create UI for definitions
    const definitionsContent = document.getElementById('definitionsContent');
    definitionsContent.innerHTML = '';
    
    if (appState.worksheets.reference.definitions.length > 0) {
        appState.worksheets.reference.definitions.forEach(def => {
            const item = document.createElement('div');
            item.className = 'reference-item';
            item.innerHTML = `
                <div class="reference-title">${def.title}</div>
                <div class="reference-text">${def.explanation}</div>
            `;
            definitionsContent.appendChild(item);
        });
    } else {
        definitionsContent.innerHTML = '<p>No definitions available yet.</p>';
    }
    
    // Create UI for formulas
    const formulasContent = document.getElementById('formulasContent');
    formulasContent.innerHTML = '';
    
    if (appState.worksheets.reference.formulas.length > 0) {
        appState.worksheets.reference.formulas.forEach(formula => {
            const item = document.createElement('div');
            item.className = 'reference-item';
            item.innerHTML = `
                <div class="reference-title">${formula.title}</div>
                <div class="reference-formula">${formula.expression}</div>
                <div class="reference-text">${formula.explanation}</div>
            `;
            formulasContent.appendChild(item);
        });
    } else {
        formulasContent.innerHTML = '<p>No formulas available yet.</p>';
    }
    
    // Create UI for diagrams
    const diagramsContent = document.getElementById('diagramsContent');
    diagramsContent.innerHTML = '';
    
    if (appState.worksheets.reference.diagrams.length > 0) {
        appState.worksheets.reference.diagrams.forEach(diagram => {
            const item = document.createElement('div');
            item.className = 'reference-item';
            item.innerHTML = `
                <div class="reference-title">${diagram.title}</div>
                <div class="reference-text"><strong>Description:</strong> ${diagram.description}</div>
                <div class="reference-text">${diagram.explanation}</div>
            `;
            diagramsContent.appendChild(item);
        });
    } else {
        diagramsContent.innerHTML = '<p>No diagrams available yet.</p>';
    }
    
    // Create UI for examples
    const examplesContent = document.getElementById('examplesContent');
    examplesContent.innerHTML = '';
    
    if (appState.worksheets.reference.examples.length > 0) {
        appState.worksheets.reference.examples.forEach(example => {
            const item = document.createElement('div');
            item.className = 'reference-item';
            item.innerHTML = `
                <div class="reference-title">${example.title}</div>
                <div class="reference-text"><strong>Steps:</strong><br>${example.steps}</div>
                <div class="reference-text">${example.explanation}</div>
            `;
            examplesContent.appendChild(item);
        });
    } else {
        examplesContent.innerHTML = '<p>No examples available yet.</p>';
    }
    
    // Show edit container
    document.getElementById('referenceMaterialsEditContainer').style.display = 'block';
}

// Open the definitions edit modal
function openDefinitionsEditModal() {
    // Populate modal with existing definitions
    const container = document.getElementById('definitionsEditList');
    container.innerHTML = '';
    
    if (appState.worksheets.reference.definitions.length > 0) {
        appState.worksheets.reference.definitions.forEach((def, index) => {
            addDefinitionField(def.title, def.explanation, index);
        });
    } else {
        // Add an empty definition field if none exist
        addDefinitionField('', '', 0);
    }
    
    // Set temporary state
    appState.editState.tempDefinitions = [...appState.worksheets.reference.definitions];
    
    // Open the modal
    openWorksheetEditModal('definitionsEditModal');
}

// Add a new definition field to the modal
function addDefinitionField(title = '', explanation = '', index = -1) {
    const container = document.getElementById('definitionsEditList');
    const newIndex = index >= 0 ? index : container.children.length;
    
    const fieldGroup = document.createElement('div');
    fieldGroup.className = 'edit-item-group';
    fieldGroup.innerHTML = `
        <div class="edit-item-header">
            <span>Definition ${newIndex + 1}</span>
            <button type="button" class="btn-icon" onclick="removeDefinitionField(${newIndex})">Ã—</button>
        </div>
        <div class="form-group">
            <label>Term/Title:</label>
            <input type="text" class="form-control def-title" value="${title}" placeholder="Enter term or title">
        </div>
        <div class="form-group">
            <label>Explanation:</label>
            <textarea class="form-control def-explanation" rows="3" placeholder="Enter definition explanation">${explanation}</textarea>
        </div>
    `;
    container.appendChild(fieldGroup);
}

// Remove a definition field from the modal
function removeDefinitionField(index) {
    const container = document.getElementById('definitionsEditList');
    if (container.children[index]) {
        container.removeChild(container.children[index]);
        
        // Renumber remaining items
        Array.from(container.children).forEach((item, i) => {
            const header = item.querySelector('.edit-item-header span');
            if (header) {
                header.textContent = `Definition ${i + 1}`;
            }
            
            // Update remove button index
            const removeBtn = item.querySelector('.btn-icon');
            if (removeBtn) {
                removeBtn.setAttribute('onclick', `removeDefinitionField(${i})`);
            }
        });
    }
}

// Save definitions from the modal
function saveDefinitions() {
    const container = document.getElementById('definitionsEditList');
    const definitions = [];
    
    // Gather all definitions from form
    Array.from(container.children).forEach(item => {
        const titleInput = item.querySelector('.def-title');
        const explanationInput = item.querySelector('.def-explanation');
        
        if (titleInput && explanationInput && titleInput.value.trim()) {
            definitions.push({
                title: titleInput.value.trim(),
                explanation: explanationInput.value.trim()
            });
        }
    });
    
    // Update state
    appState.worksheets.reference.definitions = definitions;
    
    // Re-render
    renderReferenceMaterials();
    
    // Close modal
    closeModal('definitionsEditModal');
}

// Open edit modals for formulas, diagrams, and examples would follow similar patterns
// Adding implementations for formulas as example

// Open the formulas edit modal
function openFormulasEditModal() {
    // Populate modal with existing formulas
    const container = document.getElementById('formulasEditList');
    container.innerHTML = '';
    
    if (appState.worksheets.reference.formulas.length > 0) {
        appState.worksheets.reference.formulas.forEach((formula, index) => {
            addFormulaField(formula.title, formula.expression, formula.explanation, index);
        });
    } else {
        // Add an empty formula field if none exist
        addFormulaField('', '', '', 0);
    }
    
    // Set temporary state
    appState.editState.tempFormulas = [...appState.worksheets.reference.formulas];
    
    // Open the modal
    openWorksheetEditModal('formulasEditModal');
}

// Add a new formula field to the modal
function addFormulaField(title = '', expression = '', explanation = '', index = -1) {
    const container = document.getElementById('formulasEditList');
    const newIndex = index >= 0 ? index : container.children.length;
    
    const fieldGroup = document.createElement('div');
    fieldGroup.className = 'edit-item-group';
    fieldGroup.innerHTML = `
        <div class="edit-item-header">
            <span>Formula ${newIndex + 1}</span>
            <button type="button" class="btn-icon" onclick="removeFormulaField(${newIndex})">Ã—</button>
        </div>
        <div class="form-group">
            <label>Title:</label>
            <input type="text" class="form-control formula-title" value="${title}" placeholder="Enter formula title">
        </div>
        <div class="form-group">
            <label>Expression:</label>
            <input type="text" class="form-control formula-expression" value="${expression}" placeholder="Enter formula expression">
        </div>
        <div class="form-group">
            <label>Explanation:</label>
            <textarea class="form-control formula-explanation" rows="3" placeholder="Enter formula explanation">${explanation}</textarea>
        </div>
    `;
    container.appendChild(fieldGroup);
}

// Remove a formula field from the modal
function removeFormulaField(index) {
    const container = document.getElementById('formulasEditList');
    if (container.children[index]) {
        container.removeChild(container.children[index]);
        
        // Renumber remaining items
        Array.from(container.children).forEach((item, i) => {
            const header = item.querySelector('.edit-item-header span');
            if (header) {
                header.textContent = `Formula ${i + 1}`;
            }
            
            // Update remove button index
            const removeBtn = item.querySelector('.btn-icon');
            if (removeBtn) {
                removeBtn.setAttribute('onclick', `removeFormulaField(${i})`);
            }
        });
    }
}

// Save formulas from the modal
function saveFormulas() {
    const container = document.getElementById('formulasEditList');
    const formulas = [];
    
    // Gather all formulas from form
    Array.from(container.children).forEach(item => {
        const titleInput = item.querySelector('.formula-title');
        const expressionInput = item.querySelector('.formula-expression');
        const explanationInput = item.querySelector('.formula-explanation');
        
        if (titleInput && expressionInput && explanationInput && titleInput.value.trim()) {
            formulas.push({
                title: titleInput.value.trim(),
                expression: expressionInput.value.trim(),
                explanation: explanationInput.value.trim()
            });
        }
    });
    
    // Update state
    appState.worksheets.reference.formulas = formulas;
    
    // Re-render
    renderReferenceMaterials();
    
    // Close modal
    closeModal('formulasEditModal');
}

// Similar implementations would exist for diagrams and examples
// We'll implement skeleton functions as placeholders

// Diagram functions
function openDiagramsEditModal() { /* Implementation similar to definitions/formulas */ }
function addDiagramField() { /* Implementation similar to addDefinitionField */ }
function removeDiagramField() { /* Implementation similar to removeDefinitionField */ }
function saveDiagrams() { /* Implementation similar to saveDefinitions */ }

// Example functions
function openExamplesEditModal() { /* Implementation similar to definitions/formulas */ }
function addExampleField() { /* Implementation similar to addDefinitionField */ }
function removeExampleField() { /* Implementation similar to removeDefinitionField */ }
function saveExamples() { /* Implementation similar to saveDefinitions */ }

//
// STEP 4B: PRIOR KNOWLEDGE RETRIEVAL
//

// Prepare the retrieval worksheet substep
function prepareRetrievalWorksheetSubstep() {
    // Display prior knowledge summary for retrieval
    displayPriorKnowledgeForWorksheets();
    
    // Update worksheet tabs
    initializeWorksheetTabs();
    
    // Show previously saved data if it exists
    if (appState.responseTags.retrievalWorksheet) {
        renderRetrievalWorksheetQuestions();
        document.getElementById('continueToScaleQuestionsBtn').disabled = false;
    }
}

// Generate prompt for retrieval worksheet questions
function generateRetrievalWorksheetPrompt() {
    // Get relevant data for the prompt
    const provider = appState.lessonInfo.provider;
    const subject = appState.lessonInfo.subject;
    const topic = appState.lessonInfo.topic;
    const level = appState.lessonInfo.level;
    const ability = appState.lessonInfo.ability;
    
    // Get prior knowledge for each LO
    let priorKnowledgeText = '';
    
    priorKnowledgeText += `Learning Objective 1 Prior Knowledge:\n`;
    appState.priorKnowledge.lo1.forEach((item, index) => {
        priorKnowledgeText += `${index + 1}. ${item}\n`;
    });
    priorKnowledgeText += '\n';
    
    priorKnowledgeText += `Learning Objective 2 Prior Knowledge:\n`;
    appState.priorKnowledge.lo2.forEach((item, index) => {
        priorKnowledgeText += `${index + 1}. ${item}\n`;
    });
    priorKnowledgeText += '\n';
    
    if (appState.learningObjectives.lo3.exists) {
        priorKnowledgeText += `Learning Objective 3 Prior Knowledge:\n`;
        appState.priorKnowledge.lo3.forEach((item, index) => {
            priorKnowledgeText += `${index + 1}. ${item}\n`;
        });
        priorKnowledgeText += '\n';
    }
    
    // Get worksheet allocation info
    const worksheetCount = appState.worksheets.count;
    let worksheetAllocationText = '';
    
    if (worksheetCount > 1) {
        worksheetAllocationText = `
Learning objectives are allocated to worksheets as follows:
- Learning Objective 1: Worksheet ${appState.lessonStructure.worksheetAllocation.lo1}
- Learning Objective 2: Worksheet ${appState.lessonStructure.worksheetAllocation.lo2}`;
        
        if (appState.learningObjectives.lo3.exists) {
            worksheetAllocationText += `
- Learning Objective 3: Worksheet ${appState.lessonStructure.worksheetAllocation.lo3}`;
        }
    }
    
    // Create the prompt
    const prompt = `Please create retrieval practice questions for a ${level} tier ${subject} GCSE worksheet on ${topic} for ${ability} students following the ${provider} specification.

The worksheet will have ${worksheetCount} worksheet(s).${worksheetCount > 1 ? worksheetAllocationText : ''}

Base your questions on the following prior knowledge requirements for each learning objective:

${priorKnowledgeText}

Please create a total of 5-8 retrieval practice questions per worksheet, ensuring each learning objective has at least 2 questions that target its prior knowledge.

For each question:
1. Clearly indicate which learning objective's prior knowledge it relates to
2. Make sure it directly targets specific prior knowledge items
3. Include a variety of question types (multiple choice, short answer, fill-in-the-blank, true/false, matching)
4. Ensure questions are appropriately challenging for ${ability} ${level} students
5. Provide clear model answers

Please structure your response using the following XML format:
<retrievalWorksheet>
    <worksheet number="1">
        <questions>
            <question>
                <text>Question text here</text>
                <type>multiple-choice/short-answer/etc</type>
                <relatedLO>1</relatedLO>
                <priorKnowledgeReference>Specific prior knowledge item being tested</priorKnowledgeReference>
                <answer>Model answer here</answer>
                <options>
                    <option>Only for multiple choice questions</option>
                    <!-- More options as needed -->
                </options>
            </question>
            <!-- More questions -->
        </questions>
    </worksheet>
    ${worksheetCount > 1 ? `
    <worksheet number="2">
        <questions>
            <!-- Questions for worksheet 2 -->
        </questions>
    </worksheet>` : ''}
</retrievalWorksheet>`;

    // Set the prompt in the textarea
    document.getElementById('retrievalWorksheetPromptTextarea').value = prompt;
}

// Handle response for retrieval worksheet questions
function handleRetrievalWorksheetResponse() {
    const responseText = document.getElementById('retrievalWorksheetResponseTextarea').value;
    if (!responseText) return;
    
    // Store response
    appState.responses.retrievalWorksheet = responseText;
    
    // Extract XML tags from response
    const retrievalWorksheetMatch = /<retrievalWorksheet>([\s\S]*?)<\/retrievalWorksheet>/g.exec(responseText);
    
    if (retrievalWorksheetMatch && retrievalWorksheetMatch[1]) {
        appState.responseTags.retrievalWorksheet = retrievalWorksheetMatch[0];
        
        // Parse questions
        parseRetrievalWorksheetContent(retrievalWorksheetMatch[0]);
        
        // Render the content
        renderRetrievalWorksheetQuestions();
        
        // Enable continue button
        document.getElementById('continueToScaleQuestionsBtn').disabled = false;
    }
}

// Parse retrieval worksheet content from XML
function parseRetrievalWorksheetContent(xml) {
    // Initialize retrieval questions
    appState.worksheets.retrieval.worksheet1 = [];
    appState.worksheets.retrieval.worksheet2 = [];
    
    // Parse worksheet 1
    const worksheet1Match = /<worksheet number="1">([\s\S]*?)<\/worksheet>/g.exec(xml);
    if (worksheet1Match && worksheet1Match[1]) {
        const questionsMatch = /<questions>([\s\S]*?)<\/questions>/g.exec(worksheet1Match[1]);
        if (questionsMatch && questionsMatch[1]) {
            appState.worksheets.retrieval.worksheet1 = parseRetrievalQuestions(questionsMatch[1]);
        }
    }
    
    // Parse worksheet 2 if it exists
    const worksheet2Match = /<worksheet number="2">([\s\S]*?)<\/worksheet>/g.exec(xml);
    if (worksheet2Match && worksheet2Match[1]) {
        const questionsMatch = /<questions>([\s\S]*?)<\/questions>/g.exec(worksheet2Match[1]);
        if (questionsMatch && questionsMatch[1]) {
            appState.worksheets.retrieval.worksheet2 = parseRetrievalQuestions(questionsMatch[1]);
        }
    }
}

// Parse retrieval questions from XML content
function parseRetrievalQuestions(content) {
    const questions = [];
    
    // Look for question items
    const regex = /<question>([\s\S]*?)<\/question>/g;
    let match;
    
    while ((match = regex.exec(content)) !== null) {
        const questionContent = match[1];
        
        // Extract individual fields
        const textMatch = /<text>([\s\S]*?)<\/text>/g.exec(questionContent);
        const typeMatch = /<type>([\s\S]*?)<\/type>/g.exec(questionContent);
        const relatedLOMatch = /<relatedLO>([\s\S]*?)<\/relatedLO>/g.exec(questionContent);
        const priorKnowledgeMatch = /<priorKnowledgeReference>([\s\S]*?)<\/priorKnowledgeReference>/g.exec(questionContent);
        const answerMatch = /<answer>([\s\S]*?)<\/answer>/g.exec(questionContent);
        
        // Extract options for multiple choice
        const options = [];
        const optionsMatch = /<options>([\s\S]*?)<\/options>/g.exec(questionContent);
        if (optionsMatch && optionsMatch[1]) {
            const optionRegex = /<option>([\s\S]*?)<\/option>/g;
            let optionMatch;
            while ((optionMatch = optionRegex.exec(optionsMatch[1])) !== null) {
                options.push(optionMatch[1].trim());
            }
        }
        
        questions.push({
            text: textMatch ? textMatch[1].trim() : '',
            type: typeMatch ? typeMatch[1].trim() : '',
            relatedLO: relatedLOMatch ? parseInt(relatedLOMatch[1].trim()) : 1,
            priorKnowledgeReference: priorKnowledgeMatch ? priorKnowledgeMatch[1].trim() : '',
            answer: answerMatch ? answerMatch[1].trim() : '',
            options: options
        });
    }
    
    return questions;
}

// Render retrieval worksheet questions in the UI
function renderRetrievalWorksheetQuestions() {
    // Function to render questions for a specific worksheet
    const renderQuestionsForWorksheet = (worksheetNum) => {
        const questionsContainer = document.getElementById(`retrievalQuestionsWS${worksheetNum}`);
        if (!questionsContainer) return;
        
        // Clear container
        questionsContainer.innerHTML = '';
        
        // Get questions for this worksheet
        const questions = worksheetNum === 1 ? 
            appState.worksheets.retrieval.worksheet1 : 
            appState.worksheets.retrieval.worksheet2;
        
        if (questions.length === 0) {
            questionsContainer.innerHTML = '<p>No retrieval questions available for this worksheet.</p>';
            return;
        }
        
        // Group questions by learning objective
        const loQuestions = {
            1: [],
            2: [],
            3: []
        };
        
        questions.forEach(q => {
            if (q.relatedLO >= 1 && q.relatedLO <= 3) {
                loQuestions[q.relatedLO].push(q);
            }
        });
        
        // Render questions for each LO
        for (let lo = 1; lo <= 3; lo++) {
            // Skip if no questions for this LO or if LO3 doesn't exist
            if (loQuestions[lo].length === 0 || (lo === 3 && !appState.learningObjectives.lo3.exists)) {
                continue;
            }
            
            // Create container for this LO's questions
            const loContainer = document.createElement('div');
            loContainer.className = 'retrieval-lo-container';
            loContainer.setAttribute('data-lo', lo);
            
            // Create header
            const loHeader = document.createElement('div');
            loHeader.className = 'retrieval-lo-header';
            loHeader.innerHTML = `<h4>Learning Objective ${lo} Retrieval Questions</h4>`;
            loContainer.appendChild(loHeader);
            
            // Create questions list
            const questionsList = document.createElement('div');
            questionsList.className = 'retrieval-questions-list';
            
            loQuestions[lo].forEach((q, index) => {
                const questionItem = document.createElement('div');
                questionItem.className = 'retrieval-question-item';
                
                // Format based on question type
                let questionContent = '';
                
                if (q.type === 'multiple-choice') {
                    questionContent = `
                        <div class="question-text">${index + 1}. ${q.text}</div>
                        <div class="question-options">
                            ${q.options.map(opt => `<div class="question-option">${opt}</div>`).join('')}
                        </div>
                        <div class="question-answer"><strong>Answer:</strong> ${q.answer}</div>
                        <div class="question-metadata">
                            <span class="question-type">${q.type}</span>
                            <span class="question-prior-knowledge">Tests: ${q.priorKnowledgeReference}</span>
                        </div>
                    `;
                } else {
                    questionContent = `
                        <div class="question-text">${index + 1}. ${q.text}</div>
                        <div class="question-answer"><strong>Answer:</strong> ${q.answer}</div>
                        <div class="question-metadata">
                            <span class="question-type">${q.type}</span>
                            <span class="question-prior-knowledge">Tests: ${q.priorKnowledgeReference}</span>
                        </div>
                    `;
                }
                
                questionItem.innerHTML = questionContent;
                questionsList.appendChild(questionItem);
            });
            
            loContainer.appendChild(questionsList);
            questionsContainer.appendChild(loContainer);
        }
    };
    
    // Render for each worksheet
    renderQuestionsForWorksheet(1);
    if (appState.worksheets.count > 1) {
        renderQuestionsForWorksheet(2);
    }
    
    // Show edit container
    document.getElementById('retrievalWorksheetEditContainer').style.display = 'block';
    
    // Update UI based on current worksheet
    updateUIForCurrentWorksheet('B');
}

// Skipping edit functionality for brevity - would follow similar patterns to reference materials

//
// STEP 4C: SCALE QUESTIONS
//

// Prepare the SCALE questions substep
function prepareScaleQuestionsSubstep() {
    // Display learning objectives for SCALE questions
    displayLearningObjectivesForScaleQuestions();
    
    // Update worksheet tabs
    initializeWorksheetTabs();
    
    // Show previously saved data if it exists
    if (appState.responseTags.scaleQuestions) {
        renderScaleQuestions();
        document.getElementById('continueToApplicationQuestionsBtn').disabled = false;
    }
}

// Generate prompt for SCALE questions
function generateScaleQuestionsPrompt() {
    // Get relevant data for the prompt
    const provider = appState.lessonInfo.provider;
    const subject = appState.lessonInfo.subject;
    const topic = appState.lessonInfo.topic;
    const level = appState.lessonInfo.level;
    const ability = appState.lessonInfo.ability;
    
    // Get learning objectives
    let loText = '';
    
    loText += `Learning Objective 1: ${appState.learningObjectives.lo1.title}\n`;
    loText += `Description: ${appState.learningObjectives.lo1.description}\n`;
    loText += `Type: ${appState.loTypes.lo1.aoCategory} - ${appState.loTypes.lo1.specificType}\n\n`;
    
    loText += `Learning Objective 2: ${appState.learningObjectives.lo2.title}\n`;
    loText += `Description: ${appState.learningObjectives.lo2.description}\n`;
    loText += `Type: ${appState.loTypes.lo2.aoCategory} - ${appState.loTypes.lo2.specificType}\n\n`;
    
    if (appState.learningObjectives.lo3.exists) {
        loText += `Learning Objective 3: ${appState.learningObjectives.lo3.title}\n`;
        loText += `Description: ${appState.learningObjectives.lo3.description}\n`;
        loText += `Type: ${appState.loTypes.lo3.aoCategory} - ${appState.loTypes.lo3.specificType}\n\n`;
    }
    
    // Get worksheet allocation info
    const worksheetCount = appState.worksheets.count;
    let worksheetAllocationText = '';
    
    if (worksheetCount > 1) {
        worksheetAllocationText = `
Learning objectives are allocated to worksheets as follows:
- Learning Objective 1: Worksheet ${appState.lessonStructure.worksheetAllocation.lo1}
- Learning Objective 2: Worksheet ${appState.lessonStructure.worksheetAllocation.lo2}`;
        
        if (appState.learningObjectives.lo3.exists) {
            worksheetAllocationText += `
- Learning Objective 3: Worksheet ${appState.lessonStructure.worksheetAllocation.lo3}`;
        }
    }
    
    // Create the prompt
    const prompt = `Please create SCALE framework questions for ${level} tier ${subject} GCSE worksheets on ${topic} for ${ability} students following the ${provider} specification.

The worksheet will have ${worksheetCount} worksheet(s).${worksheetCount > 1 ? worksheetAllocationText : ''}

Base your questions on these learning objectives:
${loText}

I need you to create SCALE framework questions for each learning objective. The SCALE framework has 5 categories:
1. **S - Simple Recognition**: Questions that test recall of key terms, facts, or concepts
2. **C - Conceptual Understanding**: Questions that check understanding of concepts, relationships, or principles
3. **A - Application**: Questions that require applying knowledge to new situations or problems
4. **L - Linking Ideas**: Questions that connect different concepts or topics, exploring relationships
5. **E - Extended Thinking**: Questions that require deeper analysis, evaluation, or creation

For each learning objective, please create 2 questions for each SCALE category (10 questions per learning objective), with varying cognitive demand levels:
- 30% Low cognitive demand (simpler questions)
- 40% Medium cognitive demand
- 30% High cognitive demand (more challenging questions)

Please structure your response using the following XML format:
<scaleQuestions>
    <worksheet number="1">
        <learningObjective number="1">
            <question>
                <category>S/C/A/L/E</category>
                <cognitiveLevel>Low/Medium/High</cognitiveLevel>
                <text>Question text here</text>
                <answer>Model answer here</answer>
                <markScheme>Brief marking guidance</markScheme>
                <points>Number of marks (1-4)</points>
            </question>
            <!-- More questions -->
        </learningObjective>
        <!-- More learning objectives -->
    </worksheet>
    ${worksheetCount > 1 ? `
    <worksheet number="2">
        <!-- Similar structure for worksheet 2 -->
    </worksheet>` : ''}
</scaleQuestions>`;

    // Set the prompt in the textarea
    document.getElementById('scaleQuestionsPromptTextarea').value = prompt;
}

// Handle response for SCALE questions
function handleScaleQuestionsResponse() {
    const responseText = document.getElementById('scaleQuestionsResponseTextarea').value;
    if (!responseText) return;
    
    // Store response
    appState.responses.scaleQuestions = responseText;
    
    // Extract XML tags from response
    const scaleQuestionsMatch = /<scaleQuestions>([\s\S]*?)<\/scaleQuestions>/g.exec(responseText);
    
    if (scaleQuestionsMatch && scaleQuestionsMatch[1]) {
        appState.responseTags.scaleQuestions = scaleQuestionsMatch[0];
        
        // Parse SCALE questions
        parseScaleQuestionsContent(scaleQuestionsMatch[0]);
        
        // Render the content
        renderScaleQuestions();
        
        // Enable continue button
        document.getElementById('continueToApplicationQuestionsBtn').disabled = false;
    }
}

// Parse SCALE questions content from XML
function parseScaleQuestionsContent(xml) {
    // Initialize SCALE questions
    appState.worksheets.scale = {
        worksheet1: {
            lo1: [],
            lo2: [],
            lo3: []
        },
        worksheet2: {
            lo1: [],
            lo2: [],
            lo3: []
        }
    };
    
    // Parse worksheet 1
    const worksheet1Match = /<worksheet number="1">([\s\S]*?)<\/worksheet>/g.exec(xml);
    if (worksheet1Match && worksheet1Match[1]) {
        parseScaleQuestionsForWorksheet(worksheet1Match[1], 1);
    }
    
    // Parse worksheet 2 if it exists
    const worksheet2Match = /<worksheet number="2">([\s\S]*?)<\/worksheet>/g.exec(xml);
    if (worksheet2Match && worksheet2Match[1]) {
        parseScaleQuestionsForWorksheet(worksheet2Match[1], 2);
    }
}

// Parse SCALE questions for a specific worksheet
function parseScaleQuestionsForWorksheet(worksheetContent, worksheetNum) {
    // Parse each learning objective
    for (let lo = 1; lo <= 3; lo++) {
        if (lo === 3 && !appState.learningObjectives.lo3.exists) continue;
        
        const loMatch = new RegExp(`<learningObjective number="${lo}">([\\\s\\\S]*?)<\/learningObjective>`, 'g').exec(worksheetContent);
        if (loMatch && loMatch[1]) {
            const questions = parseScaleQuestionsForLO(loMatch[1]);
            
            // Store in appropriate location
            if (worksheetNum === 1) {
                appState.worksheets.scale.worksheet1[`lo${lo}`] = questions;
            } else {
                appState.worksheets.scale.worksheet2[`lo${lo}`] = questions;
            }
        }
    }
}

// Parse SCALE questions for a specific learning objective
function parseScaleQuestionsForLO(loContent) {
    const questions = [];
    
    // Look for question items
    const regex = /<question>([\s\S]*?)<\/question>/g;
    let match;
    
    while ((match = regex.exec(loContent)) !== null) {
        const questionContent = match[1];
        
        // Extract individual fields
        const categoryMatch = /<category>([\s\S]*?)<\/category>/g.exec(questionContent);
        const cognitiveLevelMatch = /<cognitiveLevel>([\s\S]*?)<\/cognitiveLevel>/g.exec(questionContent);
        const textMatch = /<text>([\s\S]*?)<\/text>/g.exec(questionContent);
        const answerMatch = /<answer>([\s\S]*?)<\/answer>/g.exec(questionContent);
        const markSchemeMatch = /<markScheme>([\s\S]*?)<\/markScheme>/g.exec(questionContent);
        const pointsMatch = /<points>([\s\S]*?)<\/points>/g.exec(questionContent);
        
        questions.push({
            category: categoryMatch ? categoryMatch[1].trim() : '',
            cognitiveLevel: cognitiveLevelMatch ? cognitiveLevelMatch[1].trim() : '',
            text: textMatch ? textMatch[1].trim() : '',
            answer: answerMatch ? answerMatch[1].trim() : '',
            markScheme: markSchemeMatch ? markSchemeMatch[1].trim() : '',
            points: pointsMatch ? parseInt(pointsMatch[1].trim()) : 1,
            selected: true // Default to selected
        });
    }
    
    return questions;
}

// Render SCALE questions in the UI
function renderScaleQuestions() {
    // Function to render questions for a specific worksheet
    const renderQuestionsForWorksheet = (worksheetNum) => {
        // For each learning objective
        for (let lo = 1; lo <= 3; lo++) {
            if (lo === 3 && !appState.learningObjectives.lo3.exists) continue;
            
            const container = document.getElementById(`scaleQuestionsWS${worksheetNum}LO${lo}`);
            if (!container) continue;
            
            // Get questions for this worksheet and LO
            const questions = worksheetNum === 1 ? 
                appState.worksheets.scale.worksheet1[`lo${lo}`] : 
                appState.worksheets.scale.worksheet2[`lo${lo}`];
            
            if (!questions || questions.length === 0) {
                container.innerHTML = '<p>No SCALE questions available for this learning objective.</p>';
                continue;
            }
            
            // Clear container
            container.innerHTML = '';
            
            // Group questions by SCALE category
            const categories = {
                'S': { title: 'Simple Recognition', questions: [] },
                'C': { title: 'Conceptual Understanding', questions: [] },
                'A': { title: 'Application', questions: [] },
                'L': { title: 'Linking Ideas', questions: [] },
                'E': { title: 'Extended Thinking', questions: [] }
            };
            
            questions.forEach(q => {
                const category = q.category.charAt(0); // Get first letter
                if (categories[category]) {
                    categories[category].questions.push(q);
                }
            });
            
            // Render questions for each category
            for (const [key, category] of Object.entries(categories)) {
                if (category.questions.length === 0) continue;
                
                const categoryContainer = document.createElement('div');
                categoryContainer.className = 'scale-category-container';
                
                // Create header
                const categoryHeader = document.createElement('div');
                categoryHeader.className = 'scale-category-header';
                categoryHeader.innerHTML = `<h5>${key} - ${category.title}</h5>`;
                categoryContainer.appendChild(categoryHeader);
                
                // Create questions list
                const questionsList = document.createElement('div');
                questionsList.className = 'scale-questions-list';
                
                category.questions.forEach((q, index) => {
                    const questionItem = document.createElement('div');
                    questionItem.className = 'scale-question-item';
                    
                    const questionContent = `
                        <div class="question-header">
                            <div class="checkbox-container">
                                <input type="checkbox" id="scaleQ-ws${worksheetNum}-lo${lo}-cat${key}-${index}" 
                                    ${q.selected ? 'checked' : ''} 
                                    onchange="toggleScaleQuestion(${worksheetNum}, ${lo}, '${key}', ${index})">
                                <label for="scaleQ-ws${worksheetNum}-lo${lo}-cat${key}-${index}">
                                    <span class="cognitive-level ${q.cognitiveLevel.toLowerCase()}">${q.cognitiveLevel}</span>
                                    <span class="question-points">${q.points} ${q.points === 1 ? 'mark' : 'marks'}</span>
                                </label>
                            </div>
                        </div>
                        <div class="question-text">${q.text}</div>
                        <div class="question-answer"><strong>Answer:</strong> ${q.answer}</div>
                        <div class="question-mark-scheme"><strong>Mark Scheme:</strong> ${q.markScheme}</div>
                    `;
                    
                    questionItem.innerHTML = questionContent;
                    questionsList.appendChild(questionItem);
                });
                
                categoryContainer.appendChild(questionsList);
                container.appendChild(categoryContainer);
            }
        }
    };
    
    // Render for each worksheet
    renderQuestionsForWorksheet(1);
    if (appState.worksheets.count > 1) {
        renderQuestionsForWorksheet(2);
    }
    
    // Show edit container
    document.getElementById('scaleQuestionsEditContainer').style.display = 'block';
    
    // Update UI based on current worksheet
    updateUIForCurrentWorksheet('C');
}

// Toggle selection of a SCALE question
function toggleScaleQuestion(worksheetNum, lo, category, index) {
    // Get the checkbox
    const checkbox = document.getElementById(`scaleQ-ws${worksheetNum}-lo${lo}-cat${category}-${index}`);
    
    // Get the questions array
    const questions = worksheetNum === 1 ? 
        appState.worksheets.scale.worksheet1[`lo${lo}`] : 
        appState.worksheets.scale.worksheet2[`lo${lo}`];
    
    // Find the question with matching category and index
    let questionIndex = -1;
    let currentIndex = -1;
    
    for (let i = 0; i < questions.length; i++) {
        if (questions[i].category.charAt(0) === category) {
            currentIndex++;
            if (currentIndex === index) {
                questionIndex = i;
                break;
            }
        }
    }
    
    if (questionIndex >= 0) {
        // Update the selected state
        questions[questionIndex].selected = checkbox.checked;
    }
}

// Skipping remaining edit functionality for brevity

//
// STEP 4D-4F: APPLICATION QUESTIONS, EXAM TECHNIQUE, EXAM STYLE QUESTIONS
//
// These follow similar patterns to the above, so are omitted for brevity

//
// STEP 4G: WORKSHEET FINALIZATION
//

// Prepare the worksheet finalization substep
function prepareWorksheetFinalizationSubstep() {
    // Update worksheet tabs
    initializeWorksheetTabs();
    
    // Initialize finalization settings if not already done
    if (!appState.worksheets.finalization.worksheet1) {
        appState.worksheets.finalization.worksheet1 = getDefaultFinalizationSettings();
    }
    
    if (appState.worksheets.count > 1 && !appState.worksheets.finalization.worksheet2) {
        appState.worksheets.finalization.worksheet2 = getDefaultFinalizationSettings();
    }
    
    // Load settings into UI
    loadFinalizationSettings();
    
    // Show previously saved data if it exists
    if (appState.responseTags.worksheetFinalization) {
        document.getElementById('finishStep4Btn').disabled = false;
    }
}

// Get default finalization settings
function getDefaultFinalizationSettings() {
    return {
        answerDisplay: 'Separate',
        includeSentenceStarters: true,
        answerLineStyle: 'Single',
        showPoints: true,
        sectionLabeling: 'Numbered',
        paperSize: 'A4',
        orientation: 'Portrait'
    };
}

// Load finalization settings into the UI
function loadFinalizationSettings() {
    const loadSettingsForWorksheet = (worksheetNum) => {
        const settings = worksheetNum === 1 ?
            appState.worksheets.finalization.worksheet1 :
            appState.worksheets.finalization.worksheet2;
        
        if (!settings) return;
        
        // Answer display
        document.querySelector(`input[name="answerDisplay${worksheetNum}"][value="${settings.answerDisplay}"]`).checked = true;
        
        // Sentence starters
        document.getElementById(`includeSentenceStarters${worksheetNum}`).checked = settings.includeSentenceStarters;
        
        // Answer line style
        document.querySelector(`input[name="answerLineStyle${worksheetNum}"][value="${settings.answerLineStyle}"]`).checked = true;
        
        // Show points
        document.getElementById(`showPoints${worksheetNum}`).checked = settings.showPoints;
        
        // Section labeling
        document.querySelector(`input[name="sectionLabeling${worksheetNum}"][value="${settings.sectionLabeling}"]`).checked = true;
        
        // Paper size
        document.querySelector(`input[name="paperSize${worksheetNum}"][value="${settings.paperSize}"]`).checked = true;
        
        // Orientation
        document.querySelector(`input[name="orientation${worksheetNum}"][value="${settings.orientation}"]`).checked = true;
    };
    
    // Load settings for each worksheet
    loadSettingsForWorksheet(1);
    if (appState.worksheets.count > 1) {
        loadSettingsForWorksheet(2);
    }
}

// Apply finalization settings from UI to state
function applyFinalizationSettings() {
    const getSettingsForWorksheet = (worksheetNum) => {
        return {
            answerDisplay: document.querySelector(`input[name="answerDisplay${worksheetNum}"]:checked`).value,
            includeSentenceStarters: document.getElementById(`includeSentenceStarters${worksheetNum}`).checked,
            answerLineStyle: document.querySelector(`input[name="answerLineStyle${worksheetNum}"]:checked`).value,
            showPoints: document.getElementById(`showPoints${worksheetNum}`).checked,
            sectionLabeling: document.querySelector(`input[name="sectionLabeling${worksheetNum}"]:checked`).value,
            paperSize: document.querySelector(`input[name="paperSize${worksheetNum}"]:checked`).value,
            orientation: document.querySelector(`input[name="orientation${worksheetNum}"]:checked`).value
        };
    };
    
    // Save settings for each worksheet
    appState.worksheets.finalization.worksheet1 = getSettingsForWorksheet(1);
    if (appState.worksheets.count > 1) {
        appState.worksheets.finalization.worksheet2 = getSettingsForWorksheet(2);
    }
    
    // Show success message
    showAlert('Settings saved successfully!', 'success');
    
    // Enable generate preview button
    document.getElementById('generateWorksheetPreviewBtn').disabled = false;
}

// Generate worksheet preview
function generateWorksheetPreviewPrompt() {
    // Get relevant data for the prompt
    const provider = appState.lessonInfo.provider;
    const subject = appState.lessonInfo.subject;
    const topic = appState.lessonInfo.topic;
    const level = appState.lessonInfo.level;
    const ability = appState.lessonInfo.ability;
    
    // Create settings summary
    let settingsText = '';
    
    settingsText += `Worksheet 1 Settings:\n`;
    const ws1Settings = appState.worksheets.finalization.worksheet1;
    settingsText += `- Answer Display: ${ws1Settings.answerDisplay}\n`;
    settingsText += `- Sentence Starters: ${ws1Settings.includeSentenceStarters ? 'Included' : 'Not Included'}\n`;
    settingsText += `- Answer Line Style: ${ws1Settings.answerLineStyle}\n`;
    settingsText += `- Show Points: ${ws1Settings.showPoints ? 'Yes' : 'No'}\n`;
    settingsText += `- Section Labeling: ${ws1Settings.sectionLabeling}\n`;
    settingsText += `- Paper Size: ${ws1Settings.paperSize}\n`;
    settingsText += `- Orientation: ${ws1Settings.orientation}\n\n`;
    
    if (appState.worksheets.count > 1) {
        settingsText += `Worksheet 2 Settings:\n`;
        const ws2Settings = appState.worksheets.finalization.worksheet2;
        settingsText += `- Answer Display: ${ws2Settings.answerDisplay}\n`;
        settingsText += `- Sentence Starters: ${ws2Settings.includeSentenceStarters ? 'Included' : 'Not Included'}\n`;
        settingsText += `- Answer Line Style: ${ws2Settings.answerLineStyle}\n`;
        settingsText += `- Show Points: ${ws2Settings.showPoints ? 'Yes' : 'No'}\n`;
        settingsText += `- Section Labeling: ${ws2Settings.sectionLabeling}\n`;
        settingsText += `- Paper Size: ${ws2Settings.paperSize}\n`;
        settingsText += `- Orientation: ${ws2Settings.orientation}\n\n`;
    }
    
    // Create the prompt
    const prompt = `Please create a finalized worksheet layout preview for a ${level} tier ${subject} GCSE worksheet on ${topic} for ${ability} students following the ${provider} specification.

This worksheet will include all the components we've developed:
1. Reference materials (definitions, formulas, diagrams, examples)
2. Retrieval practice questions
3. SCALE framework questions
4. Application questions
5. Exam technique questions
6. Exam-style questions

Please apply these formatting preferences:
${settingsText}

Please generate a description of how the final worksheet(s) will look, including:
1. Overall structure and section sequence
2. How answer spaces will appear based on the selected answer line style
3. Where answers will be placed based on the answer display setting
4. How sections will be labeled based on the section labeling preference
5. How sentence starters will be incorporated (if selected)
6. Visual description of the layout with appropriate spacing and organization

Please structure your response using the following XML format:
<worksheetFinalization>
    <worksheet number="1">
        <previewDescription>
            [Detailed description of worksheet layout]
        </previewDescription>
        <sectionOrder>
            [List of sections in order]
        </sectionOrder>
        <formatNotes>
            [Special formatting considerations]
        </formatNotes>
    </worksheet>
    ${appState.worksheets.count > 1 ? `
    <worksheet number="2">
        <previewDescription>
            [Detailed description of worksheet layout]
        </previewDescription>
        <sectionOrder>
            [List of sections in order]
        </sectionOrder>
        <formatNotes>
            [Special formatting considerations]
        </formatNotes>
    </worksheet>` : ''}
</worksheetFinalization>`;

    // Set the prompt in the textarea
    document.getElementById('worksheetFinalizationPromptTextarea').value = prompt;
}

// Handle response for worksheet finalization
function handleWorksheetFinalizationResponse() {
    const responseText = document.getElementById('worksheetFinalizationResponseTextarea').value;
    if (!responseText) return;
    
    // Store response
    appState.responses.worksheetFinalization = responseText;
    
    // Extract XML tags from response
    const finalizationMatch = /<worksheetFinalization>([\s\S]*?)<\/worksheetFinalization>/g.exec(responseText);
    
    if (finalizationMatch && finalizationMatch[1]) {
        appState.responseTags.worksheetFinalization = finalizationMatch[0];
        
        // Parse finalization content
        parseWorksheetFinalizationContent(finalizationMatch[0]);
        
        // Render the preview
        renderWorksheetPreview();
        
        // Enable finish button
        document.getElementById('finishStep4Btn').disabled = false;
    }
}

// Parse worksheet finalization content from XML
function parseWorksheetFinalizationContent(xml) {
    // Initialize preview data
    appState.worksheets.preview = {
        worksheet1: {
            description: '',
            sectionOrder: [],
            formatNotes: ''
        },
        worksheet2: {
            description: '',
            sectionOrder: [],
            formatNotes: ''
        }
    };
    
    // Parse worksheet 1
    const worksheet1Match = /<worksheet number="1">([\s\S]*?)<\/worksheet>/g.exec(xml);
    if (worksheet1Match && worksheet1Match[1]) {
        const ws1Content = worksheet1Match[1];
        
        const descriptionMatch = /<previewDescription>([\s\S]*?)<\/previewDescription>/g.exec(ws1Content);
        if (descriptionMatch) {
            appState.worksheets.preview.worksheet1.description = descriptionMatch[1].trim();
        }
        
        const sectionOrderMatch = /<sectionOrder>([\s\S]*?)<\/sectionOrder>/g.exec(ws1Content);
        if (sectionOrderMatch) {
            appState.worksheets.preview.worksheet1.sectionOrder = sectionOrderMatch[1].trim()
                .split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0);
        }
        
        const formatNotesMatch = /<formatNotes>([\s\S]*?)<\/formatNotes>/g.exec(ws1Content);
        if (formatNotesMatch) {
            appState.worksheets.preview.worksheet1.formatNotes = formatNotesMatch[1].trim();
        }
    }
    
    // Parse worksheet 2 if it exists
    const worksheet2Match = /<worksheet number="2">([\s\S]*?)<\/worksheet>/g.exec(xml);
    if (worksheet2Match && worksheet2Match[1]) {
        const ws2Content = worksheet2Match[1];
        
        const descriptionMatch = /<previewDescription>([\s\S]*?)<\/previewDescription>/g.exec(ws2Content);
        if (descriptionMatch) {
            appState.worksheets.preview.worksheet2.description = descriptionMatch[1].trim();
        }
        
        const sectionOrderMatch = /<sectionOrder>([\s\S]*?)<\/sectionOrder>/g.exec(ws2Content);
        if (sectionOrderMatch) {
            appState.worksheets.preview.worksheet2.sectionOrder = sectionOrderMatch[1].trim()
                .split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0);
        }
        
        const formatNotesMatch = /<formatNotes>([\s\S]*?)<\/formatNotes>/g.exec(ws2Content);
        if (formatNotesMatch) {
            appState.worksheets.preview.worksheet2.formatNotes = formatNotesMatch[1].trim();
        }
    }
}

// Render worksheet preview
function renderWorksheetPreview() {
    // Function to render preview for a specific worksheet
    const renderPreviewForWorksheet = (worksheetNum) => {
        const previewContainer = document.getElementById(`worksheetPreviewWS${worksheetNum}`);
        if (!previewContainer) return;
        
        // Get preview data
        const preview = worksheetNum === 1 ?
            appState.worksheets.preview.worksheet1 :
            appState.worksheets.preview.worksheet2;
        
        if (!preview.description) {
            previewContainer.innerHTML = '<p>No preview available for this worksheet.</p>';
            return;
        }
        
        // Create preview content
        let previewContent = `
            <div class="preview-description">
                <h5>Worksheet Layout Preview</h5>
                <p>${preview.description.replace(/\n/g, '<br>')}</p>
            </div>
        `;
        
        if (preview.sectionOrder && preview.sectionOrder.length > 0) {
            previewContent += `
                <div class="preview-section-order">
                    <h5>Section Order</h5>
                    <ol>
                        ${preview.sectionOrder.map(section => `<li>${section}</li>`).join('')}
                    </ol>
                </div>
            `;
        }
        
        if (preview.formatNotes) {
            previewContent += `
                <div class="preview-format-notes">
                    <h5>Formatting Notes</h5>
                    <p>${preview.formatNotes.replace(/\n/g, '<br>')}</p>
                </div>
            `;
        }
        
        previewContainer.innerHTML = previewContent;
    };
    
    // Render for each worksheet
    renderPreviewForWorksheet(1);
    if (appState.worksheets.count > 1) {
        renderPreviewForWorksheet(2);
    }
    
    // Show preview container
    document.getElementById('worksheetPreviewContainer').style.display = 'block';
}

// Generate worksheet preview
function generateWorksheetPreview() {
    // First apply the settings
    applyFinalizationSettings();
    
    // Then generate the prompt
    generateWorksheetPreviewPrompt();
}

// Finish Step 4 and complete the lesson planner
function finishStep4() {
    // Make sure we have all the needed data
    if (!appState.responseTags.worksheetFinalization) {
        alert('Please complete all substeps before finalizing your worksheets');
        return;
    }
    
    // Update main step status
    document.querySelector('.main-step-4 .main-step-status').className = 'main-step-status status-completed';
    document.querySelector('.main-step-4 .main-step-status').textContent = 'Completed';
    
    // Collapse Step 4
    if (appState.mainStepExpanded[3]) {
        toggleMainStep(4);
    }
    
    // Show completion message
    const step4Content = document.getElementById('mainStepContent4');
    const step4Inner = step4Content.querySelector('.main-step-inner');
    
    step4Inner.innerHTML = `
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Lesson Planning Complete</h3>
        </div>
        <div class="alert alert-success">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>
            <div>
                <p><strong>Congratulations! You have successfully completed your lesson plan.</strong></p>
                <p>Your comprehensive GCSE science lesson plan is now ready with all components:</p>
                <ul>
                    <li>Lesson Foundations</li>
                    <li>Teaching Approach</li>
                    <li>Slide Content</li>
                    <li>Worksheet Materials</li>
                </ul>
                <p class="mt-2">You can now export your materials or revisit any section to make further refinements.</p>
            </div>
        </div>
        
        <div class="export-options">
            <h4>Export Options</h4>
            <div class="export-buttons">
                <button class="btn btn-primary" onclick="exportFullLessonPlan()">Export Full Lesson Plan</button>
                <button class="btn btn-secondary" onclick="exportSlides()">Export Slides</button>
                <button class="btn btn-secondary" onclick="exportWorksheets()">Export Worksheets</button>
            </div>
        </div>
    </div>
    `;
    
    // Scroll to message
    document.getElementById('mainStep4').scrollIntoView({ behavior: 'smooth' });
}

// Display learning objectives for worksheets
function displayLearningObjectivesForWorksheets() {
    const container = document.getElementById('learningObjectivesForWorksheets');
    if (!container) return;
    
    let html = '<h4>Learning Objectives</h4>';
    
    // Show LO1
    html += `
    <div class="lo-summary">
        <div class="lo-summary-header">
            <span class="lo-number">LO1</span>
            <span class="lo-badge ${getBadgeClassForAO(appState.loTypes.lo1.aoCategory)}">${appState.loTypes.lo1.aoCategory}</span>
        </div>
        <p class="lo-title">${appState.learningObjectives.lo1.title}</p>
        <p class="lo-description">${appState.learningObjectives.lo1.description}</p>
    </div>
    `;
    
    // Show LO2
    html += `
    <div class="lo-summary">
        <div class="lo-summary-header">
            <span class="lo-number">LO2</span>
            <span class="lo-badge ${getBadgeClassForAO(appState.loTypes.lo2.aoCategory)}">${appState.loTypes.lo2.aoCategory}</span>
        </div>
        <p class="lo-title">${appState.learningObjectives.lo2.title}</p>
        <p class="lo-description">${appState.learningObjectives.lo2.description}</p>
    </div>
    `;
    
    // Show LO3 if it exists
    if (appState.learningObjectives.lo3.exists) {
        html += `
        <div class="lo-summary">
            <div class="lo-summary-header">
                <span class="lo-number">LO3</span>
                <span class="lo-badge ${getBadgeClassForAO(appState.loTypes.lo3.aoCategory)}">${appState.loTypes.lo3.aoCategory}</span>
            </div>
            <p class="lo-title">${appState.learningObjectives.lo3.title}</p>
            <p class="lo-description">${appState.learningObjectives.lo3.description}</p>
        </div>
        `;
    }
    
    // Show worksheet allocation if multiple worksheets
    if (appState.worksheets.count > 1) {
        html += `<h4 class="mt-4">Worksheet Allocation</h4>`;
        html += `<div class="allocation-info">`;
        
        html += `<p><strong>Worksheet 1:</strong> Learning Objective${getWorksheetLOs(1).length > 1 ? 's' : ''} ${getWorksheetLOs(1).map(lo => lo).join(', ')}</p>`;
        html += `<p><strong>Worksheet 2:</strong> Learning Objective${getWorksheetLOs(2).length > 1 ? 's' : ''} ${getWorksheetLOs(2).map(lo => lo).join(', ')}</p>`;
        
        html += `</div>`;
    }
    
    container.innerHTML = html;
}

// Get badge class for assessment objective
function getBadgeClassForAO(aoCategory) {
    switch(aoCategory) {
        case 'AO1': return 'badge-ao1';
        case 'AO2': return 'badge-ao2';
        case 'AO3': return 'badge-ao3';
        default: return '';
    }
}

// Get array of LO numbers in a specific worksheet
function getWorksheetLOs(worksheetNum) {
    const result = [];
    
    if (appState.lessonStructure.worksheetAllocation.lo1 === worksheetNum) {
        result.push(1);
    }
    
    if (appState.lessonStructure.worksheetAllocation.lo2 === worksheetNum) {
        result.push(2);
    }
    
    if (appState.learningObjectives.lo3.exists && 
        appState.lessonStructure.worksheetAllocation.lo3 === worksheetNum) {
        result.push(3);
    }
    
    return result;
}

// Display prior knowledge for worksheets
function displayPriorKnowledgeForWorksheets() {
    const container = document.getElementById('priorKnowledgeForWorksheets');
    if (!container) return;
    
    let html = '<h4>Prior Knowledge</h4>';
    
    // Show LO1 Prior Knowledge
    html += `
    <div class="lo-prior-knowledge">
        <div class="lo-prior-knowledge-header">
            <span>Learning Objective 1 Prior Knowledge</span>
        </div>
        <ul>
            ${appState.priorKnowledge.lo1.map(item => `<li>${item}</li>`).join('')}
        </ul>
    </div>
    `;
    
    // Show LO2 Prior Knowledge
    html += `
    <div class="lo-prior-knowledge">
        <div class="lo-prior-knowledge-header">
            <span>Learning Objective 2 Prior Knowledge</span>
        </div>
        <ul>
            ${appState.priorKnowledge.lo2.map(item => `<li>${item}</li>`).join('')}
        </ul>
    </div>
    `;
    
    // Show LO3 Prior Knowledge if it exists
    if (appState.learningObjectives.lo3.exists) {
        html += `
        <div class="lo-prior-knowledge">
            <div class="lo-prior-knowledge-header">
                <span>Learning Objective 3 Prior Knowledge</span>
            </div>
            <ul>
                ${appState.priorKnowledge.lo3.map(item => `<li>${item}</li>`).join('')}
            </ul>
        </div>
        `;
    }
    
    container.innerHTML = html;
}

// Display learning objectives for SCALE questions
function displayLearningObjectivesForScaleQuestions() {
    // This would be similar to displayLearningObjectivesForWorksheets but with
    // emphasis on SCALE-relevant information
}

// Utility function to show alert message
function showAlert(message, type = 'info') {
    const alertContainer = document.createElement('div');
    alertContainer.className = `alert alert-${type} alert-float`;
    alertContainer.innerHTML = `
        <div>${message}</div>
        <button type="button" class="alert-close" onclick="this.parentElement.remove()">&times;</button>
    `;
    
    document.body.appendChild(alertContainer);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
        if (alertContainer.parentElement) {
            alertContainer.remove();
        }
    }, 3000);
}

// Export functions (placeholders)
function exportFullLessonPlan() {
    alert('Export functionality will be implemented in a future version.');
}

function exportSlides() {
    alert('Slides export functionality will be implemented in a future version.');
}

function exportWorksheets() {
    alert('Worksheets export functionality will be implemented in a future version.');
}


ðŸ“„ FILE: utils.js
==================================================
// Copy text to clipboard
function copyToClipboard(textareaId) {
    const textarea = document.getElementById(textareaId);
    textarea.select();
    document.execCommand('copy');
    
    // Show feedback
    const copyBtn = textarea.nextElementSibling;
    const originalText = copyBtn.textContent;
    copyBtn.textContent = 'Copied!';
    setTimeout(() => {
        copyBtn.textContent = originalText;
    }, 1500);
}

// Format XML for display
function formatXML(xml) {
    if (!xml) return '';
    
    return xml
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/&lt;(\/?[a-zA-Z][a-zA-Z0-9]*(?:\s+[a-zA-Z][a-zA-Z0-9]*=".*?")*?)\s*&gt;/g, '<span class="tag-bracket">&lt;</span><span class="tag-name">$1</span><span class="tag-bracket">&gt;</span>')
        .replace(/&lt;!--[\s\S]*?--&gt;/g, '<span style="color: #999">&lt;!--$1--&gt;</span>');
}

// Extract XML tags from response
function extractXML(response, tagName) {
    const regex = new RegExp(`<${tagName}>[\\s\\S]*?<\\/${tagName}>`, 'i');
    const match = response.match(regex);
    return match ? match[0] : null;
}

// Format response based on XML structure
function formatResponse(xml, type) {
    if (!xml) return '<p>No valid response found</p>';
    
    let html = '';
    
    switch (type) {
        case 'overview':
            // Extract lesson info
            const lessonInfoMatch = xml.match(/<LessonInfo>([\s\S]*?)<\/LessonInfo>/);
            if (lessonInfoMatch) {
                html += '<h4>Lesson Information</h4>';
                const infoLines = lessonInfoMatch[1].trim().split('\n');
                html += '<div style="margin-bottom: 1rem;">';
                infoLines.forEach(line => {
                    html += `<p>${line.trim()}</p>`;
                });
                html += '</div>';
            }
            
            // Extract learning objectives
            const learningObjMatch = xml.match(/<LearningObjectives>([\s\S]*?)<\/LearningObjectives>/);
            if (learningObjMatch) {
                html += '<h4>Learning Objectives</h4>';
                
                // Extract individual LO's
                const lo1Match = xml.match(/<LO1>[\s\S]*?<Title>([\s\S]*?)<\/Title>[\s\S]*?<Description>([\s\S]*?)<\/Description>[\s\S]*?<\/LO1>/);
                if (lo1Match) {
                    html += `<p><strong>LO1: ${lo1Match[1].trim()}</strong></p>`;
                    html += `<p>${lo1Match[2].trim()}</p>`;
                }
                
                const lo2Match = xml.match(/<LO2>[\s\S]*?<Title>([\s\S]*?)<\/Title>[\s\S]*?<Description>([\s\S]*?)<\/Description>[\s\S]*?<\/LO2>/);
                if (lo2Match) {
                    html += `<p><strong>LO2: ${lo2Match[1].trim()}</strong></p>`;
                    html += `<p>${lo2Match[2].trim()}</p>`;
                }
                
                const lo3Match = xml.match(/<LO3>[\s\S]*?<Title>([\s\S]*?)<\/Title>[\s\S]*?<Description>([\s\S]*?)<\/Description>[\s\S]*?<\/LO3>/);
                if (lo3Match) {
                    html += `<p><strong>LO3: ${lo3Match[1].trim()}</strong></p>`;
                    html += `<p>${lo3Match[2].trim()}</p>`;
                }
            }
            break;
        
        case 'loTypes':
            // Extract LO types
            const loTypesMatch = xml.match(/<LOTypes>([\s\S]*?)<\/LOTypes>/);
            if (loTypesMatch) {
                html += '<h4>Learning Objective Types</h4>';
                
                // Extract individual LO types
                const lo1TypeMatch = xml.match(/<LO1Type>[\s\S]*?<AOCategory>([\s\S]*?)<\/AOCategory>[\s\S]*?<SpecificType>([\s\S]*?)<\/SpecificType>[\s\S]*?<Justification>([\s\S]*?)<\/Justification>[\s\S]*?<\/LO1Type>/);
                if (lo1TypeMatch) {
                    html += `<p><strong>LO1 Type: ${lo1TypeMatch[1].trim()} - ${lo1TypeMatch[2].trim()}</strong></p>`;
                    html += `<p>Justification: ${lo1TypeMatch[3].trim()}</p>`;
                }
                
                const lo2TypeMatch = xml.match(/<LO2Type>[\s\S]*?<AOCategory>([\s\S]*?)<\/AOCategory>[\s\S]*?<SpecificType>([\s\S]*?)<\/SpecificType>[\s\S]*?<Justification>([\s\S]*?)<\/Justification>[\s\S]*?<\/LO2Type>/);
                if (lo2TypeMatch) {
                    html += `<p><strong>LO2 Type: ${lo2TypeMatch[1].trim()} - ${lo2TypeMatch[2].trim()}</strong></p>`;
                    html += `<p>Justification: ${lo2TypeMatch[3].trim()}</p>`;
                }
                
                const lo3TypeMatch = xml.match(/<LO3Type>[\s\S]*?<AOCategory>([\s\S]*?)<\/AOCategory>[\s\S]*?<SpecificType>([\s\S]*?)<\/SpecificType>[\s\S]*?<Justification>([\s\S]*?)<\/Justification>[\s\S]*?<\/LO3Type>/);
                if (lo3TypeMatch) {
                    html += `<p><strong>LO3 Type: ${lo3TypeMatch[1].trim()} - ${lo3TypeMatch[2].trim()}</strong></p>`;
                    html += `<p>Justification: ${lo3TypeMatch[3].trim()}</p>`;
                }
            }
            break;
        
        case 'misconceptions':
            // Extract misconceptions
            const misconceptionsMatch = xml.match(/<Misconceptions>([\s\S]*?)<\/Misconceptions>/);
            if (misconceptionsMatch) {
                html += '<h4>Potential Misconceptions</h4>';
                
                // Extract LO1 misconceptions
                const lo1MisconceptionsMatch = xml.match(/<LO1Misconceptions>([\s\S]*?)<\/LO1Misconceptions>/);
                if (lo1MisconceptionsMatch) {
                    html += '<p><strong>LO1 Misconceptions:</strong></p><ul>';
                    
                    // Extract individual misconceptions
                    const misconceptions1 = lo1MisconceptionsMatch[1].match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/g);
                    if (misconceptions1) {
                        misconceptions1.forEach(misconception => {
                            const content = misconception.match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/)[1].trim();
                            html += `<li>${content}</li>`;
                        });
                    }
                    
                    html += '</ul>';
                }
                
                // Extract LO2 misconceptions
                const lo2MisconceptionsMatch = xml.match(/<LO2Misconceptions>([\s\S]*?)<\/LO2Misconceptions>/);
                if (lo2MisconceptionsMatch) {
                    html += '<p><strong>LO2 Misconceptions:</strong></p><ul>';
                    
                    // Extract individual misconceptions
                    const misconceptions2 = lo2MisconceptionsMatch[1].match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/g);
                    if (misconceptions2) {
                        misconceptions2.forEach(misconception => {
                            const content = misconception.match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/)[1].trim();
                            html += `<li>${content}</li>`;
                        });
                    }
                    
                    html += '</ul>';
                }
                
                // Extract LO3 misconceptions if present
                const lo3MisconceptionsMatch = xml.match(/<LO3Misconceptions>([\s\S]*?)<\/LO3Misconceptions>/);
                if (lo3MisconceptionsMatch) {
                    html += '<p><strong>LO3 Misconceptions:</strong></p><ul>';
                    
                    // Extract individual misconceptions
                    const misconceptions3 = lo3MisconceptionsMatch[1].match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/g);
                    if (misconceptions3) {
                        misconceptions3.forEach(misconception => {
                            const content = misconception.match(/<Misconception\d+>([\s\S]*?)<\/Misconception\d+>/)[1].trim();
                            html += `<li>${content}</li>`;
                        });
                    }
                    
                    html += '</ul>';
                }
            }
            break;
        
        case 'priorKnowledge':
            // Extract prior knowledge
            const priorKnowledgeMatch = xml.match(/<PriorKnowledge>([\s\S]*?)<\/PriorKnowledge>/);
            if (priorKnowledgeMatch) {
                html += '<h4>Prior Knowledge Requirements</h4>';
                
                // Extract LO1 prior knowledge
                const lo1PriorKnowledgeMatch = xml.match(/<LO1PriorKnowledge>([\s\S]*?)<\/LO1PriorKnowledge>/);
                if (lo1PriorKnowledgeMatch) {
                    html += '<p><strong>LO1 Prior Knowledge:</strong></p><ul>';
                    
                    // Extract individual knowledge items
                    const knowledge1 = lo1PriorKnowledgeMatch[1].match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/g);
                    if (knowledge1) {
                        knowledge1.forEach(knowledge => {
                            const content = knowledge.match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/)[1].trim();
                            html += `<li>${content}</li>`;
                        });
                    }
                    
                    html += '</ul>';
                }
                
                // Extract LO2 prior knowledge
                const lo2PriorKnowledgeMatch = xml.match(/<LO2PriorKnowledge>([\s\S]*?)<\/LO2PriorKnowledge>/);
                if (lo2PriorKnowledgeMatch) {
                    html += '<p><strong>LO2 Prior Knowledge:</strong></p><ul>';
                    
                    // Extract individual knowledge items
                    const knowledge2 = lo2PriorKnowledgeMatch[1].match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/g);
                    if (knowledge2) {
                        knowledge2.forEach(knowledge => {
                            const content = knowledge.match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/)[1].trim();
                            html += `<li>${content}</li>`;
                        });
                    }
                    
                    html += '</ul>';
                }
                
                // Extract LO3 prior knowledge if present
                const lo3PriorKnowledgeMatch = xml.match(/<LO3PriorKnowledge>([\s\S]*?)<\/LO3PriorKnowledge>/);
                if (lo3PriorKnowledgeMatch) {
                    html += '<p><strong>LO3 Prior Knowledge:</strong></p><ul>';
                    
                    // Extract individual knowledge items
                    const knowledge3 = lo3PriorKnowledgeMatch[1].match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/g);
                    if (knowledge3) {
                        knowledge3.forEach(knowledge => {
                            const content = knowledge.match(/<Knowledge\d+>([\s\S]*?)<\/Knowledge\d+>/)[1].trim();
                            html += `<li>${content}</li>`;
                        });
                    }
                    
                    html += '</ul>';
                }
            }
            break;
            
        default:
            html = '<p>No formatting available for this response type</p>';
    }
    
    return html || '<p>Could not parse the response</p>';
}

// Toggle learn more sections
function toggleLearnMore(containerId) {
    const container = document.getElementById(containerId);
    if (container) {
        container.classList.toggle('expanded');
    }
}

// Close modal
function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('active');
}

